{
    "name": "bytebase",
    "displayName": "Bytebase",
    "description": "A Pulumi package for creating and managing Bytebase resources",
    "keywords": [
        "pulumi",
        "bytebase",
        "category/infrastructure"
    ],
    "homepage": "https://github.com/wawilow/pulumi-bytebase",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`bytebase` Terraform Provider](https://github.com/bytebase/terraform-provider-bytebase).",
    "repository": "https://github.com/wawilow/pulumi-bytebase",
    "logoUrl": "https://raw.githubusercontent.com/wawilow/pulumi-bytebase/main/docs/bytebase.png",
    "pluginDownloadURL": "github://api.github.com/wawilow/pulumi-bytebase",
    "publisher": "wawilow",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "go": {
            "importBasePath": "github.com/wawilow/pulumi-bytebase/sdk/go/bytebase",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@wawilow/pulumi-bytebase",
            "packageDescription": "A Pulumi package for creating and managing Bytebase resources. Based on terraform-provider-bytebase: version v3.8.6",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/bytebase/terraform-provider-bytebase)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-bytebase` repo](https://github.com/wawilow/pulumi-bytebase/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-bytebase` repo](https://github.com/bytebase/terraform-provider-bytebase/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumi-bytebase",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/bytebase/terraform-provider-bytebase)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-bytebase` repo](https://github.com/wawilow/pulumi-bytebase/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-bytebase` repo](https://github.com/bytebase/terraform-provider-bytebase/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "serviceAccount": {
                "type": "string",
                "description": "The Bytebase service account email. If not provided in the configuration, you must set the `BYTEBASE_SERVICE_ACCOUNT`\nvariable in the environment.\n"
            },
            "serviceKey": {
                "type": "string",
                "description": "The Bytebase service account key. If not provided in the configuration, you must set the `BYTEBASE_SERVICE_KEY` variable\nin the environment.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The external URL for your Bytebase server. If not provided in the configuration, you must set the `BYTEBASE_URL`\nvariable in the environment.\n"
            }
        }
    },
    "types": {
        "bytebase:Database/getListDatabase:getListDatabase": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The database environment, will follow the instance environment by default\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The deployment and policy control labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The database full name in instances/{instance}/databases/{database} format\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project full name for the database in projects/{project} format.\n"
                },
                "schemaVersion": {
                    "type": "string",
                    "description": "The version of database schema.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The existence of a database.\n"
                },
                "successfulSyncTime": {
                    "type": "string",
                    "description": "The latest synchronization time.\n"
                }
            },
            "type": "object",
            "required": [
                "environment",
                "labels",
                "name",
                "project",
                "schemaVersion",
                "state",
                "successfulSyncTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:DatabaseGroup/getListDatabaseGroup:getListDatabaseGroup": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The database group condition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The database group fullname in projects/{id}/databaseGroups/{id} format.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The database group title.\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "name",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Group/getListGroup:getListGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The group description.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Group/getListGroupMember:getListGroupMember"
                    },
                    "description": "The members in the group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The group name in groups/{email} format.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The group title.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "members",
                "name",
                "source",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Group/getListGroupMember:getListGroupMember": {
            "properties": {
                "member": {
                    "type": "string",
                    "description": "The member in users/{email} format.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The member's role in the group.\n"
                }
            },
            "type": "object",
            "required": [
                "member",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Iam/PolicyIamPolicy:PolicyIamPolicy": {
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Iam/PolicyIamPolicyBinding:PolicyIamPolicyBinding"
                    },
                    "description": "The binding in the IAM policy.\n"
                }
            },
            "type": "object"
        },
        "bytebase:Iam/PolicyIamPolicyBinding:PolicyIamPolicyBinding": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Iam/PolicyIamPolicyBindingCondition:PolicyIamPolicyBindingCondition"
                    },
                    "description": "Match the condition limit.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of memebers. The value can be \"allUsers\", \"user:{email}\" or \"group:{email}\".\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role full name in roles/{id} format.\n"
                }
            },
            "type": "object"
        },
        "bytebase:Iam/PolicyIamPolicyBindingCondition:PolicyIamPolicyBindingCondition": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The accessible database full name in instances/{instance resource id}/databases/{database name} format\n"
                },
                "expireTimestamp": {
                    "type": "string",
                    "description": "The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format\n"
                },
                "rowLimit": {
                    "type": "integer",
                    "description": "The export row limit for exporter role\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The accessible schema in the database\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The accessible table list\n"
                }
            },
            "type": "object"
        },
        "bytebase:Iam/getPolicyIamPolicy:getPolicyIamPolicy": {
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Iam/getPolicyIamPolicyBinding:getPolicyIamPolicyBinding"
                    },
                    "description": "The binding in the IAM policy.\n"
                }
            },
            "type": "object"
        },
        "bytebase:Iam/getPolicyIamPolicyBinding:getPolicyIamPolicyBinding": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Iam/getPolicyIamPolicyBindingCondition:getPolicyIamPolicyBindingCondition"
                    },
                    "description": "Match the condition limit.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of memebers. The value can be \"allUsers\", \"user:{email}\" or \"group:{email}\".\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role full name in roles/{id} format.\n"
                }
            },
            "type": "object"
        },
        "bytebase:Iam/getPolicyIamPolicyBindingCondition:getPolicyIamPolicyBindingCondition": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The accessible database full name in instances/{instance resource id}/databases/{database name} format\n"
                },
                "expireTimestamp": {
                    "type": "string",
                    "description": "The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format\n"
                },
                "rowLimit": {
                    "type": "integer",
                    "description": "The export row limit for exporter role\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The accessible schema in the database\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The accessible table list\n"
                }
            },
            "type": "object"
        },
        "bytebase:Instance/getListInstance:getListInstance": {
            "properties": {
                "activation": {
                    "type": "boolean",
                    "description": "Whether assign license for this instance or not.\n"
                },
                "dataSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Instance/getListInstanceDataSource:getListInstanceDataSource"
                    }
                },
                "engine": {
                    "type": "string",
                    "description": "The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The environment name for your instance in \"environments/{resource id}\" format.\n"
                },
                "externalLink": {
                    "type": "string",
                    "description": "The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)\n"
                },
                "maximumConnections": {
                    "type": "integer",
                    "description": "The maximum number of connections. The default value is 10.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The instance full name in instances/{resource id} format.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The instance unique resource id.\n"
                },
                "syncInterval": {
                    "type": "integer",
                    "description": "How often the instance is synced in seconds. Default 0, means never sync.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The instance title.\n"
                }
            },
            "type": "object",
            "required": [
                "activation",
                "dataSources",
                "engine",
                "engineVersion",
                "environment",
                "externalLink",
                "maximumConnections",
                "name",
                "resourceId",
                "syncInterval",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Instance/getListInstanceDataSource:getListInstanceDataSource": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database for the instance, you can set this if the engine type is POSTGRES.\n"
                },
                "externalSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Instance/getListInstanceDataSourceExternalSecret:getListInstanceDataSourceExternalSecret"
                    },
                    "description": "The external secret to get the database password. Learn more: https://www.bytebase.com/docs/get-started/instance/#use-external-secret-manager\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host or socket for your instance, or the account name if the instance type is Snowflake.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique data source id in this instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The connection user password used by Bytebase to perform DDL and DML operations.\n",
                    "secret": true
                },
                "port": {
                    "type": "string",
                    "description": "The port for your instance.\n"
                },
                "sslCa": {
                    "type": "string",
                    "description": "The CA certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.\n",
                    "secret": true
                },
                "sslCert": {
                    "type": "string",
                    "description": "The client certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.\n",
                    "secret": true
                },
                "sslKey": {
                    "type": "string",
                    "description": "The client key. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Should be ADMIN or READ_ONLY.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Enable SSL connection. Required to use SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The connection user name used by Bytebase to perform DDL and DML operations.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "externalSecrets",
                "host",
                "id",
                "password",
                "port",
                "sslCa",
                "sslCert",
                "sslKey",
                "type",
                "useSsl",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Instance/getListInstanceDataSourceExternalSecret:getListInstanceDataSourceExternalSecret": {
            "properties": {
                "awsSecretsManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Instance/getListInstanceDataSourceExternalSecretAwsSecretsManager:getListInstanceDataSourceExternalSecretAwsSecretsManager"
                    },
                    "description": "The AWS Secrets Manager to get the database password. Reference doc https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\n"
                },
                "gcpSecretManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Instance/getListInstanceDataSourceExternalSecretGcpSecretManager:getListInstanceDataSourceExternalSecretGcpSecretManager"
                    },
                    "description": "The GCP Secret Manager to get the database password. Reference doc https://cloud.google.com/secret-manager/docs\n"
                },
                "vaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Instance/getListInstanceDataSourceExternalSecretVault:getListInstanceDataSourceExternalSecretVault"
                    }
                }
            },
            "type": "object",
            "required": [
                "awsSecretsManagers",
                "gcpSecretManagers",
                "vaults"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Instance/getListInstanceDataSourceExternalSecretAwsSecretsManager:getListInstanceDataSourceExternalSecretAwsSecretsManager": {
            "properties": {
                "passwordKeyName": {
                    "type": "string",
                    "description": "The key name for the password.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret name to store the password.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordKeyName",
                "secretName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Instance/getListInstanceDataSourceExternalSecretGcpSecretManager:getListInstanceDataSourceExternalSecretGcpSecretManager": {
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "The secret name should be like \"projects/{project-id}/secrets/{secret-id}\".\n"
                }
            },
            "type": "object",
            "required": [
                "secretName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Instance/getListInstanceDataSourceExternalSecretVault:getListInstanceDataSourceExternalSecretVault": {
            "properties": {
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Instance/getListInstanceDataSourceExternalSecretVaultAppRole:getListInstanceDataSourceExternalSecretVaultAppRole"
                    },
                    "description": "The Vault app role to get the password.\n"
                },
                "engineName": {
                    "type": "string",
                    "description": "The name for secret engine.\n"
                },
                "passwordKeyName": {
                    "type": "string",
                    "description": "The key name for the password.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret name in the engine to store the password.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The Vault URL.\n"
                }
            },
            "type": "object",
            "required": [
                "appRoles",
                "engineName",
                "passwordKeyName",
                "secretName",
                "token",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Instance/getListInstanceDataSourceExternalSecretVaultAppRole:getListInstanceDataSourceExternalSecretVaultAppRole": {
            "properties": {
                "roleId": {
                    "type": "string",
                    "description": "The app role id.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The secret id for the role without ttl.\n",
                    "secret": true
                },
                "secretType": {
                    "type": "string",
                    "description": "The secret id type, can be PLAIN (plain text for the secret) or ENVIRONMENT (envirionment name for the secret).\n"
                }
            },
            "type": "object",
            "required": [
                "roleId",
                "secret",
                "secretType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Policy/getListPolicy:getListPolicy": {
            "properties": {
                "enforce": {
                    "type": "boolean",
                    "description": "Decide if the policy is enforced.\n"
                },
                "globalMaskingPolicy": {
                    "$ref": "#/types/bytebase:Policy/getListPolicyGlobalMaskingPolicy:getListPolicyGlobalMaskingPolicy"
                },
                "inheritFromParent": {
                    "type": "boolean",
                    "description": "Decide if the policy should inherit from the parent.\n"
                },
                "maskingExceptionPolicy": {
                    "$ref": "#/types/bytebase:Policy/getListPolicyMaskingExceptionPolicy:getListPolicyMaskingExceptionPolicy"
                },
                "name": {
                    "type": "string",
                    "description": "The policy full name\n"
                },
                "type": {
                    "type": "string",
                    "description": "The policy type.\n"
                }
            },
            "type": "object",
            "required": [
                "enforce",
                "globalMaskingPolicy",
                "inheritFromParent",
                "maskingExceptionPolicy",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Policy/getListPolicyGlobalMaskingPolicy:getListPolicyGlobalMaskingPolicy": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Policy/getListPolicyGlobalMaskingPolicyRule:getListPolicyGlobalMaskingPolicyRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Policy/getListPolicyGlobalMaskingPolicyRule:getListPolicyGlobalMaskingPolicyRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The condition expression\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique rule id\n"
                },
                "semanticType": {
                    "type": "string",
                    "description": "The semantic type id\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title for the rule\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "id",
                "semanticType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Policy/getListPolicyMaskingExceptionPolicy:getListPolicyMaskingExceptionPolicy": {
            "properties": {
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Policy/getListPolicyMaskingExceptionPolicyException:getListPolicyMaskingExceptionPolicyException"
                    }
                }
            },
            "type": "object",
            "required": [
                "exceptions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Policy/getListPolicyMaskingExceptionPolicyException:getListPolicyMaskingExceptionPolicyException": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "column": {
                    "type": "string"
                },
                "database": {
                    "type": "string",
                    "description": "The database full name in instances/{instance resource id}/databases/{database name} format\n"
                },
                "expireTimestamp": {
                    "type": "string",
                    "description": "The expiration timestamp in YYYY-MM-DDThh:mm:ss.000Z format\n"
                },
                "member": {
                    "type": "string",
                    "description": "The member in user:{email} or group:{email} format.\n"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the masking exemption\n"
                },
                "schema": {
                    "type": "string"
                },
                "table": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "column",
                "database",
                "expireTimestamp",
                "member",
                "schema",
                "table"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Project/getListProject:getListProject": {
            "properties": {
                "allowModifyStatement": {
                    "type": "boolean",
                    "description": "Allow modifying statement after issue is created.\n"
                },
                "allowSelfApproval": {
                    "type": "boolean",
                    "description": "Whether to allow the issue creator to self-approve the issue.\n"
                },
                "autoEnableBackup": {
                    "type": "boolean",
                    "description": "Whether to automatically enable backup.\n"
                },
                "autoResolveIssue": {
                    "type": "boolean",
                    "description": "Enable auto resolve issue.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The databases full name in the resource.\n"
                },
                "enforceIssueTitle": {
                    "type": "boolean",
                    "description": "Enforce issue title created by user instead of generated by Bytebase.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The project full name in projects/{resource id} format.\n"
                },
                "postgresDatabaseTenantMode": {
                    "type": "boolean",
                    "description": "Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended \"set role \u003cdb_owner\u003e\" statement.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The project unique resource id.\n"
                },
                "skipBackupErrors": {
                    "type": "boolean",
                    "description": "Whether to skip backup errors and continue the data migration.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The project title.\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Project/getListProjectWebhook:getListProjectWebhook"
                    },
                    "description": "The webhooks in the project.\n"
                }
            },
            "type": "object",
            "required": [
                "allowModifyStatement",
                "allowSelfApproval",
                "autoEnableBackup",
                "autoResolveIssue",
                "databases",
                "enforceIssueTitle",
                "name",
                "postgresDatabaseTenantMode",
                "resourceId",
                "skipBackupErrors",
                "title",
                "webhooks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Project/getListProjectWebhook:getListProjectWebhook": {
            "properties": {
                "directMessage": {
                    "type": "boolean",
                    "description": "If direct_message is set, the notification is sent directly to the persons and url will be ignored. Require IM integration for this function to work.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The webhook full name in projects/{resource id}/webhooks/{id} format.\n"
                },
                "notificationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "notification_types is the list of activities types that the webhook is interested in. Bytebase will only send notifications to the webhook if the activity type is in the list.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The webhook title\n"
                },
                "type": {
                    "type": "string",
                    "description": "The webhook type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/project_service.proto#L449 for support types.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "notificationTypes",
                "title",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Review/ConfigRule:ConfigRule": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment for the rule.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The rule for the database engine.\n"
                },
                "level": {
                    "type": "string",
                    "description": "The rule level.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload is a JSON string that varies by rule type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#payload-structure-types for all details\n"
                },
                "type": {
                    "type": "string",
                    "description": "The rule unique type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#rule-categories for all rules\n"
                }
            },
            "type": "object",
            "required": [
                "engine",
                "level",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "engine",
                        "level",
                        "payload",
                        "type"
                    ]
                }
            }
        },
        "bytebase:Review/getConfigRule:getConfigRule": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment for the rule.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The rule for the database engine.\n"
                },
                "level": {
                    "type": "string",
                    "description": "The rule level.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload for the rule.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The rule unique type. Check https://www.bytebase.com/docs/sql-review/review-rules for all rules\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "engine",
                "level",
                "payload",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:ReviewConfig/getListReviewConfig:getListReviewConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the SQL review config\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The unique resource id for the review config.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:ReviewConfig/getListReviewConfigRule:getListReviewConfigRule"
                    },
                    "description": "The SQL review rules.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title for the review config.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "resourceId",
                "resources",
                "rules",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:ReviewConfig/getListReviewConfigRule:getListReviewConfigRule": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment for the rule.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The rule for the database engine.\n"
                },
                "level": {
                    "type": "string",
                    "description": "The rule level.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload for the rule.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The rule unique type. Check https://www.bytebase.com/docs/sql-review/review-rules for all rules\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "engine",
                "level",
                "payload",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Risk/getListRisk:getListRisk": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The risk active.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The risk condition.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The risk level.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The risk full name in risks/{resource id} format.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The risk source.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The risk title.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "condition",
                "level",
                "name",
                "source",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:Role/getListRole:getListRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The role description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The role full name in roles/{resource id} format.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role permissions.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The role unique resource id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The role title.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The role type.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "permissions",
                "resourceId",
                "title",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:User/getListUser:getListUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The user email.\n"
                },
                "lastChangePasswordTime": {
                    "type": "string",
                    "description": "The user last change password time.\n"
                },
                "lastLoginTime": {
                    "type": "string",
                    "description": "The user last login time.\n"
                },
                "mfaEnabled": {
                    "type": "boolean",
                    "description": "The mfa_enabled flag means if the user has enabled MFA.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user name in users/{user id or email} format.\n"
                },
                "phone": {
                    "type": "string",
                    "description": "The user phone.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The user is deleted or not.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The user title.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The user type.\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "lastChangePasswordTime",
                "lastLoginTime",
                "mfaEnabled",
                "name",
                "phone",
                "source",
                "state",
                "title",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/DatabaseCatalog:DatabaseCatalog": {
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/DatabaseCatalogSchema:DatabaseCatalogSchema"
                    }
                }
            },
            "type": "object",
            "required": [
                "schemas"
            ]
        },
        "bytebase:index/DatabaseCatalogSchema:DatabaseCatalogSchema": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/DatabaseCatalogSchemaTable:DatabaseCatalogSchemaTable"
                    }
                }
            },
            "type": "object",
            "required": [
                "tables"
            ]
        },
        "bytebase:index/DatabaseCatalogSchemaTable:DatabaseCatalogSchemaTable": {
            "properties": {
                "classification": {
                    "type": "string",
                    "description": "The classification id\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/DatabaseCatalogSchemaTableColumn:DatabaseCatalogSchemaTableColumn"
                    }
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "columns",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "classification",
                        "columns",
                        "name"
                    ]
                }
            }
        },
        "bytebase:index/DatabaseCatalogSchemaTableColumn:DatabaseCatalogSchemaTableColumn": {
            "properties": {
                "classification": {
                    "type": "string",
                    "description": "The classification id\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "semanticType": {
                    "type": "string",
                    "description": "The semantic type id\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "classification",
                        "name",
                        "semanticType"
                    ]
                }
            }
        },
        "bytebase:index/GroupMember:GroupMember": {
            "properties": {
                "member": {
                    "type": "string",
                    "description": "The member in users/{email} format.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The member's role in the group, should be OWNER or MEMBER.\n"
                }
            },
            "type": "object",
            "required": [
                "member",
                "role"
            ]
        },
        "bytebase:index/InstanceDataSource:InstanceDataSource": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database for the instance, you can set this if the engine type is POSTGRES.\n"
                },
                "externalSecret": {
                    "$ref": "#/types/bytebase:index/InstanceDataSourceExternalSecret:InstanceDataSourceExternalSecret",
                    "description": "The external secret to get the database password. Learn more: https://www.bytebase.com/docs/get-started/instance/#use-external-secret-manager\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host or socket for your instance, or the account name if the instance type is Snowflake.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique data source id in this instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The connection user password used by Bytebase to perform DDL and DML operations.\n",
                    "secret": true
                },
                "port": {
                    "type": "string",
                    "description": "The port for your instance.\n"
                },
                "sslCa": {
                    "type": "string",
                    "description": "The CA certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB or CLICKHOUSE.\n",
                    "secret": true
                },
                "sslCert": {
                    "type": "string",
                    "description": "The client certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB or CLICKHOUSE.\n",
                    "secret": true
                },
                "sslKey": {
                    "type": "string",
                    "description": "The client key. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB or CLICKHOUSE.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Should be ADMIN or READ_ONLY.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Enable SSL connection. Required to use SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The connection user name used by Bytebase to perform DDL and DML operations.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "id",
                "port",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "id",
                        "password",
                        "port",
                        "sslCa",
                        "sslCert",
                        "sslKey",
                        "type"
                    ]
                }
            }
        },
        "bytebase:index/InstanceDataSourceExternalSecret:InstanceDataSourceExternalSecret": {
            "properties": {
                "awsSecretsManager": {
                    "$ref": "#/types/bytebase:index/InstanceDataSourceExternalSecretAwsSecretsManager:InstanceDataSourceExternalSecretAwsSecretsManager",
                    "description": "The AWS Secrets Manager to get the database password. Reference doc https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\n"
                },
                "gcpSecretManager": {
                    "$ref": "#/types/bytebase:index/InstanceDataSourceExternalSecretGcpSecretManager:InstanceDataSourceExternalSecretGcpSecretManager",
                    "description": "The GCP Secret Manager to get the database password. Reference doc https://cloud.google.com/secret-manager/docs\n"
                },
                "vault": {
                    "$ref": "#/types/bytebase:index/InstanceDataSourceExternalSecretVault:InstanceDataSourceExternalSecretVault"
                }
            },
            "type": "object"
        },
        "bytebase:index/InstanceDataSourceExternalSecretAwsSecretsManager:InstanceDataSourceExternalSecretAwsSecretsManager": {
            "properties": {
                "passwordKeyName": {
                    "type": "string",
                    "description": "The key name for the password.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret name to store the password.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordKeyName",
                "secretName"
            ]
        },
        "bytebase:index/InstanceDataSourceExternalSecretGcpSecretManager:InstanceDataSourceExternalSecretGcpSecretManager": {
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "The secret name should be like \"projects/{project-id}/secrets/{secret-id}\".\n"
                }
            },
            "type": "object",
            "required": [
                "secretName"
            ]
        },
        "bytebase:index/InstanceDataSourceExternalSecretVault:InstanceDataSourceExternalSecretVault": {
            "properties": {
                "appRole": {
                    "$ref": "#/types/bytebase:index/InstanceDataSourceExternalSecretVaultAppRole:InstanceDataSourceExternalSecretVaultAppRole",
                    "description": "The Vault app role to get the password.\n"
                },
                "engineName": {
                    "type": "string",
                    "description": "The name for secret engine.\n"
                },
                "passwordKeyName": {
                    "type": "string",
                    "description": "The key name for the password.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret name in the engine to store the password.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The Vault URL.\n"
                }
            },
            "type": "object",
            "required": [
                "engineName",
                "passwordKeyName",
                "secretName",
                "url"
            ]
        },
        "bytebase:index/InstanceDataSourceExternalSecretVaultAppRole:InstanceDataSourceExternalSecretVaultAppRole": {
            "properties": {
                "roleId": {
                    "type": "string",
                    "description": "The app role id.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The secret id for the role without ttl.\n",
                    "secret": true
                },
                "secretType": {
                    "type": "string",
                    "description": "The secret id type, can be PLAIN (plain text for the secret) or ENVIRONMENT (envirionment name for the secret).\n"
                }
            },
            "type": "object",
            "required": [
                "roleId",
                "secret",
                "secretType"
            ]
        },
        "bytebase:index/PolicyDataSourceQueryPolicy:PolicyDataSourceQueryPolicy": {
            "properties": {
                "disallowDdl": {
                    "type": "boolean",
                    "description": "Disallow running DDL statements in the SQL editor.\n"
                },
                "disallowDml": {
                    "type": "boolean",
                    "description": "Disallow running DML statements in the SQL editor.\n"
                },
                "restriction": {
                    "type": "string",
                    "description": "RESTRICTION_UNSPECIFIED means no restriction; FALLBACK will allows to query admin data sources when there is no read-only data source; DISALLOW will always disallow to query admin data sources.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/PolicyDisableCopyDataPolicy:PolicyDisableCopyDataPolicy": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Restrict data copying\n"
                }
            },
            "type": "object",
            "required": [
                "enable"
            ]
        },
        "bytebase:index/PolicyGlobalMaskingPolicy:PolicyGlobalMaskingPolicy": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/PolicyGlobalMaskingPolicyRule:PolicyGlobalMaskingPolicyRule"
                    }
                }
            },
            "type": "object"
        },
        "bytebase:index/PolicyGlobalMaskingPolicyRule:PolicyGlobalMaskingPolicyRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The condition expression\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique rule id\n"
                },
                "semanticType": {
                    "type": "string",
                    "description": "The semantic type id\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title for the rule\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "id",
                "semanticType"
            ]
        },
        "bytebase:index/PolicyMaskingExceptionPolicy:PolicyMaskingExceptionPolicy": {
            "properties": {
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/PolicyMaskingExceptionPolicyException:PolicyMaskingExceptionPolicyException"
                    }
                }
            },
            "type": "object"
        },
        "bytebase:index/PolicyMaskingExceptionPolicyException:PolicyMaskingExceptionPolicyException": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "column": {
                    "type": "string"
                },
                "database": {
                    "type": "string",
                    "description": "The database full name in instances/{instance resource id}/databases/{database name} format\n"
                },
                "expireTimestamp": {
                    "type": "string",
                    "description": "The expiration timestamp in YYYY-MM-DDThh:mm:ss.000Z format\n"
                },
                "member": {
                    "type": "string",
                    "description": "The member in user:{email} or group:{email} format.\n"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the masking exemption\n"
                },
                "schema": {
                    "type": "string"
                },
                "table": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "database",
                "member"
            ]
        },
        "bytebase:index/PolicyRolloutPolicy:PolicyRolloutPolicy": {
            "properties": {
                "automatic": {
                    "type": "boolean",
                    "description": "If all check pass, the change will be rolled out and executed automatically.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If any roles are specified, Bytebase requires users with those roles to manually roll out the change.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/ProjectWebhook:ProjectWebhook": {
            "properties": {
                "directMessage": {
                    "type": "boolean",
                    "description": "If direct_message is set, the notification is sent directly to the persons and url will be ignored. Require IM integration for this function to work.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The webhook full name in projects/{resource id}/webhooks/{id} format.\n"
                },
                "notificationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "notification_types is the list of activities types that the webhook is interested in. Bytebase will only send notifications to the webhook if the activity type is in the list.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The webhook title\n"
                },
                "type": {
                    "type": "string",
                    "description": "The webhook type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/project_service.proto#L449 for support types.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL\n"
                }
            },
            "type": "object",
            "required": [
                "notificationTypes",
                "title",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "notificationTypes",
                        "title",
                        "type",
                        "url"
                    ]
                }
            }
        },
        "bytebase:index/SettingApprovalFlow:SettingApprovalFlow": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingApprovalFlowRule:SettingApprovalFlowRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "bytebase:index/SettingApprovalFlowRule:SettingApprovalFlowRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingApprovalFlowRuleCondition:SettingApprovalFlowRuleCondition"
                    },
                    "description": "Match any condition will trigger this approval flow.\n"
                },
                "flows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingApprovalFlowRuleFlow:SettingApprovalFlowRuleFlow"
                    }
                }
            },
            "type": "object",
            "required": [
                "flows"
            ]
        },
        "bytebase:index/SettingApprovalFlowRuleCondition:SettingApprovalFlowRuleCondition": {
            "properties": {
                "level": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "bytebase:index/SettingApprovalFlowRuleFlow:SettingApprovalFlowRuleFlow": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingApprovalFlowRuleFlowStep:SettingApprovalFlowRuleFlowStep"
                    },
                    "description": "Approval flow following the step order.\n"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "steps",
                "title"
            ]
        },
        "bytebase:index/SettingApprovalFlowRuleFlowStep:SettingApprovalFlowRuleFlowStep": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role require to review in this step\n"
                }
            },
            "type": "object",
            "required": [
                "role"
            ]
        },
        "bytebase:index/SettingClassification:SettingClassification": {
            "properties": {
                "classificationFromConfig": {
                    "type": "boolean",
                    "description": "If true, we will only store the classification in the config. Otherwise we will get the classification from table/column comment, and write back to the schema metadata.\n"
                },
                "classifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingClassificationClassification:SettingClassificationClassification"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The classification unique uuid.\n"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingClassificationLevel:SettingClassificationLevel"
                    }
                },
                "title": {
                    "type": "string",
                    "description": "The classification title. Optional.\n"
                }
            },
            "type": "object",
            "required": [
                "classifications",
                "id",
                "levels",
                "title"
            ]
        },
        "bytebase:index/SettingClassificationClassification:SettingClassificationClassification": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The classification description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The classification unique id, must in {number}-{number} format.\n"
                },
                "level": {
                    "type": "string",
                    "description": "The classification level id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The classification title.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "title"
            ]
        },
        "bytebase:index/SettingClassificationLevel:SettingClassificationLevel": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The classification level description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The classification level unique uuid.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The classification level title.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "title"
            ]
        },
        "bytebase:index/SettingEnvironmentSetting:SettingEnvironmentSetting": {
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingEnvironmentSettingEnvironment:SettingEnvironmentSettingEnvironment"
                    }
                }
            },
            "type": "object",
            "required": [
                "environments"
            ]
        },
        "bytebase:index/SettingEnvironmentSettingEnvironment:SettingEnvironmentSettingEnvironment": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The environment color.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The environment unique id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The environment readonly name in environments/{id} format.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "The environment is protected or not.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The environment display name.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "title"
                    ]
                }
            }
        },
        "bytebase:index/SettingPasswordRestriction:SettingPasswordRestriction": {
            "properties": {
                "minLength": {
                    "type": "integer",
                    "description": "min_length is the minimum length for password, should no less than 8.\n"
                },
                "passwordRotationInSeconds": {
                    "type": "integer",
                    "description": "password_rotation requires users to reset their password after the duration. The duration should be at least 86400 (one day).\n"
                },
                "requireLetter": {
                    "type": "boolean",
                    "description": "require_letter requires the password must contains at least one letter, regardless of upper case or lower case.\n"
                },
                "requireNumber": {
                    "type": "boolean",
                    "description": "require_number requires the password must contains at least one number.\n"
                },
                "requireResetPasswordForFirstLogin": {
                    "type": "boolean",
                    "description": "require*reset*password*for*first_login requires users to reset their password after the 1st login.\n"
                },
                "requireSpecialCharacter": {
                    "type": "boolean",
                    "description": "require*special*character requires the password must contains at least one special character.\n"
                },
                "requireUppercaseLetter": {
                    "type": "boolean",
                    "description": "require*uppercase*letter requires the password must contains at least one upper case letter.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/SettingSemanticType:SettingSemanticType": {
            "properties": {
                "algorithm": {
                    "$ref": "#/types/bytebase:index/SettingSemanticTypeAlgorithm:SettingSemanticTypeAlgorithm",
                    "description": "The semantic type algorithm. Required.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The semantic type description. Optional.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The semantic type unique uuid.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The semantic type title. Required.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "title"
            ]
        },
        "bytebase:index/SettingSemanticTypeAlgorithm:SettingSemanticTypeAlgorithm": {
            "properties": {
                "fullMask": {
                    "$ref": "#/types/bytebase:index/SettingSemanticTypeAlgorithmFullMask:SettingSemanticTypeAlgorithmFullMask"
                },
                "innerOuterMask": {
                    "$ref": "#/types/bytebase:index/SettingSemanticTypeAlgorithmInnerOuterMask:SettingSemanticTypeAlgorithmInnerOuterMask"
                },
                "md5Mask": {
                    "$ref": "#/types/bytebase:index/SettingSemanticTypeAlgorithmMd5Mask:SettingSemanticTypeAlgorithmMd5Mask"
                },
                "rangeMask": {
                    "$ref": "#/types/bytebase:index/SettingSemanticTypeAlgorithmRangeMask:SettingSemanticTypeAlgorithmRangeMask"
                }
            },
            "type": "object"
        },
        "bytebase:index/SettingSemanticTypeAlgorithmFullMask:SettingSemanticTypeAlgorithmFullMask": {
            "properties": {
                "substitution": {
                    "type": "string",
                    "description": "Substitution is the string used to replace the original value, the max length of the string is 16 bytes.\n"
                }
            },
            "type": "object",
            "required": [
                "substitution"
            ]
        },
        "bytebase:index/SettingSemanticTypeAlgorithmInnerOuterMask:SettingSemanticTypeAlgorithmInnerOuterMask": {
            "properties": {
                "prefixLen": {
                    "type": "integer",
                    "description": "The length of prefix.\n"
                },
                "substitution": {
                    "type": "string",
                    "description": "Substitution is the string used to replace the inner or outer substring.\n"
                },
                "suffixLen": {
                    "type": "integer",
                    "description": "The length of suffix.\n"
                },
                "type": {
                    "type": "string",
                    "description": "INNER or OUTER.\n"
                }
            },
            "type": "object",
            "required": [
                "prefixLen",
                "substitution",
                "suffixLen",
                "type"
            ]
        },
        "bytebase:index/SettingSemanticTypeAlgorithmMd5Mask:SettingSemanticTypeAlgorithmMd5Mask": {
            "properties": {
                "salt": {
                    "type": "string",
                    "description": "Salt is the salt value to generate a different hash that with the word alone.\n"
                }
            },
            "type": "object",
            "required": [
                "salt"
            ]
        },
        "bytebase:index/SettingSemanticTypeAlgorithmRangeMask:SettingSemanticTypeAlgorithmRangeMask": {
            "properties": {
                "slices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingSemanticTypeAlgorithmRangeMaskSlice:SettingSemanticTypeAlgorithmRangeMaskSlice"
                    }
                }
            },
            "type": "object"
        },
        "bytebase:index/SettingSemanticTypeAlgorithmRangeMaskSlice:SettingSemanticTypeAlgorithmRangeMaskSlice": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "End is the stop index of the original value, should be less than the length of the original value.\n"
                },
                "start": {
                    "type": "integer",
                    "description": "Start is the start index of the original value, start from 0 and should be less than stop.\n"
                },
                "substitution": {
                    "type": "string",
                    "description": "Substitution is the string used to replace the OriginalValue[start:end).\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start",
                "substitution"
            ]
        },
        "bytebase:index/SettingSqlQueryRestriction:SettingSqlQueryRestriction": {
            "properties": {
                "maximumResultRows": {
                    "type": "integer",
                    "description": "The return rows limit. If the value \u003c= 0, will be treated as no limit. The default value is -1.\n"
                },
                "maximumResultSize": {
                    "type": "integer",
                    "description": "The size limit in bytes. The default value is 100MB, we will use the default value if the setting not exists, or the limit \u003c= 0.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/SettingWorkspaceProfile:SettingWorkspaceProfile": {
            "properties": {
                "announcement": {
                    "$ref": "#/types/bytebase:index/SettingWorkspaceProfileAnnouncement:SettingWorkspaceProfileAnnouncement",
                    "description": "Custom announcement. Will show as a banner in the Bytebase UI. Require ENTERPRISE subscription.\n"
                },
                "databaseChangeMode": {
                    "type": "string",
                    "description": "The workspace database change mode, support EDITOR or PIPELINE. Default PIPELINE\n"
                },
                "disallowPasswordSignin": {
                    "type": "boolean",
                    "description": "Whether to disallow password signin (except workspace admins). Require ENTERPRISE subscription\n"
                },
                "disallowSignup": {
                    "type": "boolean",
                    "description": "Disallow self-service signup, users can only be invited by the owner. Require PRO subscription.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The workspace domain, e.g. bytebase.com. Required for the group\n"
                },
                "enforceIdentityDomain": {
                    "type": "boolean",
                    "description": "Only user and group from the domains can be created and login.\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "The URL user visits Bytebase. The external URL is used for: 1. Constructing the correct callback URL when configuring the VCS provider. The callback URL points to the frontend; 2. Creating the correct webhook endpoint when configuring the project GitOps workflow. The webhook endpoint points to the backend.\n"
                },
                "maximumRoleExpirationInSeconds": {
                    "type": "integer",
                    "description": "The max duration in seconds for role expired. If the value is less than or equal to 0, we will remove the setting. AKA no limit.\n"
                },
                "tokenDurationInSeconds": {
                    "type": "integer",
                    "description": "The duration for login token in seconds. The duration should be at least 3600 (one hour).\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/SettingWorkspaceProfileAnnouncement:SettingWorkspaceProfileAnnouncement": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "The alert level of announcement\n"
                },
                "link": {
                    "type": "string",
                    "description": "The optional link, user can follow the link to check extra details\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of announcement. Leave it as empty string can clear the announcement\n"
                }
            },
            "type": "object",
            "required": [
                "level",
                "text"
            ]
        },
        "bytebase:index/getDatabaseCatalog:getDatabaseCatalog": {
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getDatabaseCatalogSchema:getDatabaseCatalogSchema"
                    }
                }
            },
            "type": "object",
            "required": [
                "schemas"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getDatabaseCatalogSchema:getDatabaseCatalogSchema": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getDatabaseCatalogSchemaTable:getDatabaseCatalogSchemaTable"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "tables"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getDatabaseCatalogSchemaTable:getDatabaseCatalogSchemaTable": {
            "properties": {
                "classification": {
                    "type": "string",
                    "description": "The classification id\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getDatabaseCatalogSchemaTableColumn:getDatabaseCatalogSchemaTableColumn"
                    }
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "classification",
                "columns",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getDatabaseCatalogSchemaTableColumn:getDatabaseCatalogSchemaTableColumn": {
            "properties": {
                "classification": {
                    "type": "string",
                    "description": "The classification id\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The deployment and policy control labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The database full name in instances/{instance}/databases/{database} format\n"
                },
                "semanticType": {
                    "type": "string",
                    "description": "The semantic type id\n"
                }
            },
            "type": "object",
            "required": [
                "classification",
                "labels",
                "name",
                "semanticType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getGroupMember:getGroupMember": {
            "properties": {
                "member": {
                    "type": "string",
                    "description": "The member in users/{email} format.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The member's role in the group.\n"
                }
            },
            "type": "object",
            "required": [
                "member",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getInstanceDataSource:getInstanceDataSource": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database for the instance, you can set this if the engine type is POSTGRES.\n"
                },
                "externalSecrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getInstanceDataSourceExternalSecret:getInstanceDataSourceExternalSecret"
                    },
                    "description": "The external secret to get the database password. Learn more: https://www.bytebase.com/docs/get-started/instance/#use-external-secret-manager\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host or socket for your instance, or the account name if the instance type is Snowflake.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique data source id in this instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The connection user password used by Bytebase to perform DDL and DML operations.\n",
                    "secret": true
                },
                "port": {
                    "type": "string",
                    "description": "The port for your instance.\n"
                },
                "sslCa": {
                    "type": "string",
                    "description": "The CA certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.\n",
                    "secret": true
                },
                "sslCert": {
                    "type": "string",
                    "description": "The client certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.\n",
                    "secret": true
                },
                "sslKey": {
                    "type": "string",
                    "description": "The client key. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Should be ADMIN or READ_ONLY.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Enable SSL connection. Required to use SSL certificates.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The connection user name used by Bytebase to perform DDL and DML operations.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "externalSecrets",
                "host",
                "id",
                "password",
                "port",
                "sslCa",
                "sslCert",
                "sslKey",
                "type",
                "useSsl",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getInstanceDataSourceExternalSecret:getInstanceDataSourceExternalSecret": {
            "properties": {
                "awsSecretsManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getInstanceDataSourceExternalSecretAwsSecretsManager:getInstanceDataSourceExternalSecretAwsSecretsManager"
                    },
                    "description": "The AWS Secrets Manager to get the database password. Reference doc https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\n"
                },
                "gcpSecretManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getInstanceDataSourceExternalSecretGcpSecretManager:getInstanceDataSourceExternalSecretGcpSecretManager"
                    },
                    "description": "The GCP Secret Manager to get the database password. Reference doc https://cloud.google.com/secret-manager/docs\n"
                },
                "vaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getInstanceDataSourceExternalSecretVault:getInstanceDataSourceExternalSecretVault"
                    }
                }
            },
            "type": "object",
            "required": [
                "awsSecretsManagers",
                "gcpSecretManagers",
                "vaults"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getInstanceDataSourceExternalSecretAwsSecretsManager:getInstanceDataSourceExternalSecretAwsSecretsManager": {
            "properties": {
                "passwordKeyName": {
                    "type": "string",
                    "description": "The key name for the password.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret name to store the password.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordKeyName",
                "secretName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getInstanceDataSourceExternalSecretGcpSecretManager:getInstanceDataSourceExternalSecretGcpSecretManager": {
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "The secret name should be like \"projects/{project-id}/secrets/{secret-id}\".\n"
                }
            },
            "type": "object",
            "required": [
                "secretName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getInstanceDataSourceExternalSecretVault:getInstanceDataSourceExternalSecretVault": {
            "properties": {
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getInstanceDataSourceExternalSecretVaultAppRole:getInstanceDataSourceExternalSecretVaultAppRole"
                    },
                    "description": "The Vault app role to get the password.\n"
                },
                "engineName": {
                    "type": "string",
                    "description": "The name for secret engine.\n"
                },
                "passwordKeyName": {
                    "type": "string",
                    "description": "The key name for the password.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "The secret name in the engine to store the password.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The Vault URL.\n"
                }
            },
            "type": "object",
            "required": [
                "appRoles",
                "engineName",
                "passwordKeyName",
                "secretName",
                "token",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getInstanceDataSourceExternalSecretVaultAppRole:getInstanceDataSourceExternalSecretVaultAppRole": {
            "properties": {
                "roleId": {
                    "type": "string",
                    "description": "The app role id.\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "The secret id for the role without ttl.\n",
                    "secret": true
                },
                "secretType": {
                    "type": "string",
                    "description": "The secret id type, can be PLAIN (plain text for the secret) or ENVIRONMENT (envirionment name for the secret).\n"
                }
            },
            "type": "object",
            "required": [
                "roleId",
                "secret",
                "secretType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getPolicyDataSourceQueryPolicy:getPolicyDataSourceQueryPolicy": {
            "properties": {
                "disallowDdl": {
                    "type": "boolean",
                    "description": "Disallow running DDL statements in the SQL editor.\n"
                },
                "disallowDml": {
                    "type": "boolean",
                    "description": "Disallow running DML statements in the SQL editor.\n"
                },
                "restriction": {
                    "type": "string",
                    "description": "RESTRICTION_UNSPECIFIED means no restriction; FALLBACK will allows to query admin data sources when there is no read-only data source; DISALLOW will always disallow to query admin data sources.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/getPolicyDisableCopyDataPolicy:getPolicyDisableCopyDataPolicy": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Restrict data copying\n"
                }
            },
            "type": "object",
            "required": [
                "enable"
            ]
        },
        "bytebase:index/getPolicyGlobalMaskingPolicy:getPolicyGlobalMaskingPolicy": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getPolicyGlobalMaskingPolicyRule:getPolicyGlobalMaskingPolicyRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getPolicyGlobalMaskingPolicyRule:getPolicyGlobalMaskingPolicyRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The condition expression\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique rule id\n"
                },
                "semanticType": {
                    "type": "string",
                    "description": "The semantic type id\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title for the rule\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "id",
                "semanticType"
            ]
        },
        "bytebase:index/getPolicyMaskingExceptionPolicy:getPolicyMaskingExceptionPolicy": {
            "properties": {
                "exceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getPolicyMaskingExceptionPolicyException:getPolicyMaskingExceptionPolicyException"
                    }
                }
            },
            "type": "object",
            "required": [
                "exceptions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getPolicyMaskingExceptionPolicyException:getPolicyMaskingExceptionPolicyException": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "column": {
                    "type": "string"
                },
                "database": {
                    "type": "string",
                    "description": "The database full name in instances/{instance resource id}/databases/{database name} format\n"
                },
                "expireTimestamp": {
                    "type": "string",
                    "description": "The expiration timestamp in YYYY-MM-DDThh:mm:ss.000Z format\n"
                },
                "member": {
                    "type": "string",
                    "description": "The member in user:{email} or group:{email} format.\n"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the masking exemption\n"
                },
                "schema": {
                    "type": "string"
                },
                "table": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "column",
                "database",
                "expireTimestamp",
                "member",
                "schema",
                "table"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "action",
                        "database",
                        "member"
                    ]
                }
            }
        },
        "bytebase:index/getPolicyRolloutPolicy:getPolicyRolloutPolicy": {
            "properties": {
                "automatic": {
                    "type": "boolean",
                    "description": "If all check pass, the change will be rolled out and executed automatically.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If any roles are specified, Bytebase requires users with those roles to manually roll out the change.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/getProjectWebhook:getProjectWebhook": {
            "properties": {
                "directMessage": {
                    "type": "boolean",
                    "description": "If direct_message is set, the notification is sent directly to the persons and url will be ignored. Require IM integration for this function to work.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The webhook full name in projects/{resource id}/webhooks/{id} format.\n"
                },
                "notificationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "notification_types is the list of activities types that the webhook is interested in. Bytebase will only send notifications to the webhook if the activity type is in the list.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The webhook title\n"
                },
                "type": {
                    "type": "string",
                    "description": "The webhook type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/project_service.proto#L449 for support types.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "notificationTypes",
                "title",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingApprovalFlow:getSettingApprovalFlow": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingApprovalFlowRule:getSettingApprovalFlowRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingApprovalFlowRule:getSettingApprovalFlowRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingApprovalFlowRuleCondition:getSettingApprovalFlowRuleCondition"
                    },
                    "description": "Match any condition will trigger this approval flow.\n"
                },
                "flows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingApprovalFlowRuleFlow:getSettingApprovalFlowRuleFlow"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "flows"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingApprovalFlowRuleCondition:getSettingApprovalFlowRuleCondition": {
            "properties": {
                "level": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "level",
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingApprovalFlowRuleFlow:getSettingApprovalFlowRuleFlow": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingApprovalFlowRuleFlowStep:getSettingApprovalFlowRuleFlowStep"
                    },
                    "description": "Approval flow following the step order.\n"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "steps",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingApprovalFlowRuleFlowStep:getSettingApprovalFlowRuleFlowStep": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role require to review in this step\n"
                }
            },
            "type": "object",
            "required": [
                "role"
            ]
        },
        "bytebase:index/getSettingClassification:getSettingClassification": {
            "properties": {
                "classificationFromConfig": {
                    "type": "boolean",
                    "description": "If true, we will only store the classification in the config. Otherwise we will get the classification from table/column comment, and write back to the schema metadata.\n"
                },
                "classifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingClassificationClassification:getSettingClassificationClassification"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The classification unique uuid.\n"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingClassificationLevel:getSettingClassificationLevel"
                    }
                },
                "title": {
                    "type": "string",
                    "description": "The classification title. Optional.\n"
                }
            },
            "type": "object",
            "required": [
                "classificationFromConfig",
                "classifications",
                "id",
                "levels",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "classifications",
                        "id",
                        "levels",
                        "title"
                    ]
                }
            }
        },
        "bytebase:index/getSettingClassificationClassification:getSettingClassificationClassification": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The classification description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The classification unique id, must in {number}-{number} format.\n"
                },
                "level": {
                    "type": "string",
                    "description": "The classification level id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The classification title.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "level",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id",
                        "title"
                    ]
                }
            }
        },
        "bytebase:index/getSettingClassificationLevel:getSettingClassificationLevel": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The classification level description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The classification level unique uuid.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The classification level title.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id",
                        "title"
                    ]
                }
            }
        },
        "bytebase:index/getSettingEnvironmentSetting:getSettingEnvironmentSetting": {
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingEnvironmentSettingEnvironment:getSettingEnvironmentSettingEnvironment"
                    }
                }
            },
            "type": "object",
            "required": [
                "environments"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingEnvironmentSettingEnvironment:getSettingEnvironmentSettingEnvironment": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The environment color.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The environment unique id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The environment readonly name in environments/{id} format.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "The environment is protected or not.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The environment display name.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id",
                        "title"
                    ]
                }
            }
        },
        "bytebase:index/getSettingPasswordRestriction:getSettingPasswordRestriction": {
            "properties": {
                "minLength": {
                    "type": "integer",
                    "description": "min_length is the minimum length for password, should no less than 8.\n"
                },
                "passwordRotationInSeconds": {
                    "type": "integer",
                    "description": "password_rotation requires users to reset their password after the duration. The duration should be at least 86400 (one day).\n"
                },
                "requireLetter": {
                    "type": "boolean",
                    "description": "require_letter requires the password must contains at least one letter, regardless of upper case or lower case.\n"
                },
                "requireNumber": {
                    "type": "boolean",
                    "description": "require_number requires the password must contains at least one number.\n"
                },
                "requireResetPasswordForFirstLogin": {
                    "type": "boolean",
                    "description": "require*reset*password*for*first_login requires users to reset their password after the 1st login.\n"
                },
                "requireSpecialCharacter": {
                    "type": "boolean",
                    "description": "require*special*character requires the password must contains at least one special character.\n"
                },
                "requireUppercaseLetter": {
                    "type": "boolean",
                    "description": "require*uppercase*letter requires the password must contains at least one upper case letter.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/getSettingSemanticType:getSettingSemanticType": {
            "properties": {
                "algorithm": {
                    "$ref": "#/types/bytebase:index/getSettingSemanticTypeAlgorithm:getSettingSemanticTypeAlgorithm",
                    "description": "The semantic type algorithm. Required.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The semantic type description. Optional.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The semantic type unique uuid.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The semantic type title. Required.\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "description",
                "id",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id",
                        "title"
                    ]
                }
            }
        },
        "bytebase:index/getSettingSemanticTypeAlgorithm:getSettingSemanticTypeAlgorithm": {
            "properties": {
                "fullMask": {
                    "$ref": "#/types/bytebase:index/getSettingSemanticTypeAlgorithmFullMask:getSettingSemanticTypeAlgorithmFullMask"
                },
                "innerOuterMask": {
                    "$ref": "#/types/bytebase:index/getSettingSemanticTypeAlgorithmInnerOuterMask:getSettingSemanticTypeAlgorithmInnerOuterMask"
                },
                "md5Mask": {
                    "$ref": "#/types/bytebase:index/getSettingSemanticTypeAlgorithmMd5Mask:getSettingSemanticTypeAlgorithmMd5Mask"
                },
                "rangeMask": {
                    "$ref": "#/types/bytebase:index/getSettingSemanticTypeAlgorithmRangeMask:getSettingSemanticTypeAlgorithmRangeMask"
                }
            },
            "type": "object",
            "required": [
                "fullMask",
                "innerOuterMask",
                "md5Mask",
                "rangeMask"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingSemanticTypeAlgorithmFullMask:getSettingSemanticTypeAlgorithmFullMask": {
            "properties": {
                "substitution": {
                    "type": "string",
                    "description": "Substitution is the string used to replace the original value, the max length of the string is 16 bytes.\n"
                }
            },
            "type": "object",
            "required": [
                "substitution"
            ]
        },
        "bytebase:index/getSettingSemanticTypeAlgorithmInnerOuterMask:getSettingSemanticTypeAlgorithmInnerOuterMask": {
            "properties": {
                "prefixLen": {
                    "type": "integer",
                    "description": "The length of prefix.\n"
                },
                "substitution": {
                    "type": "string",
                    "description": "Substitution is the string used to replace the inner or outer substring.\n"
                },
                "suffixLen": {
                    "type": "integer",
                    "description": "The length of suffix.\n"
                },
                "type": {
                    "type": "string",
                    "description": "INNER or OUTER.\n"
                }
            },
            "type": "object",
            "required": [
                "prefixLen",
                "substitution",
                "suffixLen",
                "type"
            ]
        },
        "bytebase:index/getSettingSemanticTypeAlgorithmMd5Mask:getSettingSemanticTypeAlgorithmMd5Mask": {
            "properties": {
                "salt": {
                    "type": "string",
                    "description": "Salt is the salt value to generate a different hash that with the word alone.\n"
                }
            },
            "type": "object",
            "required": [
                "salt"
            ]
        },
        "bytebase:index/getSettingSemanticTypeAlgorithmRangeMask:getSettingSemanticTypeAlgorithmRangeMask": {
            "properties": {
                "slices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/getSettingSemanticTypeAlgorithmRangeMaskSlice:getSettingSemanticTypeAlgorithmRangeMaskSlice"
                    }
                }
            },
            "type": "object",
            "required": [
                "slices"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bytebase:index/getSettingSemanticTypeAlgorithmRangeMaskSlice:getSettingSemanticTypeAlgorithmRangeMaskSlice": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "End is the stop index of the original value, should be less than the length of the original value.\n"
                },
                "start": {
                    "type": "integer",
                    "description": "Start is the start index of the original value, start from 0 and should be less than stop.\n"
                },
                "substitution": {
                    "type": "string",
                    "description": "Substitution is the string used to replace the OriginalValue[start:end).\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start",
                "substitution"
            ]
        },
        "bytebase:index/getSettingSqlQueryRestriction:getSettingSqlQueryRestriction": {
            "properties": {
                "maximumResultRows": {
                    "type": "integer",
                    "description": "The return rows limit. If the value \u003c= 0, will be treated as no limit. The default value is -1.\n"
                },
                "maximumResultSize": {
                    "type": "integer",
                    "description": "The size limit in bytes. The default value is 100MB, we will use the default value if the setting not exists, or the limit \u003c= 0.\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/getSettingWorkspaceProfile:getSettingWorkspaceProfile": {
            "properties": {
                "announcement": {
                    "$ref": "#/types/bytebase:index/getSettingWorkspaceProfileAnnouncement:getSettingWorkspaceProfileAnnouncement",
                    "description": "Custom announcement. Will show as a banner in the Bytebase UI. Require ENTERPRISE subscription.\n"
                },
                "databaseChangeMode": {
                    "type": "string",
                    "description": "The workspace database change mode, support EDITOR or PIPELINE. Default PIPELINE\n"
                },
                "disallowPasswordSignin": {
                    "type": "boolean",
                    "description": "Whether to disallow password signin (except workspace admins). Require ENTERPRISE subscription\n"
                },
                "disallowSignup": {
                    "type": "boolean",
                    "description": "Disallow self-service signup, users can only be invited by the owner. Require PRO subscription.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The workspace domain, e.g. bytebase.com. Required for the group\n"
                },
                "enforceIdentityDomain": {
                    "type": "boolean",
                    "description": "Only user and group from the domains can be created and login.\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "The URL user visits Bytebase. The external URL is used for: 1. Constructing the correct callback URL when configuring the VCS provider. The callback URL points to the frontend; 2. Creating the correct webhook endpoint when configuring the project GitOps workflow. The webhook endpoint points to the backend.\n"
                },
                "maximumRoleExpirationInSeconds": {
                    "type": "integer",
                    "description": "The max duration in seconds for role expired. If the value is less than or equal to 0, we will remove the setting. AKA no limit.\n"
                },
                "tokenDurationInSeconds": {
                    "type": "integer",
                    "description": "The duration for login token in seconds. The duration should be at least 3600 (one hour).\n"
                }
            },
            "type": "object"
        },
        "bytebase:index/getSettingWorkspaceProfileAnnouncement:getSettingWorkspaceProfileAnnouncement": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "The alert level of announcement\n"
                },
                "link": {
                    "type": "string",
                    "description": "The optional link, user can follow the link to check extra details\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of announcement. Leave it as empty string can clear the announcement\n"
                }
            },
            "type": "object",
            "required": [
                "level",
                "text"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the bytebase package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "serviceAccount": {
                "type": "string",
                "description": "The Bytebase service account email. If not provided in the configuration, you must set the `BYTEBASE_SERVICE_ACCOUNT`\nvariable in the environment.\n"
            },
            "serviceKey": {
                "type": "string",
                "description": "The Bytebase service account key. If not provided in the configuration, you must set the `BYTEBASE_SERVICE_KEY` variable\nin the environment.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The external URL for your Bytebase server. If not provided in the configuration, you must set the `BYTEBASE_URL`\nvariable in the environment.\n"
            }
        },
        "inputProperties": {
            "serviceAccount": {
                "type": "string",
                "description": "The Bytebase service account email. If not provided in the configuration, you must set the `BYTEBASE_SERVICE_ACCOUNT`\nvariable in the environment.\n"
            },
            "serviceKey": {
                "type": "string",
                "description": "The Bytebase service account key. If not provided in the configuration, you must set the `BYTEBASE_SERVICE_KEY` variable\nin the environment.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The external URL for your Bytebase server. If not provided in the configuration, you must set the `BYTEBASE_URL`\nvariable in the environment.\n"
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:bytebase/terraformConfig"
        }
    },
    "resources": {
        "bytebase:Database/group:Group": {
            "description": "The database group resource.\n",
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The database group condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/database*group*service.proto#L185 for details.\n"
                },
                "matchedDatabases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The matched databases in the group.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project fullname in projects/{id} format.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The database group unique resource id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The database group title.\n"
                }
            },
            "required": [
                "condition",
                "matchedDatabases",
                "project",
                "resourceId",
                "title"
            ],
            "inputProperties": {
                "condition": {
                    "type": "string",
                    "description": "The database group condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/database*group*service.proto#L185 for details.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project fullname in projects/{id} format.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The database group unique resource id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The database group title.\n"
                }
            },
            "requiredInputs": [
                "condition",
                "project",
                "resourceId",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "condition": {
                        "type": "string",
                        "description": "The database group condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/database*group*service.proto#L185 for details.\n"
                    },
                    "matchedDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The matched databases in the group.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project fullname in projects/{id} format.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The database group unique resource id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The database group title.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:Iam/policy:Policy": {
            "description": "The IAM policy resource.\n",
            "properties": {
                "iamPolicy": {
                    "$ref": "#/types/bytebase:Iam/PolicyIamPolicy:PolicyIamPolicy"
                },
                "parent": {
                    "type": "string",
                    "description": "The IAM policy parent name for the policy, support \"projects/{resource id}\" or \"workspaces/-\"\n"
                }
            },
            "required": [
                "parent"
            ],
            "inputProperties": {
                "iamPolicy": {
                    "$ref": "#/types/bytebase:Iam/PolicyIamPolicy:PolicyIamPolicy"
                },
                "parent": {
                    "type": "string",
                    "description": "The IAM policy parent name for the policy, support \"projects/{resource id}\" or \"workspaces/-\"\n"
                }
            },
            "requiredInputs": [
                "parent"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "iamPolicy": {
                        "$ref": "#/types/bytebase:Iam/PolicyIamPolicy:PolicyIamPolicy"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The IAM policy parent name for the policy, support \"projects/{resource id}\" or \"workspaces/-\"\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:Review/config:Config": {
            "description": "The review config resource.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the SQL review config\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The unique resource id for the review config.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Review/ConfigRule:ConfigRule"
                    },
                    "description": "The SQL review rules.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title for the review config.\n"
                }
            },
            "required": [
                "enabled",
                "resourceId",
                "rules",
                "title"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the SQL review config\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The unique resource id for the review config.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:Review/ConfigRule:ConfigRule"
                    },
                    "description": "The SQL review rules.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title for the review config.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "resourceId",
                "rules",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Config resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the SQL review config\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The unique resource id for the review config.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Review/ConfigRule:ConfigRule"
                        },
                        "description": "The SQL review rules.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title for the review config.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/database:Database": {
            "description": "The database resource.\n",
            "properties": {
                "catalog": {
                    "$ref": "#/types/bytebase:index/DatabaseCatalog:DatabaseCatalog",
                    "description": "The databases catalog.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The database environment, will follow the instance environment by default\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The deployment and policy control labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The database full name in instances/{instance}/databases/{database} format\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project full name for the database in projects/{project} format.\n"
                },
                "schemaVersion": {
                    "type": "string",
                    "description": "The version of database schema.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The existence of a database.\n"
                },
                "successfulSyncTime": {
                    "type": "string",
                    "description": "The latest synchronization time.\n"
                }
            },
            "required": [
                "catalog",
                "environment",
                "labels",
                "name",
                "project",
                "schemaVersion",
                "state",
                "successfulSyncTime"
            ],
            "inputProperties": {
                "catalog": {
                    "$ref": "#/types/bytebase:index/DatabaseCatalog:DatabaseCatalog",
                    "description": "The databases catalog.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The database environment, will follow the instance environment by default\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The deployment and policy control labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The database full name in instances/{instance}/databases/{database} format\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project full name for the database in projects/{project} format.\n"
                }
            },
            "requiredInputs": [
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "catalog": {
                        "$ref": "#/types/bytebase:index/DatabaseCatalog:DatabaseCatalog",
                        "description": "The databases catalog.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The database environment, will follow the instance environment by default\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The deployment and policy control labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The database full name in instances/{instance}/databases/{database} format\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name for the database in projects/{project} format.\n"
                    },
                    "schemaVersion": {
                        "type": "string",
                        "description": "The version of database schema.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The existence of a database.\n"
                    },
                    "successfulSyncTime": {
                        "type": "string",
                        "description": "The latest synchronization time.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/environment:Environment": {
            "description": "The environment resource.\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The environment color.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The environment readonly name in environments/{id} format.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The environment sorting order.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "The environment is protected or not.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The environment unique id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The environment display name.\n"
                }
            },
            "required": [
                "name",
                "resourceId",
                "title"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The environment color.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The environment sorting order.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "The environment is protected or not.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The environment unique id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The environment display name.\n"
                }
            },
            "requiredInputs": [
                "resourceId",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The environment color.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The environment readonly name in environments/{id} format.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The environment sorting order.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "The environment is protected or not.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The environment unique id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The environment display name.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/group:Group": {
            "description": "The group resource. Workspace domain is required for creating groups.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The group description.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The group email.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/GroupMember:GroupMember"
                    },
                    "description": "The members in the group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The group name in groups/{email} format.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The group title.\n"
                }
            },
            "required": [
                "description",
                "email",
                "members",
                "name",
                "source",
                "title"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The group description.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The group email.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/GroupMember:GroupMember"
                    },
                    "description": "The members in the group.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The group title.\n"
                }
            },
            "requiredInputs": [
                "email",
                "members",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The group description.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The group email.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/GroupMember:GroupMember"
                        },
                        "description": "The members in the group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The group name in groups/{email} format.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The group title.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/instance:Instance": {
            "description": "The instance resource.\n",
            "properties": {
                "activation": {
                    "type": "boolean",
                    "description": "Whether assign license for this instance or not.\n"
                },
                "dataSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/InstanceDataSource:InstanceDataSource"
                    },
                    "description": "The connection for the instance. You can configure read-only or admin connection account here.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The databases full name in the resource.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The environment full name for the instance in environments/{environment id} format.\n"
                },
                "externalLink": {
                    "type": "string",
                    "description": "The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)\n"
                },
                "listAllDatabases": {
                    "type": "boolean",
                    "description": "List all databases in this instance. If false, will only list 500 databases.\n"
                },
                "maximumConnections": {
                    "type": "integer",
                    "description": "The maximum number of connections.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The instance full name in instances/{resource id} format.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The instance unique resource id.\n"
                },
                "syncInterval": {
                    "type": "integer",
                    "description": "How often the instance is synced in seconds. Default 0, means never sync.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The instance title.\n"
                }
            },
            "required": [
                "activation",
                "dataSources",
                "databases",
                "engine",
                "engineVersion",
                "environment",
                "externalLink",
                "maximumConnections",
                "name",
                "resourceId",
                "syncInterval",
                "title"
            ],
            "inputProperties": {
                "activation": {
                    "type": "boolean",
                    "description": "Whether assign license for this instance or not.\n"
                },
                "dataSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/InstanceDataSource:InstanceDataSource"
                    },
                    "description": "The connection for the instance. You can configure read-only or admin connection account here.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The environment full name for the instance in environments/{environment id} format.\n"
                },
                "externalLink": {
                    "type": "string",
                    "description": "The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)\n"
                },
                "listAllDatabases": {
                    "type": "boolean",
                    "description": "List all databases in this instance. If false, will only list 500 databases.\n"
                },
                "maximumConnections": {
                    "type": "integer",
                    "description": "The maximum number of connections.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The instance unique resource id.\n"
                },
                "syncInterval": {
                    "type": "integer",
                    "description": "How often the instance is synced in seconds. Default 0, means never sync.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The instance title.\n"
                }
            },
            "requiredInputs": [
                "dataSources",
                "engine",
                "environment",
                "resourceId",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "activation": {
                        "type": "boolean",
                        "description": "Whether assign license for this instance or not.\n"
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/InstanceDataSource:InstanceDataSource"
                        },
                        "description": "The connection for the instance. You can configure read-only or admin connection account here.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The databases full name in the resource.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The engine version.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment full name for the instance in environments/{environment id} format.\n"
                    },
                    "externalLink": {
                        "type": "string",
                        "description": "The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)\n"
                    },
                    "listAllDatabases": {
                        "type": "boolean",
                        "description": "List all databases in this instance. If false, will only list 500 databases.\n"
                    },
                    "maximumConnections": {
                        "type": "integer",
                        "description": "The maximum number of connections.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The instance full name in instances/{resource id} format.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The instance unique resource id.\n"
                    },
                    "syncInterval": {
                        "type": "integer",
                        "description": "How often the instance is synced in seconds. Default 0, means never sync.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The instance title.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/policy:Policy": {
            "description": "The policy resource.\n",
            "properties": {
                "dataSourceQueryPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyDataSourceQueryPolicy:PolicyDataSourceQueryPolicy",
                    "description": "Restrict querying admin data sources\n"
                },
                "disableCopyDataPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyDisableCopyDataPolicy:PolicyDisableCopyDataPolicy",
                    "description": "Restrict data copying in SQL Editor (Admins/DBAs allowed)\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Decide if the policy is enforced.\n"
                },
                "globalMaskingPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyGlobalMaskingPolicy:PolicyGlobalMaskingPolicy"
                },
                "inheritFromParent": {
                    "type": "boolean",
                    "description": "Decide if the policy should inherit from the parent.\n"
                },
                "maskingExceptionPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyMaskingExceptionPolicy:PolicyMaskingExceptionPolicy"
                },
                "name": {
                    "type": "string",
                    "description": "The policy full name\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                },
                "rolloutPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyRolloutPolicy:PolicyRolloutPolicy",
                    "description": "Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy\n"
                },
                "type": {
                    "type": "string",
                    "description": "The policy type.\n"
                }
            },
            "required": [
                "name",
                "parent",
                "type"
            ],
            "inputProperties": {
                "dataSourceQueryPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyDataSourceQueryPolicy:PolicyDataSourceQueryPolicy",
                    "description": "Restrict querying admin data sources\n"
                },
                "disableCopyDataPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyDisableCopyDataPolicy:PolicyDisableCopyDataPolicy",
                    "description": "Restrict data copying in SQL Editor (Admins/DBAs allowed)\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Decide if the policy is enforced.\n"
                },
                "globalMaskingPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyGlobalMaskingPolicy:PolicyGlobalMaskingPolicy"
                },
                "inheritFromParent": {
                    "type": "boolean",
                    "description": "Decide if the policy should inherit from the parent.\n"
                },
                "maskingExceptionPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyMaskingExceptionPolicy:PolicyMaskingExceptionPolicy"
                },
                "parent": {
                    "type": "string",
                    "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                },
                "rolloutPolicy": {
                    "$ref": "#/types/bytebase:index/PolicyRolloutPolicy:PolicyRolloutPolicy",
                    "description": "Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy\n"
                },
                "type": {
                    "type": "string",
                    "description": "The policy type.\n"
                }
            },
            "requiredInputs": [
                "parent",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "dataSourceQueryPolicy": {
                        "$ref": "#/types/bytebase:index/PolicyDataSourceQueryPolicy:PolicyDataSourceQueryPolicy",
                        "description": "Restrict querying admin data sources\n"
                    },
                    "disableCopyDataPolicy": {
                        "$ref": "#/types/bytebase:index/PolicyDisableCopyDataPolicy:PolicyDisableCopyDataPolicy",
                        "description": "Restrict data copying in SQL Editor (Admins/DBAs allowed)\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Decide if the policy is enforced.\n"
                    },
                    "globalMaskingPolicy": {
                        "$ref": "#/types/bytebase:index/PolicyGlobalMaskingPolicy:PolicyGlobalMaskingPolicy"
                    },
                    "inheritFromParent": {
                        "type": "boolean",
                        "description": "Decide if the policy should inherit from the parent.\n"
                    },
                    "maskingExceptionPolicy": {
                        "$ref": "#/types/bytebase:index/PolicyMaskingExceptionPolicy:PolicyMaskingExceptionPolicy"
                    },
                    "name": {
                        "type": "string",
                        "description": "The policy full name\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                    },
                    "rolloutPolicy": {
                        "$ref": "#/types/bytebase:index/PolicyRolloutPolicy:PolicyRolloutPolicy",
                        "description": "Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The policy type.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/project:Project": {
            "description": "The project resource.\n",
            "properties": {
                "allowModifyStatement": {
                    "type": "boolean",
                    "description": "Allow modifying statement after issue is created.\n"
                },
                "allowSelfApproval": {
                    "type": "boolean",
                    "description": "Whether to allow the issue creator to self-approve the issue.\n"
                },
                "autoEnableBackup": {
                    "type": "boolean",
                    "description": "Whether to automatically enable backup.\n"
                },
                "autoResolveIssue": {
                    "type": "boolean",
                    "description": "Enable auto resolve issue.\n"
                },
                "ciSamplingSize": {
                    "type": "integer",
                    "description": "The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The databases full name in the resource.\n"
                },
                "enforceIssueTitle": {
                    "type": "boolean",
                    "description": "Enforce issue title created by user instead of generated by Bytebase.\n"
                },
                "executionRetryPolicy": {
                    "type": "integer",
                    "description": "The maximum number of retries for the lock timeout issue.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The project full name in projects/{resource id} format.\n"
                },
                "parallelTasksPerRollout": {
                    "type": "integer",
                    "description": "The maximum number of parallel tasks to run during the rollout.\n"
                },
                "postgresDatabaseTenantMode": {
                    "type": "boolean",
                    "description": "Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended \"set role \\n\\n\" statement.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The project unique resource id. Cannot change this after created.\n"
                },
                "skipBackupErrors": {
                    "type": "boolean",
                    "description": "Whether to skip backup errors and continue the data migration.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The project title.\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/ProjectWebhook:ProjectWebhook"
                    },
                    "description": "The webhooks in the project.\n"
                }
            },
            "required": [
                "allowModifyStatement",
                "allowSelfApproval",
                "autoEnableBackup",
                "autoResolveIssue",
                "ciSamplingSize",
                "enforceIssueTitle",
                "executionRetryPolicy",
                "name",
                "parallelTasksPerRollout",
                "postgresDatabaseTenantMode",
                "resourceId",
                "skipBackupErrors",
                "title"
            ],
            "inputProperties": {
                "allowModifyStatement": {
                    "type": "boolean",
                    "description": "Allow modifying statement after issue is created.\n"
                },
                "allowSelfApproval": {
                    "type": "boolean",
                    "description": "Whether to allow the issue creator to self-approve the issue.\n"
                },
                "autoEnableBackup": {
                    "type": "boolean",
                    "description": "Whether to automatically enable backup.\n"
                },
                "autoResolveIssue": {
                    "type": "boolean",
                    "description": "Enable auto resolve issue.\n"
                },
                "ciSamplingSize": {
                    "type": "integer",
                    "description": "The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The databases full name in the resource.\n"
                },
                "enforceIssueTitle": {
                    "type": "boolean",
                    "description": "Enforce issue title created by user instead of generated by Bytebase.\n"
                },
                "executionRetryPolicy": {
                    "type": "integer",
                    "description": "The maximum number of retries for the lock timeout issue.\n"
                },
                "parallelTasksPerRollout": {
                    "type": "integer",
                    "description": "The maximum number of parallel tasks to run during the rollout.\n"
                },
                "postgresDatabaseTenantMode": {
                    "type": "boolean",
                    "description": "Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended \"set role \\n\\n\" statement.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The project unique resource id. Cannot change this after created.\n"
                },
                "skipBackupErrors": {
                    "type": "boolean",
                    "description": "Whether to skip backup errors and continue the data migration.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The project title.\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/ProjectWebhook:ProjectWebhook"
                    },
                    "description": "The webhooks in the project.\n"
                }
            },
            "requiredInputs": [
                "resourceId",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "allowModifyStatement": {
                        "type": "boolean",
                        "description": "Allow modifying statement after issue is created.\n"
                    },
                    "allowSelfApproval": {
                        "type": "boolean",
                        "description": "Whether to allow the issue creator to self-approve the issue.\n"
                    },
                    "autoEnableBackup": {
                        "type": "boolean",
                        "description": "Whether to automatically enable backup.\n"
                    },
                    "autoResolveIssue": {
                        "type": "boolean",
                        "description": "Enable auto resolve issue.\n"
                    },
                    "ciSamplingSize": {
                        "type": "integer",
                        "description": "The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The databases full name in the resource.\n"
                    },
                    "enforceIssueTitle": {
                        "type": "boolean",
                        "description": "Enforce issue title created by user instead of generated by Bytebase.\n"
                    },
                    "executionRetryPolicy": {
                        "type": "integer",
                        "description": "The maximum number of retries for the lock timeout issue.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project full name in projects/{resource id} format.\n"
                    },
                    "parallelTasksPerRollout": {
                        "type": "integer",
                        "description": "The maximum number of parallel tasks to run during the rollout.\n"
                    },
                    "postgresDatabaseTenantMode": {
                        "type": "boolean",
                        "description": "Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended \"set role \\n\\n\" statement.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The project unique resource id. Cannot change this after created.\n"
                    },
                    "skipBackupErrors": {
                        "type": "boolean",
                        "description": "Whether to skip backup errors and continue the data migration.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The project title.\n"
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/ProjectWebhook:ProjectWebhook"
                        },
                        "description": "The webhooks in the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/risk:Risk": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "If the risk is active.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The risk level, should be 300, 200 or 100. Higher number means higher level.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The risk full name in risks/{uid} format.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details\n"
                },
                "title": {
                    "type": "string",
                    "description": "The risk title.\n"
                }
            },
            "required": [
                "condition",
                "level",
                "name",
                "source",
                "title"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "If the risk is active.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The risk level, should be 300, 200 or 100. Higher number means higher level.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details\n"
                },
                "title": {
                    "type": "string",
                    "description": "The risk title.\n"
                }
            },
            "requiredInputs": [
                "condition",
                "level",
                "source",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Risk resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "If the risk is active.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.\n"
                    },
                    "level": {
                        "type": "integer",
                        "description": "The risk level, should be 300, 200 or 100. Higher number means higher level.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The risk full name in risks/{uid} format.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The risk title.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/role:Role": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The role description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The role full name in roles/{resource id} format.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role permissions. Permissions should start with \"bb.\" prefix. Check https://github.com/bytebase/bytebase/blob/main/backend/component/iam/permission.yaml for all permissions.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The role unique resource id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The role title.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The role type.\n"
                }
            },
            "required": [
                "description",
                "name",
                "permissions",
                "resourceId",
                "title",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The role description.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role permissions. Permissions should start with \"bb.\" prefix. Check https://github.com/bytebase/bytebase/blob/main/backend/component/iam/permission.yaml for all permissions.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The role unique resource id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The role title.\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "resourceId",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The role description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The role full name in roles/{resource id} format.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role permissions. Permissions should start with \"bb.\" prefix. Check https://github.com/bytebase/bytebase/blob/main/backend/component/iam/permission.yaml for all permissions.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The role unique resource id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The role title.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The role type.\n"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/setting:Setting": {
            "description": "The setting resource.\n",
            "properties": {
                "approvalFlows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingApprovalFlow:SettingApprovalFlow"
                    },
                    "description": "Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.\n"
                },
                "classification": {
                    "$ref": "#/types/bytebase:index/SettingClassification:SettingClassification",
                    "description": "Classification for data masking. Require ENTERPRISE subscription.\n"
                },
                "environmentSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingEnvironmentSetting:SettingEnvironmentSetting"
                    },
                    "description": "The environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The setting name in settings/{name} format. The name support \"WORKSPACE*APPROVAL\", \"WORKSPACE*PROFILE\", \"DATA*CLASSIFICATION\", \"SEMANTIC*TYPES\", \"ENVIRONMENT\", \"PASSWORD*RESTRICTION\", \"SQL*RESULT*SIZE*LIMIT\". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details\n"
                },
                "passwordRestriction": {
                    "$ref": "#/types/bytebase:index/SettingPasswordRestriction:SettingPasswordRestriction",
                    "description": "Restrict for login password\n"
                },
                "semanticTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingSemanticType:SettingSemanticType"
                    },
                    "description": "Semantic types for data masking. Require ENTERPRISE subscription.\n"
                },
                "sqlQueryRestriction": {
                    "$ref": "#/types/bytebase:index/SettingSqlQueryRestriction:SettingSqlQueryRestriction",
                    "description": "Restrict for SQL query result\n"
                },
                "workspaceProfile": {
                    "$ref": "#/types/bytebase:index/SettingWorkspaceProfile:SettingWorkspaceProfile"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "approvalFlows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingApprovalFlow:SettingApprovalFlow"
                    },
                    "description": "Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.\n"
                },
                "classification": {
                    "$ref": "#/types/bytebase:index/SettingClassification:SettingClassification",
                    "description": "Classification for data masking. Require ENTERPRISE subscription.\n"
                },
                "environmentSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingEnvironmentSetting:SettingEnvironmentSetting"
                    },
                    "description": "The environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The setting name in settings/{name} format. The name support \"WORKSPACE*APPROVAL\", \"WORKSPACE*PROFILE\", \"DATA*CLASSIFICATION\", \"SEMANTIC*TYPES\", \"ENVIRONMENT\", \"PASSWORD*RESTRICTION\", \"SQL*RESULT*SIZE*LIMIT\". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details\n"
                },
                "passwordRestriction": {
                    "$ref": "#/types/bytebase:index/SettingPasswordRestriction:SettingPasswordRestriction",
                    "description": "Restrict for login password\n"
                },
                "semanticTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bytebase:index/SettingSemanticType:SettingSemanticType"
                    },
                    "description": "Semantic types for data masking. Require ENTERPRISE subscription.\n"
                },
                "sqlQueryRestriction": {
                    "$ref": "#/types/bytebase:index/SettingSqlQueryRestriction:SettingSqlQueryRestriction",
                    "description": "Restrict for SQL query result\n"
                },
                "workspaceProfile": {
                    "$ref": "#/types/bytebase:index/SettingWorkspaceProfile:SettingWorkspaceProfile"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "approvalFlows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/SettingApprovalFlow:SettingApprovalFlow"
                        },
                        "description": "Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.\n"
                    },
                    "classification": {
                        "$ref": "#/types/bytebase:index/SettingClassification:SettingClassification",
                        "description": "Classification for data masking. Require ENTERPRISE subscription.\n"
                    },
                    "environmentSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/SettingEnvironmentSetting:SettingEnvironmentSetting"
                        },
                        "description": "The environment\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The setting name in settings/{name} format. The name support \"WORKSPACE*APPROVAL\", \"WORKSPACE*PROFILE\", \"DATA*CLASSIFICATION\", \"SEMANTIC*TYPES\", \"ENVIRONMENT\", \"PASSWORD*RESTRICTION\", \"SQL*RESULT*SIZE*LIMIT\". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details\n"
                    },
                    "passwordRestriction": {
                        "$ref": "#/types/bytebase:index/SettingPasswordRestriction:SettingPasswordRestriction",
                        "description": "Restrict for login password\n"
                    },
                    "semanticTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/SettingSemanticType:SettingSemanticType"
                        },
                        "description": "Semantic types for data masking. Require ENTERPRISE subscription.\n"
                    },
                    "sqlQueryRestriction": {
                        "$ref": "#/types/bytebase:index/SettingSqlQueryRestriction:SettingSqlQueryRestriction",
                        "description": "Restrict for SQL query result\n"
                    },
                    "workspaceProfile": {
                        "$ref": "#/types/bytebase:index/SettingWorkspaceProfile:SettingWorkspaceProfile"
                    }
                },
                "type": "object"
            }
        },
        "bytebase:index/user:User": {
            "description": "The user resource.\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The user email.\n"
                },
                "lastChangePasswordTime": {
                    "type": "string",
                    "description": "The user last change password time.\n"
                },
                "lastLoginTime": {
                    "type": "string",
                    "description": "The user last login time.\n"
                },
                "mfaEnabled": {
                    "type": "boolean",
                    "description": "The mfa_enabled flag means if the user has enabled MFA.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user name in users/{user id or email} format.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user login password.\n",
                    "secret": true
                },
                "phone": {
                    "type": "string",
                    "description": "The user phone.\n"
                },
                "serviceKey": {
                    "type": "string",
                    "description": "The service key for service account.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The user is deleted or not.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The user title.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.\n"
                }
            },
            "required": [
                "email",
                "lastChangePasswordTime",
                "lastLoginTime",
                "mfaEnabled",
                "name",
                "phone",
                "serviceKey",
                "source",
                "state",
                "title"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The user email.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user login password.\n",
                    "secret": true
                },
                "phone": {
                    "type": "string",
                    "description": "The user phone.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The user title.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.\n"
                }
            },
            "requiredInputs": [
                "email",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The user email.\n"
                    },
                    "lastChangePasswordTime": {
                        "type": "string",
                        "description": "The user last change password time.\n"
                    },
                    "lastLoginTime": {
                        "type": "string",
                        "description": "The user last login time.\n"
                    },
                    "mfaEnabled": {
                        "type": "boolean",
                        "description": "The mfa_enabled flag means if the user has enabled MFA.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user name in users/{user id or email} format.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user login password.\n",
                        "secret": true
                    },
                    "phone": {
                        "type": "string",
                        "description": "The user phone.\n"
                    },
                    "serviceKey": {
                        "type": "string",
                        "description": "The service key for service account.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The user is deleted or not.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The user title.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "bytebase:Database/getGroup:getGroup": {
            "description": "The database group data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": "The project fullname in projects/{id} format.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The database group unique resource id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "resourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "condition": {
                        "type": "string",
                        "description": "The database group condition.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "matchedDatabases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The matched databases in the group.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project fullname in projects/{id} format.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The database group unique resource id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The database group title.\n"
                    }
                },
                "type": "object",
                "required": [
                    "condition",
                    "matchedDatabases",
                    "project",
                    "resourceId",
                    "title",
                    "id"
                ]
            }
        },
        "bytebase:Database/getList:getList": {
            "description": "The database data source list.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getList.\n",
                "properties": {
                    "engines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Filter databases by engines.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment full name. Filter databases by environment.\n"
                    },
                    "excludeUnassigned": {
                        "type": "boolean",
                        "description": "If not include unassigned databases in the response.\n"
                    },
                    "instance": {
                        "type": "string",
                        "description": "The instance full name. Filter databases by instance.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Filter databases by labels\n"
                    },
                    "parent": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name. Filter databases by project.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Filter databases by name with wildcard\n"
                    }
                },
                "type": "object",
                "required": [
                    "parent"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Database/getListDatabase:getListDatabase"
                        }
                    },
                    "engines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Filter databases by engines.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment full name. Filter databases by environment.\n"
                    },
                    "excludeUnassigned": {
                        "type": "boolean",
                        "description": "If not include unassigned databases in the response.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instance": {
                        "type": "string",
                        "description": "The instance full name. Filter databases by instance.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Filter databases by labels\n"
                    },
                    "parent": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name. Filter databases by project.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Filter databases by name with wildcard\n"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "parent",
                    "id"
                ]
            }
        },
        "bytebase:DatabaseGroup/getList:getList": {
            "description": "The database group data source list.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getList.\n",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": "The project fullname in projects/{id} format.\n"
                    }
                },
                "type": "object",
                "required": [
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "databaseGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:DatabaseGroup/getListDatabaseGroup:getListDatabaseGroup"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project fullname in projects/{id} format.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseGroups",
                    "project",
                    "id"
                ]
            }
        },
        "bytebase:Group/getList:getList": {
            "description": "The group data source list.\n",
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Group/getListGroup:getListGroup"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "bytebase:Iam/getPolicy:getPolicy": {
            "description": "The IAM policy data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicy.\n",
                "properties": {
                    "iamPolicy": {
                        "$ref": "#/types/bytebase:Iam/getPolicyIamPolicy:getPolicyIamPolicy"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The IAM policy parent name for the policy, support \"projects/{resource id}\" or \"workspaces/-\"\n"
                    }
                },
                "type": "object",
                "required": [
                    "parent"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicy.\n",
                "properties": {
                    "iamPolicy": {
                        "$ref": "#/types/bytebase:Iam/getPolicyIamPolicy:getPolicyIamPolicy"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The IAM policy parent name for the policy, support \"projects/{resource id}\" or \"workspaces/-\"\n"
                    }
                },
                "type": "object",
                "required": [
                    "iamPolicy",
                    "parent",
                    "id"
                ]
            }
        },
        "bytebase:Instance/getList:getList": {
            "description": "The instance data source list.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getList.\n",
                "properties": {
                    "engines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Filter instances by engines.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment full name. Filter instances by environment.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Filter instances by host.\n"
                    },
                    "port": {
                        "type": "string",
                        "description": "Filter instances by port.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name. Filter instances by project.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Filter instances by name or resource id with wildcard\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter instances by state. Default ACTIVE.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "engines": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Filter instances by engines.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment full name. Filter instances by environment.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Filter instances by host.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Instance/getListInstance:getListInstance"
                        }
                    },
                    "port": {
                        "type": "string",
                        "description": "Filter instances by port.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name. Filter instances by project.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Filter instances by name or resource id with wildcard\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter instances by state. Default ACTIVE.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "id"
                ]
            }
        },
        "bytebase:Policy/getList:getList": {
            "description": "The policy data source list.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getList.\n",
                "properties": {
                    "parent": {
                        "type": "string",
                        "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Policy/getListPolicy:getListPolicy"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "policies",
                    "id"
                ]
            }
        },
        "bytebase:Project/getList:getList": {
            "description": "The project data source list.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getList.\n",
                "properties": {
                    "excludeDefault": {
                        "type": "boolean",
                        "description": "If not include the default project in the response.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Filter projects by name or resource id with wildcard.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter projects by state. Default ACTIVE.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "excludeDefault": {
                        "type": "boolean",
                        "description": "If not include the default project in the response.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Project/getListProject:getListProject"
                        }
                    },
                    "query": {
                        "type": "string",
                        "description": "Filter projects by name or resource id with wildcard.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter projects by state. Default ACTIVE.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "bytebase:Review/getConfig:getConfig": {
            "description": "The review config data source.\n",
            "outputs": {
                "description": "A collection of values returned by getConfig.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the SQL review config\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The unique resource id for the review config.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Review/getConfigRule:getConfigRule"
                        },
                        "description": "The SQL review rules.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title for the review config.\n"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "resourceId",
                    "resources",
                    "rules",
                    "title",
                    "id"
                ]
            }
        },
        "bytebase:ReviewConfig/getList:getList": {
            "description": "The review config data source list.\n",
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "reviewConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:ReviewConfig/getListReviewConfig:getListReviewConfig"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "reviewConfigs",
                    "id"
                ]
            }
        },
        "bytebase:Risk/getList:getList": {
            "description": "The risk data source list.\n",
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "risks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Risk/getListRisk:getListRisk"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "risks",
                    "id"
                ]
            }
        },
        "bytebase:Role/getList:getList": {
            "description": "The role data source list.\n",
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:Role/getListRole:getListRole"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "roles",
                    "id"
                ]
            }
        },
        "bytebase:User/getList:getList": {
            "description": "The user data source list.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getList.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Filter users by email with wildcard\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Filter users by name with wildcard\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name. Filter users by project.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter users by state. Default ACTIVE.\n"
                    },
                    "userTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Filter users by types.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getList.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Filter users by email with wildcard\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Filter users by name with wildcard\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name. Filter users by project.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter users by state. Default ACTIVE.\n"
                    },
                    "userTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Filter users by types.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:User/getListUser:getListUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        },
        "bytebase:index/getDatabase:getDatabase": {
            "description": "The database data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The database full name in instances/{instance}/databases/{database} format\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "catalogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getDatabaseCatalog:getDatabaseCatalog"
                        },
                        "description": "The databases catalog.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The database environment, will follow the instance environment by default\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The deployment and policy control labels.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The database full name in instances/{instance}/databases/{database} format\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project full name for the database in projects/{project} format.\n"
                    },
                    "schemaVersion": {
                        "type": "string",
                        "description": "The version of database schema.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The existence of a database.\n"
                    },
                    "successfulSyncTime": {
                        "type": "string",
                        "description": "The latest synchronization time.\n"
                    }
                },
                "type": "object",
                "required": [
                    "catalogs",
                    "environment",
                    "labels",
                    "name",
                    "project",
                    "schemaVersion",
                    "state",
                    "successfulSyncTime",
                    "id"
                ]
            }
        },
        "bytebase:index/getEnvironment:getEnvironment": {
            "description": "The environment data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The environment color.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "The environment is protected or not.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The environment unique resource id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "resourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The environment color.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The environment full name in environments/{resource id} format.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The environment sorting order.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "The environment is protected or not.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The environment unique resource id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The environment unique name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "order",
                    "resourceId",
                    "title",
                    "id"
                ]
            }
        },
        "bytebase:index/getGroup:getGroup": {
            "description": "The group data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The group name in groups/{email} format.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The group description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getGroupMember:getGroupMember"
                        },
                        "description": "The members in the group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The group name in groups/{email} format.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The group title.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "members",
                    "name",
                    "source",
                    "title",
                    "id"
                ]
            }
        },
        "bytebase:index/getInstance:getInstance": {
            "description": "The instance data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "listAllDatabases": {
                        "type": "boolean",
                        "description": "List all databases in this instance. If false, will only list 500 databases.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The instance unique resource id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "resourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "activation": {
                        "type": "boolean",
                        "description": "Whether assign license for this instance or not.\n"
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getInstanceDataSource:getInstanceDataSource"
                        }
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The databases full name in the resource.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The engine version.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment name for your instance in \"environments/{resource id}\" format.\n"
                    },
                    "externalLink": {
                        "type": "string",
                        "description": "The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "listAllDatabases": {
                        "type": "boolean",
                        "description": "List all databases in this instance. If false, will only list 500 databases.\n"
                    },
                    "maximumConnections": {
                        "type": "integer",
                        "description": "The maximum number of connections. The default value is 10.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The instance full name in instances/{resource id} format.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The instance unique resource id.\n"
                    },
                    "syncInterval": {
                        "type": "integer",
                        "description": "How often the instance is synced in seconds. Default 0, means never sync.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The instance title.\n"
                    }
                },
                "type": "object",
                "required": [
                    "activation",
                    "dataSources",
                    "databases",
                    "engine",
                    "engineVersion",
                    "environment",
                    "externalLink",
                    "maximumConnections",
                    "name",
                    "resourceId",
                    "syncInterval",
                    "title",
                    "id"
                ]
            }
        },
        "bytebase:index/getPolicy:getPolicy": {
            "description": "The policy data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicy.\n",
                "properties": {
                    "dataSourceQueryPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyDataSourceQueryPolicy:getPolicyDataSourceQueryPolicy",
                        "description": "Restrict querying admin data sources\n"
                    },
                    "disableCopyDataPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyDisableCopyDataPolicy:getPolicyDisableCopyDataPolicy",
                        "description": "Restrict data copying in SQL Editor (Admins/DBAs allowed)\n"
                    },
                    "globalMaskingPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyGlobalMaskingPolicy:getPolicyGlobalMaskingPolicy"
                    },
                    "maskingExceptionPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyMaskingExceptionPolicy:getPolicyMaskingExceptionPolicy"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                    },
                    "rolloutPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyRolloutPolicy:getPolicyRolloutPolicy",
                        "description": "Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The policy type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "parent",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicy.\n",
                "properties": {
                    "dataSourceQueryPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyDataSourceQueryPolicy:getPolicyDataSourceQueryPolicy",
                        "description": "Restrict querying admin data sources\n"
                    },
                    "disableCopyDataPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyDisableCopyDataPolicy:getPolicyDisableCopyDataPolicy",
                        "description": "Restrict data copying in SQL Editor (Admins/DBAs allowed)\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Decide if the policy is enforced.\n"
                    },
                    "globalMaskingPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyGlobalMaskingPolicy:getPolicyGlobalMaskingPolicy"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inheritFromParent": {
                        "type": "boolean",
                        "description": "Decide if the policy should inherit from the parent.\n"
                    },
                    "maskingExceptionPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyMaskingExceptionPolicy:getPolicyMaskingExceptionPolicy"
                    },
                    "name": {
                        "type": "string",
                        "description": "The policy full name\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}\n"
                    },
                    "rolloutPolicy": {
                        "$ref": "#/types/bytebase:index/getPolicyRolloutPolicy:getPolicyRolloutPolicy",
                        "description": "Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The policy type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataSourceQueryPolicy",
                    "disableCopyDataPolicy",
                    "enforce",
                    "globalMaskingPolicy",
                    "inheritFromParent",
                    "maskingExceptionPolicy",
                    "name",
                    "parent",
                    "rolloutPolicy",
                    "type",
                    "id"
                ]
            }
        },
        "bytebase:index/getProject:getProject": {
            "description": "The project data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "The project unique resource id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "resourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "allowModifyStatement": {
                        "type": "boolean",
                        "description": "Allow modifying statement after issue is created.\n"
                    },
                    "allowSelfApproval": {
                        "type": "boolean",
                        "description": "Whether to allow the issue creator to self-approve the issue.\n"
                    },
                    "autoEnableBackup": {
                        "type": "boolean",
                        "description": "Whether to automatically enable backup.\n"
                    },
                    "autoResolveIssue": {
                        "type": "boolean",
                        "description": "Enable auto resolve issue.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The databases full name in the resource.\n"
                    },
                    "enforceIssueTitle": {
                        "type": "boolean",
                        "description": "Enforce issue title created by user instead of generated by Bytebase.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project full name in projects/{resource id} format.\n"
                    },
                    "postgresDatabaseTenantMode": {
                        "type": "boolean",
                        "description": "Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended \"set role \\n\\n\" statement.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The project unique resource id.\n"
                    },
                    "skipBackupErrors": {
                        "type": "boolean",
                        "description": "Whether to skip backup errors and continue the data migration.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The project title.\n"
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getProjectWebhook:getProjectWebhook"
                        },
                        "description": "The webhooks in the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowModifyStatement",
                    "allowSelfApproval",
                    "autoEnableBackup",
                    "autoResolveIssue",
                    "databases",
                    "enforceIssueTitle",
                    "name",
                    "postgresDatabaseTenantMode",
                    "resourceId",
                    "skipBackupErrors",
                    "title",
                    "webhooks",
                    "id"
                ]
            }
        },
        "bytebase:index/getRisk:getRisk": {
            "description": "The risk data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRisk.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The risk full name in risks/{uid} format.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRisk.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The risk active.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The risk condition.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "level": {
                        "type": "integer",
                        "description": "The risk level.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The risk full name in risks/{uid} format.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "The risk source.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The risk title.\n"
                    }
                },
                "type": "object",
                "required": [
                    "active",
                    "condition",
                    "level",
                    "name",
                    "source",
                    "title",
                    "id"
                ]
            }
        },
        "bytebase:index/getRole:getRole": {
            "description": "The role data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "The role unique resource id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "resourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The role description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The role full name in roles/{resource id} format.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role permissions.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The role unique resource id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The role title.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The role type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "permissions",
                    "resourceId",
                    "title",
                    "type",
                    "id"
                ]
            }
        },
        "bytebase:index/getSetting:getSetting": {
            "description": "The setting data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSetting.\n",
                "properties": {
                    "approvalFlows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getSettingApprovalFlow:getSettingApprovalFlow"
                        },
                        "description": "Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.\n"
                    },
                    "classification": {
                        "$ref": "#/types/bytebase:index/getSettingClassification:getSettingClassification",
                        "description": "Classification for data masking. Require ENTERPRISE subscription.\n"
                    },
                    "environmentSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getSettingEnvironmentSetting:getSettingEnvironmentSetting"
                        },
                        "description": "The environment\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The setting name in settings/{name} format. The name support \"WORKSPACE*APPROVAL\", \"WORKSPACE*PROFILE\", \"DATA*CLASSIFICATION\", \"SEMANTIC*TYPES\", \"ENVIRONMENT\", \"PASSWORD*RESTRICTION\", \"SQL*RESULT*SIZE*LIMIT\". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details\n"
                    },
                    "passwordRestriction": {
                        "$ref": "#/types/bytebase:index/getSettingPasswordRestriction:getSettingPasswordRestriction",
                        "description": "Restrict for login password\n"
                    },
                    "semanticTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getSettingSemanticType:getSettingSemanticType"
                        },
                        "description": "Semantic types for data masking. Require ENTERPRISE subscription.\n"
                    },
                    "sqlQueryRestriction": {
                        "$ref": "#/types/bytebase:index/getSettingSqlQueryRestriction:getSettingSqlQueryRestriction",
                        "description": "Restrict for SQL query result\n"
                    },
                    "workspaceProfile": {
                        "$ref": "#/types/bytebase:index/getSettingWorkspaceProfile:getSettingWorkspaceProfile"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSetting.\n",
                "properties": {
                    "approvalFlows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getSettingApprovalFlow:getSettingApprovalFlow"
                        },
                        "description": "Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.\n"
                    },
                    "classification": {
                        "$ref": "#/types/bytebase:index/getSettingClassification:getSettingClassification",
                        "description": "Classification for data masking. Require ENTERPRISE subscription.\n"
                    },
                    "environmentSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getSettingEnvironmentSetting:getSettingEnvironmentSetting"
                        },
                        "description": "The environment\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The setting name in settings/{name} format. The name support \"WORKSPACE*APPROVAL\", \"WORKSPACE*PROFILE\", \"DATA*CLASSIFICATION\", \"SEMANTIC*TYPES\", \"ENVIRONMENT\", \"PASSWORD*RESTRICTION\", \"SQL*RESULT*SIZE*LIMIT\". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details\n"
                    },
                    "passwordRestriction": {
                        "$ref": "#/types/bytebase:index/getSettingPasswordRestriction:getSettingPasswordRestriction",
                        "description": "Restrict for login password\n"
                    },
                    "semanticTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bytebase:index/getSettingSemanticType:getSettingSemanticType"
                        },
                        "description": "Semantic types for data masking. Require ENTERPRISE subscription.\n"
                    },
                    "sqlQueryRestriction": {
                        "$ref": "#/types/bytebase:index/getSettingSqlQueryRestriction:getSettingSqlQueryRestriction",
                        "description": "Restrict for SQL query result\n"
                    },
                    "workspaceProfile": {
                        "$ref": "#/types/bytebase:index/getSettingWorkspaceProfile:getSettingWorkspaceProfile"
                    }
                },
                "type": "object",
                "required": [
                    "approvalFlows",
                    "classification",
                    "environmentSettings",
                    "name",
                    "passwordRestriction",
                    "semanticTypes",
                    "sqlQueryRestriction",
                    "workspaceProfile",
                    "id"
                ]
            }
        },
        "bytebase:index/getUser:getUser": {
            "description": "The user data source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The user name in users/{user id or email} format.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The user email.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastChangePasswordTime": {
                        "type": "string",
                        "description": "The user last change password time.\n"
                    },
                    "lastLoginTime": {
                        "type": "string",
                        "description": "The user last login time.\n"
                    },
                    "mfaEnabled": {
                        "type": "boolean",
                        "description": "The mfa_enabled flag means if the user has enabled MFA.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user name in users/{user id or email} format.\n"
                    },
                    "phone": {
                        "type": "string",
                        "description": "The user phone.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The user is deleted or not.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The user title.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The user type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "lastChangePasswordTime",
                    "lastLoginTime",
                    "mfaEnabled",
                    "name",
                    "phone",
                    "source",
                    "state",
                    "title",
                    "type",
                    "id"
                ]
            }
        },
        "pulumi:providers:bytebase/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/resources/pulumi:providers:bytebase"
                    }
                },
                "type": "pulumi:providers:bytebase/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        }
    }
}