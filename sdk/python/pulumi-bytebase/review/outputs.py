# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConfigRule',
    'GetConfigRuleResult',
]

@pulumi.output_type
class ConfigRule(dict):
    def __init__(__self__, *,
                 engine: _builtins.str,
                 level: _builtins.str,
                 type: _builtins.str,
                 comment: Optional[_builtins.str] = None,
                 payload: Optional[_builtins.str] = None):
        """
        :param _builtins.str engine: The rule for the database engine.
        :param _builtins.str level: The rule level.
        :param _builtins.str type: The rule unique type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#rule-categories for all rules
        :param _builtins.str comment: The comment for the rule.
        :param _builtins.str payload: The payload is a JSON string that varies by rule type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#payload-structure-types for all details
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        The rule for the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The rule level.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The rule unique type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#rule-categories for all rules
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[_builtins.str]:
        """
        The comment for the rule.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter
    def payload(self) -> Optional[_builtins.str]:
        """
        The payload is a JSON string that varies by rule type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#payload-structure-types for all details
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class GetConfigRuleResult(dict):
    def __init__(__self__, *,
                 comment: _builtins.str,
                 engine: _builtins.str,
                 level: _builtins.str,
                 payload: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str comment: The comment for the rule.
        :param _builtins.str engine: The rule for the database engine.
        :param _builtins.str level: The rule level.
        :param _builtins.str payload: The payload for the rule.
        :param _builtins.str type: The rule unique type. Check https://www.bytebase.com/docs/sql-review/review-rules for all rules
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "payload", payload)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> _builtins.str:
        """
        The comment for the rule.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        The rule for the database engine.
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        The rule level.
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def payload(self) -> _builtins.str:
        """
        The payload for the rule.
        """
        return pulumi.get(self, "payload")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The rule unique type. Check https://www.bytebase.com/docs/sql-review/review-rules for all rules
        """
        return pulumi.get(self, "type")


