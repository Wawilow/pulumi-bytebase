// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The database resource.
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The databases catalog.
     */
    public readonly catalog!: pulumi.Output<outputs.DatabaseCatalog>;
    /**
     * The database environment, will follow the instance environment by default
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The deployment and policy control labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The database full name in instances/{instance}/databases/{database} format
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project full name for the database in projects/{project} format.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The version of database schema.
     */
    public /*out*/ readonly schemaVersion!: pulumi.Output<string>;
    /**
     * The existence of a database.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The latest synchronization time.
     */
    public /*out*/ readonly successfulSyncTime!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schemaVersion"] = state ? state.schemaVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["successfulSyncTime"] = state ? state.successfulSyncTime : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schemaVersion"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["successfulSyncTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * The databases catalog.
     */
    catalog?: pulumi.Input<inputs.DatabaseCatalog>;
    /**
     * The database environment, will follow the instance environment by default
     */
    environment?: pulumi.Input<string>;
    /**
     * The deployment and policy control labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The database full name in instances/{instance}/databases/{database} format
     */
    name?: pulumi.Input<string>;
    /**
     * The project full name for the database in projects/{project} format.
     */
    project?: pulumi.Input<string>;
    /**
     * The version of database schema.
     */
    schemaVersion?: pulumi.Input<string>;
    /**
     * The existence of a database.
     */
    state?: pulumi.Input<string>;
    /**
     * The latest synchronization time.
     */
    successfulSyncTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The databases catalog.
     */
    catalog?: pulumi.Input<inputs.DatabaseCatalog>;
    /**
     * The database environment, will follow the instance environment by default
     */
    environment?: pulumi.Input<string>;
    /**
     * The deployment and policy control labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The database full name in instances/{instance}/databases/{database} format
     */
    name?: pulumi.Input<string>;
    /**
     * The project full name for the database in projects/{project} format.
     */
    project: pulumi.Input<string>;
}
