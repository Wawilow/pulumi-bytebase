// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The instance resource.
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * Whether assign license for this instance or not.
     */
    public readonly activation!: pulumi.Output<boolean>;
    /**
     * The connection for the instance. You can configure read-only or admin connection account here.
     */
    public readonly dataSources!: pulumi.Output<outputs.InstanceDataSource[]>;
    /**
     * The databases full name in the resource.
     */
    public /*out*/ readonly databases!: pulumi.Output<string[]>;
    /**
     * The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * The engine version.
     */
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    /**
     * The environment full name for the instance in environments/{environment id} format.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
     */
    public readonly externalLink!: pulumi.Output<string>;
    /**
     * List all databases in this instance. If false, will only list 500 databases.
     */
    public readonly listAllDatabases!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of connections.
     */
    public readonly maximumConnections!: pulumi.Output<number>;
    /**
     * The instance full name in instances/{resource id} format.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The instance unique resource id.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * How often the instance is synced in seconds. Default 0, means never sync.
     */
    public readonly syncInterval!: pulumi.Output<number>;
    /**
     * The instance title.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["activation"] = state ? state.activation : undefined;
            resourceInputs["dataSources"] = state ? state.dataSources : undefined;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["externalLink"] = state ? state.externalLink : undefined;
            resourceInputs["listAllDatabases"] = state ? state.listAllDatabases : undefined;
            resourceInputs["maximumConnections"] = state ? state.maximumConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["syncInterval"] = state ? state.syncInterval : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.dataSources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSources'");
            }
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["activation"] = args ? args.activation : undefined;
            resourceInputs["dataSources"] = args ? args.dataSources : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["externalLink"] = args ? args.externalLink : undefined;
            resourceInputs["listAllDatabases"] = args ? args.listAllDatabases : undefined;
            resourceInputs["maximumConnections"] = args ? args.maximumConnections : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["syncInterval"] = args ? args.syncInterval : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["databases"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * Whether assign license for this instance or not.
     */
    activation?: pulumi.Input<boolean>;
    /**
     * The connection for the instance. You can configure read-only or admin connection account here.
     */
    dataSources?: pulumi.Input<pulumi.Input<inputs.InstanceDataSource>[]>;
    /**
     * The databases full name in the resource.
     */
    databases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
     */
    engine?: pulumi.Input<string>;
    /**
     * The engine version.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The environment full name for the instance in environments/{environment id} format.
     */
    environment?: pulumi.Input<string>;
    /**
     * The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
     */
    externalLink?: pulumi.Input<string>;
    /**
     * List all databases in this instance. If false, will only list 500 databases.
     */
    listAllDatabases?: pulumi.Input<boolean>;
    /**
     * The maximum number of connections.
     */
    maximumConnections?: pulumi.Input<number>;
    /**
     * The instance full name in instances/{resource id} format.
     */
    name?: pulumi.Input<string>;
    /**
     * The instance unique resource id.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * How often the instance is synced in seconds. Default 0, means never sync.
     */
    syncInterval?: pulumi.Input<number>;
    /**
     * The instance title.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Whether assign license for this instance or not.
     */
    activation?: pulumi.Input<boolean>;
    /**
     * The connection for the instance. You can configure read-only or admin connection account here.
     */
    dataSources: pulumi.Input<pulumi.Input<inputs.InstanceDataSource>[]>;
    /**
     * The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
     */
    engine: pulumi.Input<string>;
    /**
     * The environment full name for the instance in environments/{environment id} format.
     */
    environment: pulumi.Input<string>;
    /**
     * The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
     */
    externalLink?: pulumi.Input<string>;
    /**
     * List all databases in this instance. If false, will only list 500 databases.
     */
    listAllDatabases?: pulumi.Input<boolean>;
    /**
     * The maximum number of connections.
     */
    maximumConnections?: pulumi.Input<number>;
    /**
     * The instance unique resource id.
     */
    resourceId: pulumi.Input<string>;
    /**
     * How often the instance is synced in seconds. Default 0, means never sync.
     */
    syncInterval?: pulumi.Input<number>;
    /**
     * The instance title.
     */
    title: pulumi.Input<string>;
}
