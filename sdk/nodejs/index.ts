// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRiskArgs, GetRiskResult, GetRiskOutputArgs } from "./getRisk";
export const getRisk: typeof import("./getRisk").getRisk = null as any;
export const getRiskOutput: typeof import("./getRisk").getRiskOutput = null as any;
utilities.lazyLoad(exports, ["getRisk","getRiskOutput"], () => require("./getRisk"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSettingArgs, GetSettingResult, GetSettingOutputArgs } from "./getSetting";
export const getSetting: typeof import("./getSetting").getSetting = null as any;
export const getSettingOutput: typeof import("./getSetting").getSettingOutput = null as any;
utilities.lazyLoad(exports, ["getSetting","getSettingOutput"], () => require("./getSetting"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export * from "./provider";
import { Provider } from "./provider";

export { RiskArgs, RiskState } from "./risk";
export type Risk = import("./risk").Risk;
export const Risk: typeof import("./risk").Risk = null as any;
utilities.lazyLoad(exports, ["Risk"], () => require("./risk"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as database from "./database";
import * as databasegroup from "./databasegroup";
import * as group from "./group";
import * as iam from "./iam";
import * as instance from "./instance";
import * as policy from "./policy";
import * as project from "./project";
import * as review from "./review";
import * as reviewconfig from "./reviewconfig";
import * as risk from "./risk";
import * as role from "./role";
import * as types from "./types";
import * as user from "./user";

export {
    config,
    database,
    databasegroup,
    group,
    iam,
    instance,
    policy,
    project,
    review,
    reviewconfig,
    risk,
    role,
    types,
    user,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bytebase:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "bytebase:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "bytebase:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "bytebase:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "bytebase:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "bytebase:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "bytebase:index/risk:Risk":
                return new Risk(name, <any>undefined, { urn })
            case "bytebase:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "bytebase:index/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "bytebase:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bytebase", "index/database", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/environment", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/group", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/instance", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/policy", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/project", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/risk", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/role", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/setting", _module)
pulumi.runtime.registerResourceModule("bytebase", "index/user", _module)
pulumi.runtime.registerResourcePackage("bytebase", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bytebase") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
