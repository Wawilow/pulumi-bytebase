// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The setting resource.
 */
export class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingState, opts?: pulumi.CustomResourceOptions): Setting {
        return new Setting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:index/setting:Setting';

    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }

    /**
     * Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
     */
    public readonly approvalFlows!: pulumi.Output<outputs.SettingApprovalFlow[] | undefined>;
    /**
     * Classification for data masking. Require ENTERPRISE subscription.
     */
    public readonly classification!: pulumi.Output<outputs.SettingClassification | undefined>;
    /**
     * The environment
     */
    public readonly environmentSettings!: pulumi.Output<outputs.SettingEnvironmentSetting[] | undefined>;
    /**
     * The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Restrict for login password
     */
    public readonly passwordRestriction!: pulumi.Output<outputs.SettingPasswordRestriction | undefined>;
    /**
     * Semantic types for data masking. Require ENTERPRISE subscription.
     */
    public readonly semanticTypes!: pulumi.Output<outputs.SettingSemanticType[] | undefined>;
    /**
     * Restrict for SQL query result
     */
    public readonly sqlQueryRestriction!: pulumi.Output<outputs.SettingSqlQueryRestriction | undefined>;
    public readonly workspaceProfile!: pulumi.Output<outputs.SettingWorkspaceProfile | undefined>;

    /**
     * Create a Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingArgs | SettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingState | undefined;
            resourceInputs["approvalFlows"] = state ? state.approvalFlows : undefined;
            resourceInputs["classification"] = state ? state.classification : undefined;
            resourceInputs["environmentSettings"] = state ? state.environmentSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordRestriction"] = state ? state.passwordRestriction : undefined;
            resourceInputs["semanticTypes"] = state ? state.semanticTypes : undefined;
            resourceInputs["sqlQueryRestriction"] = state ? state.sqlQueryRestriction : undefined;
            resourceInputs["workspaceProfile"] = state ? state.workspaceProfile : undefined;
        } else {
            const args = argsOrState as SettingArgs | undefined;
            resourceInputs["approvalFlows"] = args ? args.approvalFlows : undefined;
            resourceInputs["classification"] = args ? args.classification : undefined;
            resourceInputs["environmentSettings"] = args ? args.environmentSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordRestriction"] = args ? args.passwordRestriction : undefined;
            resourceInputs["semanticTypes"] = args ? args.semanticTypes : undefined;
            resourceInputs["sqlQueryRestriction"] = args ? args.sqlQueryRestriction : undefined;
            resourceInputs["workspaceProfile"] = args ? args.workspaceProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Setting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Setting resources.
 */
export interface SettingState {
    /**
     * Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
     */
    approvalFlows?: pulumi.Input<pulumi.Input<inputs.SettingApprovalFlow>[]>;
    /**
     * Classification for data masking. Require ENTERPRISE subscription.
     */
    classification?: pulumi.Input<inputs.SettingClassification>;
    /**
     * The environment
     */
    environmentSettings?: pulumi.Input<pulumi.Input<inputs.SettingEnvironmentSetting>[]>;
    /**
     * The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
     */
    name?: pulumi.Input<string>;
    /**
     * Restrict for login password
     */
    passwordRestriction?: pulumi.Input<inputs.SettingPasswordRestriction>;
    /**
     * Semantic types for data masking. Require ENTERPRISE subscription.
     */
    semanticTypes?: pulumi.Input<pulumi.Input<inputs.SettingSemanticType>[]>;
    /**
     * Restrict for SQL query result
     */
    sqlQueryRestriction?: pulumi.Input<inputs.SettingSqlQueryRestriction>;
    workspaceProfile?: pulumi.Input<inputs.SettingWorkspaceProfile>;
}

/**
 * The set of arguments for constructing a Setting resource.
 */
export interface SettingArgs {
    /**
     * Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
     */
    approvalFlows?: pulumi.Input<pulumi.Input<inputs.SettingApprovalFlow>[]>;
    /**
     * Classification for data masking. Require ENTERPRISE subscription.
     */
    classification?: pulumi.Input<inputs.SettingClassification>;
    /**
     * The environment
     */
    environmentSettings?: pulumi.Input<pulumi.Input<inputs.SettingEnvironmentSetting>[]>;
    /**
     * The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
     */
    name?: pulumi.Input<string>;
    /**
     * Restrict for login password
     */
    passwordRestriction?: pulumi.Input<inputs.SettingPasswordRestriction>;
    /**
     * Semantic types for data masking. Require ENTERPRISE subscription.
     */
    semanticTypes?: pulumi.Input<pulumi.Input<inputs.SettingSemanticType>[]>;
    /**
     * Restrict for SQL query result
     */
    sqlQueryRestriction?: pulumi.Input<inputs.SettingSqlQueryRestriction>;
    workspaceProfile?: pulumi.Input<inputs.SettingWorkspaceProfile>;
}
