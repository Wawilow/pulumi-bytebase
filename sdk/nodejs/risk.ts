// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Risk extends pulumi.CustomResource {
    /**
     * Get an existing Risk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RiskState, opts?: pulumi.CustomResourceOptions): Risk {
        return new Risk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:index/risk:Risk';

    /**
     * Returns true if the given object is an instance of Risk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Risk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Risk.__pulumiType;
    }

    /**
     * If the risk is active.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
     */
    public readonly condition!: pulumi.Output<string>;
    /**
     * The risk level, should be 300, 200 or 100. Higher number means higher level.
     */
    public readonly level!: pulumi.Output<number>;
    /**
     * The risk full name in risks/{uid} format.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The risk title.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Risk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RiskArgs | RiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RiskState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as RiskArgs | undefined;
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.level === undefined) && !opts.urn) {
                throw new Error("Missing required property 'level'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Risk.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Risk resources.
 */
export interface RiskState {
    /**
     * If the risk is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
     */
    condition?: pulumi.Input<string>;
    /**
     * The risk level, should be 300, 200 or 100. Higher number means higher level.
     */
    level?: pulumi.Input<number>;
    /**
     * The risk full name in risks/{uid} format.
     */
    name?: pulumi.Input<string>;
    /**
     * The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
     */
    source?: pulumi.Input<string>;
    /**
     * The risk title.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Risk resource.
 */
export interface RiskArgs {
    /**
     * If the risk is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
     */
    condition: pulumi.Input<string>;
    /**
     * The risk level, should be 300, 200 or 100. Higher number means higher level.
     */
    level: pulumi.Input<number>;
    /**
     * The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
     */
    source: pulumi.Input<string>;
    /**
     * The risk title.
     */
    title: pulumi.Input<string>;
}
