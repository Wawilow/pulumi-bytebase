// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The group resource. Workspace domain is required for creating groups.
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:index/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * The group description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The group email.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The members in the group.
     */
    public readonly members!: pulumi.Output<outputs.GroupMember[]>;
    /**
     * The group name in groups/{email} format.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
     */
    public /*out*/ readonly source!: pulumi.Output<string>;
    /**
     * The group title.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * The group description.
     */
    description?: pulumi.Input<string>;
    /**
     * The group email.
     */
    email?: pulumi.Input<string>;
    /**
     * The members in the group.
     */
    members?: pulumi.Input<pulumi.Input<inputs.GroupMember>[]>;
    /**
     * The group name in groups/{email} format.
     */
    name?: pulumi.Input<string>;
    /**
     * Source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
     */
    source?: pulumi.Input<string>;
    /**
     * The group title.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * The group description.
     */
    description?: pulumi.Input<string>;
    /**
     * The group email.
     */
    email: pulumi.Input<string>;
    /**
     * The members in the group.
     */
    members: pulumi.Input<pulumi.Input<inputs.GroupMember>[]>;
    /**
     * The group title.
     */
    title: pulumi.Input<string>;
}
