// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The policy resource.
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Restrict querying admin data sources
     */
    public readonly dataSourceQueryPolicy!: pulumi.Output<outputs.PolicyDataSourceQueryPolicy | undefined>;
    /**
     * Restrict data copying in SQL Editor (Admins/DBAs allowed)
     */
    public readonly disableCopyDataPolicy!: pulumi.Output<outputs.PolicyDisableCopyDataPolicy | undefined>;
    /**
     * Decide if the policy is enforced.
     */
    public readonly enforce!: pulumi.Output<boolean | undefined>;
    public readonly globalMaskingPolicy!: pulumi.Output<outputs.PolicyGlobalMaskingPolicy | undefined>;
    /**
     * Decide if the policy should inherit from the parent.
     */
    public readonly inheritFromParent!: pulumi.Output<boolean | undefined>;
    public readonly maskingExceptionPolicy!: pulumi.Output<outputs.PolicyMaskingExceptionPolicy | undefined>;
    /**
     * The policy full name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
     */
    public readonly rolloutPolicy!: pulumi.Output<outputs.PolicyRolloutPolicy | undefined>;
    /**
     * The policy type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["dataSourceQueryPolicy"] = state ? state.dataSourceQueryPolicy : undefined;
            resourceInputs["disableCopyDataPolicy"] = state ? state.disableCopyDataPolicy : undefined;
            resourceInputs["enforce"] = state ? state.enforce : undefined;
            resourceInputs["globalMaskingPolicy"] = state ? state.globalMaskingPolicy : undefined;
            resourceInputs["inheritFromParent"] = state ? state.inheritFromParent : undefined;
            resourceInputs["maskingExceptionPolicy"] = state ? state.maskingExceptionPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["rolloutPolicy"] = state ? state.rolloutPolicy : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["dataSourceQueryPolicy"] = args ? args.dataSourceQueryPolicy : undefined;
            resourceInputs["disableCopyDataPolicy"] = args ? args.disableCopyDataPolicy : undefined;
            resourceInputs["enforce"] = args ? args.enforce : undefined;
            resourceInputs["globalMaskingPolicy"] = args ? args.globalMaskingPolicy : undefined;
            resourceInputs["inheritFromParent"] = args ? args.inheritFromParent : undefined;
            resourceInputs["maskingExceptionPolicy"] = args ? args.maskingExceptionPolicy : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["rolloutPolicy"] = args ? args.rolloutPolicy : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Restrict querying admin data sources
     */
    dataSourceQueryPolicy?: pulumi.Input<inputs.PolicyDataSourceQueryPolicy>;
    /**
     * Restrict data copying in SQL Editor (Admins/DBAs allowed)
     */
    disableCopyDataPolicy?: pulumi.Input<inputs.PolicyDisableCopyDataPolicy>;
    /**
     * Decide if the policy is enforced.
     */
    enforce?: pulumi.Input<boolean>;
    globalMaskingPolicy?: pulumi.Input<inputs.PolicyGlobalMaskingPolicy>;
    /**
     * Decide if the policy should inherit from the parent.
     */
    inheritFromParent?: pulumi.Input<boolean>;
    maskingExceptionPolicy?: pulumi.Input<inputs.PolicyMaskingExceptionPolicy>;
    /**
     * The policy full name
     */
    name?: pulumi.Input<string>;
    /**
     * The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
     */
    parent?: pulumi.Input<string>;
    /**
     * Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
     */
    rolloutPolicy?: pulumi.Input<inputs.PolicyRolloutPolicy>;
    /**
     * The policy type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Restrict querying admin data sources
     */
    dataSourceQueryPolicy?: pulumi.Input<inputs.PolicyDataSourceQueryPolicy>;
    /**
     * Restrict data copying in SQL Editor (Admins/DBAs allowed)
     */
    disableCopyDataPolicy?: pulumi.Input<inputs.PolicyDisableCopyDataPolicy>;
    /**
     * Decide if the policy is enforced.
     */
    enforce?: pulumi.Input<boolean>;
    globalMaskingPolicy?: pulumi.Input<inputs.PolicyGlobalMaskingPolicy>;
    /**
     * Decide if the policy should inherit from the parent.
     */
    inheritFromParent?: pulumi.Input<boolean>;
    maskingExceptionPolicy?: pulumi.Input<inputs.PolicyMaskingExceptionPolicy>;
    /**
     * The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
     */
    parent: pulumi.Input<string>;
    /**
     * Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
     */
    rolloutPolicy?: pulumi.Input<inputs.PolicyRolloutPolicy>;
    /**
     * The policy type.
     */
    type: pulumi.Input<string>;
}
