// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The database group resource.
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:Database/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * The database group condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/database*group*service.proto#L185 for details.
     */
    public readonly condition!: pulumi.Output<string>;
    /**
     * The matched databases in the group.
     */
    public /*out*/ readonly matchedDatabases!: pulumi.Output<string[]>;
    /**
     * The project fullname in projects/{id} format.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The database group unique resource id.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The database group title.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["matchedDatabases"] = state ? state.matchedDatabases : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["matchedDatabases"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * The database group condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/database*group*service.proto#L185 for details.
     */
    condition?: pulumi.Input<string>;
    /**
     * The matched databases in the group.
     */
    matchedDatabases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The project fullname in projects/{id} format.
     */
    project?: pulumi.Input<string>;
    /**
     * The database group unique resource id.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The database group title.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * The database group condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/database*group*service.proto#L185 for details.
     */
    condition: pulumi.Input<string>;
    /**
     * The project fullname in projects/{id} format.
     */
    project: pulumi.Input<string>;
    /**
     * The database group unique resource id.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The database group title.
     */
    title: pulumi.Input<string>;
}
