// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The review config resource.
 */
export class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigState, opts?: pulumi.CustomResourceOptions): Config {
        return new Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bytebase:Review/config:Config';

    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }

    /**
     * Enable the SQL review config
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The unique resource id for the review config.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
     */
    public readonly resources!: pulumi.Output<string[] | undefined>;
    /**
     * The SQL review rules.
     */
    public readonly rules!: pulumi.Output<outputs.Review.ConfigRule[]>;
    /**
     * The title for the review config.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigArgs | ConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as ConfigArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Config.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Config resources.
 */
export interface ConfigState {
    /**
     * Enable the SQL review config
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The unique resource id for the review config.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SQL review rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.Review.ConfigRule>[]>;
    /**
     * The title for the review config.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    /**
     * Enable the SQL review config
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The unique resource id for the review config.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SQL review rules.
     */
    rules: pulumi.Input<pulumi.Input<inputs.Review.ConfigRule>[]>;
    /**
     * The title for the review config.
     */
    title: pulumi.Input<string>;
}
