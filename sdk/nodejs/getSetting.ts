// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The setting data source.
 */
export function getSetting(args: GetSettingArgs, opts?: pulumi.InvokeOptions): Promise<GetSettingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("bytebase:index/getSetting:getSetting", {
        "approvalFlows": args.approvalFlows,
        "classification": args.classification,
        "environmentSettings": args.environmentSettings,
        "name": args.name,
        "passwordRestriction": args.passwordRestriction,
        "semanticTypes": args.semanticTypes,
        "sqlQueryRestriction": args.sqlQueryRestriction,
        "workspaceProfile": args.workspaceProfile,
    }, opts);
}

/**
 * A collection of arguments for invoking getSetting.
 */
export interface GetSettingArgs {
    /**
     * Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
     */
    approvalFlows?: inputs.GetSettingApprovalFlow[];
    /**
     * Classification for data masking. Require ENTERPRISE subscription.
     */
    classification?: inputs.GetSettingClassification;
    /**
     * The environment
     */
    environmentSettings?: inputs.GetSettingEnvironmentSetting[];
    /**
     * The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
     */
    name: string;
    /**
     * Restrict for login password
     */
    passwordRestriction?: inputs.GetSettingPasswordRestriction;
    /**
     * Semantic types for data masking. Require ENTERPRISE subscription.
     */
    semanticTypes?: inputs.GetSettingSemanticType[];
    /**
     * Restrict for SQL query result
     */
    sqlQueryRestriction?: inputs.GetSettingSqlQueryRestriction;
    workspaceProfile?: inputs.GetSettingWorkspaceProfile;
}

/**
 * A collection of values returned by getSetting.
 */
export interface GetSettingResult {
    /**
     * Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
     */
    readonly approvalFlows: outputs.GetSettingApprovalFlow[];
    /**
     * Classification for data masking. Require ENTERPRISE subscription.
     */
    readonly classification: outputs.GetSettingClassification;
    /**
     * The environment
     */
    readonly environmentSettings: outputs.GetSettingEnvironmentSetting[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
     */
    readonly name: string;
    /**
     * Restrict for login password
     */
    readonly passwordRestriction: outputs.GetSettingPasswordRestriction;
    /**
     * Semantic types for data masking. Require ENTERPRISE subscription.
     */
    readonly semanticTypes: outputs.GetSettingSemanticType[];
    /**
     * Restrict for SQL query result
     */
    readonly sqlQueryRestriction: outputs.GetSettingSqlQueryRestriction;
    readonly workspaceProfile: outputs.GetSettingWorkspaceProfile;
}
/**
 * The setting data source.
 */
export function getSettingOutput(args: GetSettingOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSettingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("bytebase:index/getSetting:getSetting", {
        "approvalFlows": args.approvalFlows,
        "classification": args.classification,
        "environmentSettings": args.environmentSettings,
        "name": args.name,
        "passwordRestriction": args.passwordRestriction,
        "semanticTypes": args.semanticTypes,
        "sqlQueryRestriction": args.sqlQueryRestriction,
        "workspaceProfile": args.workspaceProfile,
    }, opts);
}

/**
 * A collection of arguments for invoking getSetting.
 */
export interface GetSettingOutputArgs {
    /**
     * Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
     */
    approvalFlows?: pulumi.Input<pulumi.Input<inputs.GetSettingApprovalFlowArgs>[]>;
    /**
     * Classification for data masking. Require ENTERPRISE subscription.
     */
    classification?: pulumi.Input<inputs.GetSettingClassificationArgs>;
    /**
     * The environment
     */
    environmentSettings?: pulumi.Input<pulumi.Input<inputs.GetSettingEnvironmentSettingArgs>[]>;
    /**
     * The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
     */
    name: pulumi.Input<string>;
    /**
     * Restrict for login password
     */
    passwordRestriction?: pulumi.Input<inputs.GetSettingPasswordRestrictionArgs>;
    /**
     * Semantic types for data masking. Require ENTERPRISE subscription.
     */
    semanticTypes?: pulumi.Input<pulumi.Input<inputs.GetSettingSemanticTypeArgs>[]>;
    /**
     * Restrict for SQL query result
     */
    sqlQueryRestriction?: pulumi.Input<inputs.GetSettingSqlQueryRestrictionArgs>;
    workspaceProfile?: pulumi.Input<inputs.GetSettingWorkspaceProfileArgs>;
}
