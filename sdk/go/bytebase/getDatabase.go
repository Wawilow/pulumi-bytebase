// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The database data source.
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("bytebase:index/getDatabase:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseArgs struct {
	// The database full name in instances/{instance}/databases/{database} format
	Name string `pulumi:"name"`
}

// A collection of values returned by getDatabase.
type LookupDatabaseResult struct {
	// The databases catalog.
	Catalogs []GetDatabaseCatalog `pulumi:"catalogs"`
	// The database environment, will follow the instance environment by default
	Environment string `pulumi:"environment"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The deployment and policy control labels.
	Labels map[string]string `pulumi:"labels"`
	// The database full name in instances/{instance}/databases/{database} format
	Name string `pulumi:"name"`
	// The project full name for the database in projects/{project} format.
	Project string `pulumi:"project"`
	// The version of database schema.
	SchemaVersion string `pulumi:"schemaVersion"`
	// The existence of a database.
	State string `pulumi:"state"`
	// The latest synchronization time.
	SuccessfulSyncTime string `pulumi:"successfulSyncTime"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResultOutput, error) {
			args := v.(LookupDatabaseArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:index/getDatabase:getDatabase", args, LookupDatabaseResultOutput{}, options).(LookupDatabaseResultOutput), nil
		}).(LookupDatabaseResultOutput)
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseOutputArgs struct {
	// The database full name in instances/{instance}/databases/{database} format
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getDatabase.
type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

// The databases catalog.
func (o LookupDatabaseResultOutput) Catalogs() GetDatabaseCatalogArrayOutput {
	return o.ApplyT(func(v LookupDatabaseResult) []GetDatabaseCatalog { return v.Catalogs }).(GetDatabaseCatalogArrayOutput)
}

// The database environment, will follow the instance environment by default
func (o LookupDatabaseResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Environment }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The deployment and policy control labels.
func (o LookupDatabaseResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDatabaseResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The database full name in instances/{instance}/databases/{database} format
func (o LookupDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The project full name for the database in projects/{project} format.
func (o LookupDatabaseResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Project }).(pulumi.StringOutput)
}

// The version of database schema.
func (o LookupDatabaseResultOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The existence of a database.
func (o LookupDatabaseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.State }).(pulumi.StringOutput)
}

// The latest synchronization time.
func (o LookupDatabaseResultOutput) SuccessfulSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.SuccessfulSyncTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
