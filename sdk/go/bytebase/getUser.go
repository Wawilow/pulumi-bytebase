// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The user data source.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("bytebase:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The user name in users/{user id or email} format.
	Name string `pulumi:"name"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The user email.
	Email string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The user last change password time.
	LastChangePasswordTime string `pulumi:"lastChangePasswordTime"`
	// The user last login time.
	LastLoginTime string `pulumi:"lastLoginTime"`
	// The mfaEnabled flag means if the user has enabled MFA.
	MfaEnabled bool `pulumi:"mfaEnabled"`
	// The user name in users/{user id or email} format.
	Name string `pulumi:"name"`
	// The user phone.
	Phone string `pulumi:"phone"`
	// Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
	Source string `pulumi:"source"`
	// The user is deleted or not.
	State string `pulumi:"state"`
	// The user title.
	Title string `pulumi:"title"`
	// The user type.
	Type string `pulumi:"type"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:index/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The user name in users/{user id or email} format.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The user email.
func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The user last change password time.
func (o LookupUserResultOutput) LastChangePasswordTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastChangePasswordTime }).(pulumi.StringOutput)
}

// The user last login time.
func (o LookupUserResultOutput) LastLoginTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastLoginTime }).(pulumi.StringOutput)
}

// The mfaEnabled flag means if the user has enabled MFA.
func (o LookupUserResultOutput) MfaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.MfaEnabled }).(pulumi.BoolOutput)
}

// The user name in users/{user id or email} format.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The user phone.
func (o LookupUserResultOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Phone }).(pulumi.StringOutput)
}

// Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
func (o LookupUserResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Source }).(pulumi.StringOutput)
}

// The user is deleted or not.
func (o LookupUserResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.State }).(pulumi.StringOutput)
}

// The user title.
func (o LookupUserResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Title }).(pulumi.StringOutput)
}

// The user type.
func (o LookupUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
