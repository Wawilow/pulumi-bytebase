// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The setting resource.
type Setting struct {
	pulumi.CustomResourceState

	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows SettingApprovalFlowArrayOutput `pulumi:"approvalFlows"`
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification SettingClassificationPtrOutput `pulumi:"classification"`
	// The environment
	EnvironmentSettings SettingEnvironmentSettingArrayOutput `pulumi:"environmentSettings"`
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name pulumi.StringOutput `pulumi:"name"`
	// Restrict for login password
	PasswordRestriction SettingPasswordRestrictionPtrOutput `pulumi:"passwordRestriction"`
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes SettingSemanticTypeArrayOutput `pulumi:"semanticTypes"`
	// Restrict for SQL query result
	SqlQueryRestriction SettingSqlQueryRestrictionPtrOutput `pulumi:"sqlQueryRestriction"`
	WorkspaceProfile    SettingWorkspaceProfilePtrOutput    `pulumi:"workspaceProfile"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil {
		args = &SettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Setting
	err := ctx.RegisterResource("bytebase:index/setting:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("bytebase:index/setting:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows []SettingApprovalFlow `pulumi:"approvalFlows"`
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification *SettingClassification `pulumi:"classification"`
	// The environment
	EnvironmentSettings []SettingEnvironmentSetting `pulumi:"environmentSettings"`
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name *string `pulumi:"name"`
	// Restrict for login password
	PasswordRestriction *SettingPasswordRestriction `pulumi:"passwordRestriction"`
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes []SettingSemanticType `pulumi:"semanticTypes"`
	// Restrict for SQL query result
	SqlQueryRestriction *SettingSqlQueryRestriction `pulumi:"sqlQueryRestriction"`
	WorkspaceProfile    *SettingWorkspaceProfile    `pulumi:"workspaceProfile"`
}

type SettingState struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows SettingApprovalFlowArrayInput
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification SettingClassificationPtrInput
	// The environment
	EnvironmentSettings SettingEnvironmentSettingArrayInput
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name pulumi.StringPtrInput
	// Restrict for login password
	PasswordRestriction SettingPasswordRestrictionPtrInput
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes SettingSemanticTypeArrayInput
	// Restrict for SQL query result
	SqlQueryRestriction SettingSqlQueryRestrictionPtrInput
	WorkspaceProfile    SettingWorkspaceProfilePtrInput
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows []SettingApprovalFlow `pulumi:"approvalFlows"`
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification *SettingClassification `pulumi:"classification"`
	// The environment
	EnvironmentSettings []SettingEnvironmentSetting `pulumi:"environmentSettings"`
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name *string `pulumi:"name"`
	// Restrict for login password
	PasswordRestriction *SettingPasswordRestriction `pulumi:"passwordRestriction"`
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes []SettingSemanticType `pulumi:"semanticTypes"`
	// Restrict for SQL query result
	SqlQueryRestriction *SettingSqlQueryRestriction `pulumi:"sqlQueryRestriction"`
	WorkspaceProfile    *SettingWorkspaceProfile    `pulumi:"workspaceProfile"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows SettingApprovalFlowArrayInput
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification SettingClassificationPtrInput
	// The environment
	EnvironmentSettings SettingEnvironmentSettingArrayInput
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name pulumi.StringPtrInput
	// Restrict for login password
	PasswordRestriction SettingPasswordRestrictionPtrInput
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes SettingSemanticTypeArrayInput
	// Restrict for SQL query result
	SqlQueryRestriction SettingSqlQueryRestrictionPtrInput
	WorkspaceProfile    SettingWorkspaceProfilePtrInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}

type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(ctx context.Context) SettingOutput
}

func (*Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (i *Setting) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i *Setting) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

// SettingArrayInput is an input type that accepts SettingArray and SettingArrayOutput values.
// You can construct a concrete instance of `SettingArrayInput` via:
//
//	SettingArray{ SettingArgs{...} }
type SettingArrayInput interface {
	pulumi.Input

	ToSettingArrayOutput() SettingArrayOutput
	ToSettingArrayOutputWithContext(context.Context) SettingArrayOutput
}

type SettingArray []SettingInput

func (SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (i SettingArray) ToSettingArrayOutput() SettingArrayOutput {
	return i.ToSettingArrayOutputWithContext(context.Background())
}

func (i SettingArray) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingArrayOutput)
}

// SettingMapInput is an input type that accepts SettingMap and SettingMapOutput values.
// You can construct a concrete instance of `SettingMapInput` via:
//
//	SettingMap{ "key": SettingArgs{...} }
type SettingMapInput interface {
	pulumi.Input

	ToSettingMapOutput() SettingMapOutput
	ToSettingMapOutputWithContext(context.Context) SettingMapOutput
}

type SettingMap map[string]SettingInput

func (SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (i SettingMap) ToSettingMapOutput() SettingMapOutput {
	return i.ToSettingMapOutputWithContext(context.Background())
}

func (i SettingMap) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMapOutput)
}

type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
func (o SettingOutput) ApprovalFlows() SettingApprovalFlowArrayOutput {
	return o.ApplyT(func(v *Setting) SettingApprovalFlowArrayOutput { return v.ApprovalFlows }).(SettingApprovalFlowArrayOutput)
}

// Classification for data masking. Require ENTERPRISE subscription.
func (o SettingOutput) Classification() SettingClassificationPtrOutput {
	return o.ApplyT(func(v *Setting) SettingClassificationPtrOutput { return v.Classification }).(SettingClassificationPtrOutput)
}

// The environment
func (o SettingOutput) EnvironmentSettings() SettingEnvironmentSettingArrayOutput {
	return o.ApplyT(func(v *Setting) SettingEnvironmentSettingArrayOutput { return v.EnvironmentSettings }).(SettingEnvironmentSettingArrayOutput)
}

// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
func (o SettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Restrict for login password
func (o SettingOutput) PasswordRestriction() SettingPasswordRestrictionPtrOutput {
	return o.ApplyT(func(v *Setting) SettingPasswordRestrictionPtrOutput { return v.PasswordRestriction }).(SettingPasswordRestrictionPtrOutput)
}

// Semantic types for data masking. Require ENTERPRISE subscription.
func (o SettingOutput) SemanticTypes() SettingSemanticTypeArrayOutput {
	return o.ApplyT(func(v *Setting) SettingSemanticTypeArrayOutput { return v.SemanticTypes }).(SettingSemanticTypeArrayOutput)
}

// Restrict for SQL query result
func (o SettingOutput) SqlQueryRestriction() SettingSqlQueryRestrictionPtrOutput {
	return o.ApplyT(func(v *Setting) SettingSqlQueryRestrictionPtrOutput { return v.SqlQueryRestriction }).(SettingSqlQueryRestrictionPtrOutput)
}

func (o SettingOutput) WorkspaceProfile() SettingWorkspaceProfilePtrOutput {
	return o.ApplyT(func(v *Setting) SettingWorkspaceProfilePtrOutput { return v.WorkspaceProfile }).(SettingWorkspaceProfilePtrOutput)
}

type SettingArrayOutput struct{ *pulumi.OutputState }

func (SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (o SettingArrayOutput) ToSettingArrayOutput() SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) Index(i pulumi.IntInput) SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].([]*Setting)[vs[1].(int)]
	}).(SettingOutput)
}

type SettingMapOutput struct{ *pulumi.OutputState }

func (SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (o SettingMapOutput) ToSettingMapOutput() SettingMapOutput {
	return o
}

func (o SettingMapOutput) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return o
}

func (o SettingMapOutput) MapIndex(k pulumi.StringInput) SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].(map[string]*Setting)[vs[1].(string)]
	}).(SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInput)(nil)).Elem(), &Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingArrayInput)(nil)).Elem(), SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMapInput)(nil)).Elem(), SettingMap{})
	pulumi.RegisterOutputType(SettingOutput{})
	pulumi.RegisterOutputType(SettingArrayOutput{})
	pulumi.RegisterOutputType(SettingMapOutput{})
}
