// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

var _ = internal.GetEnvOrDefault

type PolicyIamPolicy struct {
	// The binding in the IAM policy.
	Bindings []PolicyIamPolicyBinding `pulumi:"bindings"`
}

// PolicyIamPolicyInput is an input type that accepts PolicyIamPolicyArgs and PolicyIamPolicyOutput values.
// You can construct a concrete instance of `PolicyIamPolicyInput` via:
//
//	PolicyIamPolicyArgs{...}
type PolicyIamPolicyInput interface {
	pulumi.Input

	ToPolicyIamPolicyOutput() PolicyIamPolicyOutput
	ToPolicyIamPolicyOutputWithContext(context.Context) PolicyIamPolicyOutput
}

type PolicyIamPolicyArgs struct {
	// The binding in the IAM policy.
	Bindings PolicyIamPolicyBindingArrayInput `pulumi:"bindings"`
}

func (PolicyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIamPolicy)(nil)).Elem()
}

func (i PolicyIamPolicyArgs) ToPolicyIamPolicyOutput() PolicyIamPolicyOutput {
	return i.ToPolicyIamPolicyOutputWithContext(context.Background())
}

func (i PolicyIamPolicyArgs) ToPolicyIamPolicyOutputWithContext(ctx context.Context) PolicyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyOutput)
}

func (i PolicyIamPolicyArgs) ToPolicyIamPolicyPtrOutput() PolicyIamPolicyPtrOutput {
	return i.ToPolicyIamPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyIamPolicyArgs) ToPolicyIamPolicyPtrOutputWithContext(ctx context.Context) PolicyIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyOutput).ToPolicyIamPolicyPtrOutputWithContext(ctx)
}

// PolicyIamPolicyPtrInput is an input type that accepts PolicyIamPolicyArgs, PolicyIamPolicyPtr and PolicyIamPolicyPtrOutput values.
// You can construct a concrete instance of `PolicyIamPolicyPtrInput` via:
//
//	        PolicyIamPolicyArgs{...}
//
//	or:
//
//	        nil
type PolicyIamPolicyPtrInput interface {
	pulumi.Input

	ToPolicyIamPolicyPtrOutput() PolicyIamPolicyPtrOutput
	ToPolicyIamPolicyPtrOutputWithContext(context.Context) PolicyIamPolicyPtrOutput
}

type policyIamPolicyPtrType PolicyIamPolicyArgs

func PolicyIamPolicyPtr(v *PolicyIamPolicyArgs) PolicyIamPolicyPtrInput {
	return (*policyIamPolicyPtrType)(v)
}

func (*policyIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyIamPolicy)(nil)).Elem()
}

func (i *policyIamPolicyPtrType) ToPolicyIamPolicyPtrOutput() PolicyIamPolicyPtrOutput {
	return i.ToPolicyIamPolicyPtrOutputWithContext(context.Background())
}

func (i *policyIamPolicyPtrType) ToPolicyIamPolicyPtrOutputWithContext(ctx context.Context) PolicyIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyPtrOutput)
}

type PolicyIamPolicyOutput struct{ *pulumi.OutputState }

func (PolicyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIamPolicy)(nil)).Elem()
}

func (o PolicyIamPolicyOutput) ToPolicyIamPolicyOutput() PolicyIamPolicyOutput {
	return o
}

func (o PolicyIamPolicyOutput) ToPolicyIamPolicyOutputWithContext(ctx context.Context) PolicyIamPolicyOutput {
	return o
}

func (o PolicyIamPolicyOutput) ToPolicyIamPolicyPtrOutput() PolicyIamPolicyPtrOutput {
	return o.ToPolicyIamPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyIamPolicyOutput) ToPolicyIamPolicyPtrOutputWithContext(ctx context.Context) PolicyIamPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyIamPolicy) *PolicyIamPolicy {
		return &v
	}).(PolicyIamPolicyPtrOutput)
}

// The binding in the IAM policy.
func (o PolicyIamPolicyOutput) Bindings() PolicyIamPolicyBindingArrayOutput {
	return o.ApplyT(func(v PolicyIamPolicy) []PolicyIamPolicyBinding { return v.Bindings }).(PolicyIamPolicyBindingArrayOutput)
}

type PolicyIamPolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyIamPolicy)(nil)).Elem()
}

func (o PolicyIamPolicyPtrOutput) ToPolicyIamPolicyPtrOutput() PolicyIamPolicyPtrOutput {
	return o
}

func (o PolicyIamPolicyPtrOutput) ToPolicyIamPolicyPtrOutputWithContext(ctx context.Context) PolicyIamPolicyPtrOutput {
	return o
}

func (o PolicyIamPolicyPtrOutput) Elem() PolicyIamPolicyOutput {
	return o.ApplyT(func(v *PolicyIamPolicy) PolicyIamPolicy {
		if v != nil {
			return *v
		}
		var ret PolicyIamPolicy
		return ret
	}).(PolicyIamPolicyOutput)
}

// The binding in the IAM policy.
func (o PolicyIamPolicyPtrOutput) Bindings() PolicyIamPolicyBindingArrayOutput {
	return o.ApplyT(func(v *PolicyIamPolicy) []PolicyIamPolicyBinding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(PolicyIamPolicyBindingArrayOutput)
}

type PolicyIamPolicyBinding struct {
	// Match the condition limit.
	Conditions []PolicyIamPolicyBindingCondition `pulumi:"conditions"`
	// A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
	Members []string `pulumi:"members"`
	// The role full name in roles/{id} format.
	Role *string `pulumi:"role"`
}

// PolicyIamPolicyBindingInput is an input type that accepts PolicyIamPolicyBindingArgs and PolicyIamPolicyBindingOutput values.
// You can construct a concrete instance of `PolicyIamPolicyBindingInput` via:
//
//	PolicyIamPolicyBindingArgs{...}
type PolicyIamPolicyBindingInput interface {
	pulumi.Input

	ToPolicyIamPolicyBindingOutput() PolicyIamPolicyBindingOutput
	ToPolicyIamPolicyBindingOutputWithContext(context.Context) PolicyIamPolicyBindingOutput
}

type PolicyIamPolicyBindingArgs struct {
	// Match the condition limit.
	Conditions PolicyIamPolicyBindingConditionArrayInput `pulumi:"conditions"`
	// A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
	Members pulumi.StringArrayInput `pulumi:"members"`
	// The role full name in roles/{id} format.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (PolicyIamPolicyBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIamPolicyBinding)(nil)).Elem()
}

func (i PolicyIamPolicyBindingArgs) ToPolicyIamPolicyBindingOutput() PolicyIamPolicyBindingOutput {
	return i.ToPolicyIamPolicyBindingOutputWithContext(context.Background())
}

func (i PolicyIamPolicyBindingArgs) ToPolicyIamPolicyBindingOutputWithContext(ctx context.Context) PolicyIamPolicyBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyBindingOutput)
}

// PolicyIamPolicyBindingArrayInput is an input type that accepts PolicyIamPolicyBindingArray and PolicyIamPolicyBindingArrayOutput values.
// You can construct a concrete instance of `PolicyIamPolicyBindingArrayInput` via:
//
//	PolicyIamPolicyBindingArray{ PolicyIamPolicyBindingArgs{...} }
type PolicyIamPolicyBindingArrayInput interface {
	pulumi.Input

	ToPolicyIamPolicyBindingArrayOutput() PolicyIamPolicyBindingArrayOutput
	ToPolicyIamPolicyBindingArrayOutputWithContext(context.Context) PolicyIamPolicyBindingArrayOutput
}

type PolicyIamPolicyBindingArray []PolicyIamPolicyBindingInput

func (PolicyIamPolicyBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyIamPolicyBinding)(nil)).Elem()
}

func (i PolicyIamPolicyBindingArray) ToPolicyIamPolicyBindingArrayOutput() PolicyIamPolicyBindingArrayOutput {
	return i.ToPolicyIamPolicyBindingArrayOutputWithContext(context.Background())
}

func (i PolicyIamPolicyBindingArray) ToPolicyIamPolicyBindingArrayOutputWithContext(ctx context.Context) PolicyIamPolicyBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyBindingArrayOutput)
}

type PolicyIamPolicyBindingOutput struct{ *pulumi.OutputState }

func (PolicyIamPolicyBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIamPolicyBinding)(nil)).Elem()
}

func (o PolicyIamPolicyBindingOutput) ToPolicyIamPolicyBindingOutput() PolicyIamPolicyBindingOutput {
	return o
}

func (o PolicyIamPolicyBindingOutput) ToPolicyIamPolicyBindingOutputWithContext(ctx context.Context) PolicyIamPolicyBindingOutput {
	return o
}

// Match the condition limit.
func (o PolicyIamPolicyBindingOutput) Conditions() PolicyIamPolicyBindingConditionArrayOutput {
	return o.ApplyT(func(v PolicyIamPolicyBinding) []PolicyIamPolicyBindingCondition { return v.Conditions }).(PolicyIamPolicyBindingConditionArrayOutput)
}

// A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
func (o PolicyIamPolicyBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyIamPolicyBinding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// The role full name in roles/{id} format.
func (o PolicyIamPolicyBindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyIamPolicyBinding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type PolicyIamPolicyBindingArrayOutput struct{ *pulumi.OutputState }

func (PolicyIamPolicyBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyIamPolicyBinding)(nil)).Elem()
}

func (o PolicyIamPolicyBindingArrayOutput) ToPolicyIamPolicyBindingArrayOutput() PolicyIamPolicyBindingArrayOutput {
	return o
}

func (o PolicyIamPolicyBindingArrayOutput) ToPolicyIamPolicyBindingArrayOutputWithContext(ctx context.Context) PolicyIamPolicyBindingArrayOutput {
	return o
}

func (o PolicyIamPolicyBindingArrayOutput) Index(i pulumi.IntInput) PolicyIamPolicyBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyIamPolicyBinding {
		return vs[0].([]PolicyIamPolicyBinding)[vs[1].(int)]
	}).(PolicyIamPolicyBindingOutput)
}

type PolicyIamPolicyBindingCondition struct {
	// The accessible database full name in instances/{instance resource id}/databases/{database name} format
	Database *string `pulumi:"database"`
	// The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
	ExpireTimestamp *string `pulumi:"expireTimestamp"`
	// The export row limit for exporter role
	RowLimit *int `pulumi:"rowLimit"`
	// The accessible schema in the database
	Schema *string `pulumi:"schema"`
	// The accessible table list
	Tables []string `pulumi:"tables"`
}

// PolicyIamPolicyBindingConditionInput is an input type that accepts PolicyIamPolicyBindingConditionArgs and PolicyIamPolicyBindingConditionOutput values.
// You can construct a concrete instance of `PolicyIamPolicyBindingConditionInput` via:
//
//	PolicyIamPolicyBindingConditionArgs{...}
type PolicyIamPolicyBindingConditionInput interface {
	pulumi.Input

	ToPolicyIamPolicyBindingConditionOutput() PolicyIamPolicyBindingConditionOutput
	ToPolicyIamPolicyBindingConditionOutputWithContext(context.Context) PolicyIamPolicyBindingConditionOutput
}

type PolicyIamPolicyBindingConditionArgs struct {
	// The accessible database full name in instances/{instance resource id}/databases/{database name} format
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
	ExpireTimestamp pulumi.StringPtrInput `pulumi:"expireTimestamp"`
	// The export row limit for exporter role
	RowLimit pulumi.IntPtrInput `pulumi:"rowLimit"`
	// The accessible schema in the database
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// The accessible table list
	Tables pulumi.StringArrayInput `pulumi:"tables"`
}

func (PolicyIamPolicyBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (i PolicyIamPolicyBindingConditionArgs) ToPolicyIamPolicyBindingConditionOutput() PolicyIamPolicyBindingConditionOutput {
	return i.ToPolicyIamPolicyBindingConditionOutputWithContext(context.Background())
}

func (i PolicyIamPolicyBindingConditionArgs) ToPolicyIamPolicyBindingConditionOutputWithContext(ctx context.Context) PolicyIamPolicyBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyBindingConditionOutput)
}

// PolicyIamPolicyBindingConditionArrayInput is an input type that accepts PolicyIamPolicyBindingConditionArray and PolicyIamPolicyBindingConditionArrayOutput values.
// You can construct a concrete instance of `PolicyIamPolicyBindingConditionArrayInput` via:
//
//	PolicyIamPolicyBindingConditionArray{ PolicyIamPolicyBindingConditionArgs{...} }
type PolicyIamPolicyBindingConditionArrayInput interface {
	pulumi.Input

	ToPolicyIamPolicyBindingConditionArrayOutput() PolicyIamPolicyBindingConditionArrayOutput
	ToPolicyIamPolicyBindingConditionArrayOutputWithContext(context.Context) PolicyIamPolicyBindingConditionArrayOutput
}

type PolicyIamPolicyBindingConditionArray []PolicyIamPolicyBindingConditionInput

func (PolicyIamPolicyBindingConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (i PolicyIamPolicyBindingConditionArray) ToPolicyIamPolicyBindingConditionArrayOutput() PolicyIamPolicyBindingConditionArrayOutput {
	return i.ToPolicyIamPolicyBindingConditionArrayOutputWithContext(context.Background())
}

func (i PolicyIamPolicyBindingConditionArray) ToPolicyIamPolicyBindingConditionArrayOutputWithContext(ctx context.Context) PolicyIamPolicyBindingConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIamPolicyBindingConditionArrayOutput)
}

type PolicyIamPolicyBindingConditionOutput struct{ *pulumi.OutputState }

func (PolicyIamPolicyBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (o PolicyIamPolicyBindingConditionOutput) ToPolicyIamPolicyBindingConditionOutput() PolicyIamPolicyBindingConditionOutput {
	return o
}

func (o PolicyIamPolicyBindingConditionOutput) ToPolicyIamPolicyBindingConditionOutputWithContext(ctx context.Context) PolicyIamPolicyBindingConditionOutput {
	return o
}

// The accessible database full name in instances/{instance resource id}/databases/{database name} format
func (o PolicyIamPolicyBindingConditionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyIamPolicyBindingCondition) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
func (o PolicyIamPolicyBindingConditionOutput) ExpireTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyIamPolicyBindingCondition) *string { return v.ExpireTimestamp }).(pulumi.StringPtrOutput)
}

// The export row limit for exporter role
func (o PolicyIamPolicyBindingConditionOutput) RowLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyIamPolicyBindingCondition) *int { return v.RowLimit }).(pulumi.IntPtrOutput)
}

// The accessible schema in the database
func (o PolicyIamPolicyBindingConditionOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyIamPolicyBindingCondition) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The accessible table list
func (o PolicyIamPolicyBindingConditionOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyIamPolicyBindingCondition) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type PolicyIamPolicyBindingConditionArrayOutput struct{ *pulumi.OutputState }

func (PolicyIamPolicyBindingConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (o PolicyIamPolicyBindingConditionArrayOutput) ToPolicyIamPolicyBindingConditionArrayOutput() PolicyIamPolicyBindingConditionArrayOutput {
	return o
}

func (o PolicyIamPolicyBindingConditionArrayOutput) ToPolicyIamPolicyBindingConditionArrayOutputWithContext(ctx context.Context) PolicyIamPolicyBindingConditionArrayOutput {
	return o
}

func (o PolicyIamPolicyBindingConditionArrayOutput) Index(i pulumi.IntInput) PolicyIamPolicyBindingConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyIamPolicyBindingCondition {
		return vs[0].([]PolicyIamPolicyBindingCondition)[vs[1].(int)]
	}).(PolicyIamPolicyBindingConditionOutput)
}

type GetPolicyIamPolicy struct {
	// The binding in the IAM policy.
	Bindings []GetPolicyIamPolicyBinding `pulumi:"bindings"`
}

// GetPolicyIamPolicyInput is an input type that accepts GetPolicyIamPolicyArgs and GetPolicyIamPolicyOutput values.
// You can construct a concrete instance of `GetPolicyIamPolicyInput` via:
//
//	GetPolicyIamPolicyArgs{...}
type GetPolicyIamPolicyInput interface {
	pulumi.Input

	ToGetPolicyIamPolicyOutput() GetPolicyIamPolicyOutput
	ToGetPolicyIamPolicyOutputWithContext(context.Context) GetPolicyIamPolicyOutput
}

type GetPolicyIamPolicyArgs struct {
	// The binding in the IAM policy.
	Bindings GetPolicyIamPolicyBindingArrayInput `pulumi:"bindings"`
}

func (GetPolicyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyIamPolicy)(nil)).Elem()
}

func (i GetPolicyIamPolicyArgs) ToGetPolicyIamPolicyOutput() GetPolicyIamPolicyOutput {
	return i.ToGetPolicyIamPolicyOutputWithContext(context.Background())
}

func (i GetPolicyIamPolicyArgs) ToGetPolicyIamPolicyOutputWithContext(ctx context.Context) GetPolicyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyOutput)
}

func (i GetPolicyIamPolicyArgs) ToGetPolicyIamPolicyPtrOutput() GetPolicyIamPolicyPtrOutput {
	return i.ToGetPolicyIamPolicyPtrOutputWithContext(context.Background())
}

func (i GetPolicyIamPolicyArgs) ToGetPolicyIamPolicyPtrOutputWithContext(ctx context.Context) GetPolicyIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyOutput).ToGetPolicyIamPolicyPtrOutputWithContext(ctx)
}

// GetPolicyIamPolicyPtrInput is an input type that accepts GetPolicyIamPolicyArgs, GetPolicyIamPolicyPtr and GetPolicyIamPolicyPtrOutput values.
// You can construct a concrete instance of `GetPolicyIamPolicyPtrInput` via:
//
//	        GetPolicyIamPolicyArgs{...}
//
//	or:
//
//	        nil
type GetPolicyIamPolicyPtrInput interface {
	pulumi.Input

	ToGetPolicyIamPolicyPtrOutput() GetPolicyIamPolicyPtrOutput
	ToGetPolicyIamPolicyPtrOutputWithContext(context.Context) GetPolicyIamPolicyPtrOutput
}

type getPolicyIamPolicyPtrType GetPolicyIamPolicyArgs

func GetPolicyIamPolicyPtr(v *GetPolicyIamPolicyArgs) GetPolicyIamPolicyPtrInput {
	return (*getPolicyIamPolicyPtrType)(v)
}

func (*getPolicyIamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPolicyIamPolicy)(nil)).Elem()
}

func (i *getPolicyIamPolicyPtrType) ToGetPolicyIamPolicyPtrOutput() GetPolicyIamPolicyPtrOutput {
	return i.ToGetPolicyIamPolicyPtrOutputWithContext(context.Background())
}

func (i *getPolicyIamPolicyPtrType) ToGetPolicyIamPolicyPtrOutputWithContext(ctx context.Context) GetPolicyIamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyPtrOutput)
}

type GetPolicyIamPolicyOutput struct{ *pulumi.OutputState }

func (GetPolicyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyIamPolicy)(nil)).Elem()
}

func (o GetPolicyIamPolicyOutput) ToGetPolicyIamPolicyOutput() GetPolicyIamPolicyOutput {
	return o
}

func (o GetPolicyIamPolicyOutput) ToGetPolicyIamPolicyOutputWithContext(ctx context.Context) GetPolicyIamPolicyOutput {
	return o
}

func (o GetPolicyIamPolicyOutput) ToGetPolicyIamPolicyPtrOutput() GetPolicyIamPolicyPtrOutput {
	return o.ToGetPolicyIamPolicyPtrOutputWithContext(context.Background())
}

func (o GetPolicyIamPolicyOutput) ToGetPolicyIamPolicyPtrOutputWithContext(ctx context.Context) GetPolicyIamPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetPolicyIamPolicy) *GetPolicyIamPolicy {
		return &v
	}).(GetPolicyIamPolicyPtrOutput)
}

// The binding in the IAM policy.
func (o GetPolicyIamPolicyOutput) Bindings() GetPolicyIamPolicyBindingArrayOutput {
	return o.ApplyT(func(v GetPolicyIamPolicy) []GetPolicyIamPolicyBinding { return v.Bindings }).(GetPolicyIamPolicyBindingArrayOutput)
}

type GetPolicyIamPolicyPtrOutput struct{ *pulumi.OutputState }

func (GetPolicyIamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetPolicyIamPolicy)(nil)).Elem()
}

func (o GetPolicyIamPolicyPtrOutput) ToGetPolicyIamPolicyPtrOutput() GetPolicyIamPolicyPtrOutput {
	return o
}

func (o GetPolicyIamPolicyPtrOutput) ToGetPolicyIamPolicyPtrOutputWithContext(ctx context.Context) GetPolicyIamPolicyPtrOutput {
	return o
}

func (o GetPolicyIamPolicyPtrOutput) Elem() GetPolicyIamPolicyOutput {
	return o.ApplyT(func(v *GetPolicyIamPolicy) GetPolicyIamPolicy {
		if v != nil {
			return *v
		}
		var ret GetPolicyIamPolicy
		return ret
	}).(GetPolicyIamPolicyOutput)
}

// The binding in the IAM policy.
func (o GetPolicyIamPolicyPtrOutput) Bindings() GetPolicyIamPolicyBindingArrayOutput {
	return o.ApplyT(func(v *GetPolicyIamPolicy) []GetPolicyIamPolicyBinding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(GetPolicyIamPolicyBindingArrayOutput)
}

type GetPolicyIamPolicyBinding struct {
	// Match the condition limit.
	Conditions []GetPolicyIamPolicyBindingCondition `pulumi:"conditions"`
	// A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
	Members []string `pulumi:"members"`
	// The role full name in roles/{id} format.
	Role *string `pulumi:"role"`
}

// GetPolicyIamPolicyBindingInput is an input type that accepts GetPolicyIamPolicyBindingArgs and GetPolicyIamPolicyBindingOutput values.
// You can construct a concrete instance of `GetPolicyIamPolicyBindingInput` via:
//
//	GetPolicyIamPolicyBindingArgs{...}
type GetPolicyIamPolicyBindingInput interface {
	pulumi.Input

	ToGetPolicyIamPolicyBindingOutput() GetPolicyIamPolicyBindingOutput
	ToGetPolicyIamPolicyBindingOutputWithContext(context.Context) GetPolicyIamPolicyBindingOutput
}

type GetPolicyIamPolicyBindingArgs struct {
	// Match the condition limit.
	Conditions GetPolicyIamPolicyBindingConditionArrayInput `pulumi:"conditions"`
	// A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
	Members pulumi.StringArrayInput `pulumi:"members"`
	// The role full name in roles/{id} format.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (GetPolicyIamPolicyBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyIamPolicyBinding)(nil)).Elem()
}

func (i GetPolicyIamPolicyBindingArgs) ToGetPolicyIamPolicyBindingOutput() GetPolicyIamPolicyBindingOutput {
	return i.ToGetPolicyIamPolicyBindingOutputWithContext(context.Background())
}

func (i GetPolicyIamPolicyBindingArgs) ToGetPolicyIamPolicyBindingOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyBindingOutput)
}

// GetPolicyIamPolicyBindingArrayInput is an input type that accepts GetPolicyIamPolicyBindingArray and GetPolicyIamPolicyBindingArrayOutput values.
// You can construct a concrete instance of `GetPolicyIamPolicyBindingArrayInput` via:
//
//	GetPolicyIamPolicyBindingArray{ GetPolicyIamPolicyBindingArgs{...} }
type GetPolicyIamPolicyBindingArrayInput interface {
	pulumi.Input

	ToGetPolicyIamPolicyBindingArrayOutput() GetPolicyIamPolicyBindingArrayOutput
	ToGetPolicyIamPolicyBindingArrayOutputWithContext(context.Context) GetPolicyIamPolicyBindingArrayOutput
}

type GetPolicyIamPolicyBindingArray []GetPolicyIamPolicyBindingInput

func (GetPolicyIamPolicyBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyIamPolicyBinding)(nil)).Elem()
}

func (i GetPolicyIamPolicyBindingArray) ToGetPolicyIamPolicyBindingArrayOutput() GetPolicyIamPolicyBindingArrayOutput {
	return i.ToGetPolicyIamPolicyBindingArrayOutputWithContext(context.Background())
}

func (i GetPolicyIamPolicyBindingArray) ToGetPolicyIamPolicyBindingArrayOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyBindingArrayOutput)
}

type GetPolicyIamPolicyBindingOutput struct{ *pulumi.OutputState }

func (GetPolicyIamPolicyBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyIamPolicyBinding)(nil)).Elem()
}

func (o GetPolicyIamPolicyBindingOutput) ToGetPolicyIamPolicyBindingOutput() GetPolicyIamPolicyBindingOutput {
	return o
}

func (o GetPolicyIamPolicyBindingOutput) ToGetPolicyIamPolicyBindingOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingOutput {
	return o
}

// Match the condition limit.
func (o GetPolicyIamPolicyBindingOutput) Conditions() GetPolicyIamPolicyBindingConditionArrayOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBinding) []GetPolicyIamPolicyBindingCondition { return v.Conditions }).(GetPolicyIamPolicyBindingConditionArrayOutput)
}

// A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
func (o GetPolicyIamPolicyBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBinding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// The role full name in roles/{id} format.
func (o GetPolicyIamPolicyBindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBinding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type GetPolicyIamPolicyBindingArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyIamPolicyBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyIamPolicyBinding)(nil)).Elem()
}

func (o GetPolicyIamPolicyBindingArrayOutput) ToGetPolicyIamPolicyBindingArrayOutput() GetPolicyIamPolicyBindingArrayOutput {
	return o
}

func (o GetPolicyIamPolicyBindingArrayOutput) ToGetPolicyIamPolicyBindingArrayOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingArrayOutput {
	return o
}

func (o GetPolicyIamPolicyBindingArrayOutput) Index(i pulumi.IntInput) GetPolicyIamPolicyBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyIamPolicyBinding {
		return vs[0].([]GetPolicyIamPolicyBinding)[vs[1].(int)]
	}).(GetPolicyIamPolicyBindingOutput)
}

type GetPolicyIamPolicyBindingCondition struct {
	// The accessible database full name in instances/{instance resource id}/databases/{database name} format
	Database *string `pulumi:"database"`
	// The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
	ExpireTimestamp *string `pulumi:"expireTimestamp"`
	// The export row limit for exporter role
	RowLimit *int `pulumi:"rowLimit"`
	// The accessible schema in the database
	Schema *string `pulumi:"schema"`
	// The accessible table list
	Tables []string `pulumi:"tables"`
}

// GetPolicyIamPolicyBindingConditionInput is an input type that accepts GetPolicyIamPolicyBindingConditionArgs and GetPolicyIamPolicyBindingConditionOutput values.
// You can construct a concrete instance of `GetPolicyIamPolicyBindingConditionInput` via:
//
//	GetPolicyIamPolicyBindingConditionArgs{...}
type GetPolicyIamPolicyBindingConditionInput interface {
	pulumi.Input

	ToGetPolicyIamPolicyBindingConditionOutput() GetPolicyIamPolicyBindingConditionOutput
	ToGetPolicyIamPolicyBindingConditionOutputWithContext(context.Context) GetPolicyIamPolicyBindingConditionOutput
}

type GetPolicyIamPolicyBindingConditionArgs struct {
	// The accessible database full name in instances/{instance resource id}/databases/{database name} format
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
	ExpireTimestamp pulumi.StringPtrInput `pulumi:"expireTimestamp"`
	// The export row limit for exporter role
	RowLimit pulumi.IntPtrInput `pulumi:"rowLimit"`
	// The accessible schema in the database
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// The accessible table list
	Tables pulumi.StringArrayInput `pulumi:"tables"`
}

func (GetPolicyIamPolicyBindingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (i GetPolicyIamPolicyBindingConditionArgs) ToGetPolicyIamPolicyBindingConditionOutput() GetPolicyIamPolicyBindingConditionOutput {
	return i.ToGetPolicyIamPolicyBindingConditionOutputWithContext(context.Background())
}

func (i GetPolicyIamPolicyBindingConditionArgs) ToGetPolicyIamPolicyBindingConditionOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyBindingConditionOutput)
}

// GetPolicyIamPolicyBindingConditionArrayInput is an input type that accepts GetPolicyIamPolicyBindingConditionArray and GetPolicyIamPolicyBindingConditionArrayOutput values.
// You can construct a concrete instance of `GetPolicyIamPolicyBindingConditionArrayInput` via:
//
//	GetPolicyIamPolicyBindingConditionArray{ GetPolicyIamPolicyBindingConditionArgs{...} }
type GetPolicyIamPolicyBindingConditionArrayInput interface {
	pulumi.Input

	ToGetPolicyIamPolicyBindingConditionArrayOutput() GetPolicyIamPolicyBindingConditionArrayOutput
	ToGetPolicyIamPolicyBindingConditionArrayOutputWithContext(context.Context) GetPolicyIamPolicyBindingConditionArrayOutput
}

type GetPolicyIamPolicyBindingConditionArray []GetPolicyIamPolicyBindingConditionInput

func (GetPolicyIamPolicyBindingConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (i GetPolicyIamPolicyBindingConditionArray) ToGetPolicyIamPolicyBindingConditionArrayOutput() GetPolicyIamPolicyBindingConditionArrayOutput {
	return i.ToGetPolicyIamPolicyBindingConditionArrayOutputWithContext(context.Background())
}

func (i GetPolicyIamPolicyBindingConditionArray) ToGetPolicyIamPolicyBindingConditionArrayOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyIamPolicyBindingConditionArrayOutput)
}

type GetPolicyIamPolicyBindingConditionOutput struct{ *pulumi.OutputState }

func (GetPolicyIamPolicyBindingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (o GetPolicyIamPolicyBindingConditionOutput) ToGetPolicyIamPolicyBindingConditionOutput() GetPolicyIamPolicyBindingConditionOutput {
	return o
}

func (o GetPolicyIamPolicyBindingConditionOutput) ToGetPolicyIamPolicyBindingConditionOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingConditionOutput {
	return o
}

// The accessible database full name in instances/{instance resource id}/databases/{database name} format
func (o GetPolicyIamPolicyBindingConditionOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBindingCondition) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
func (o GetPolicyIamPolicyBindingConditionOutput) ExpireTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBindingCondition) *string { return v.ExpireTimestamp }).(pulumi.StringPtrOutput)
}

// The export row limit for exporter role
func (o GetPolicyIamPolicyBindingConditionOutput) RowLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBindingCondition) *int { return v.RowLimit }).(pulumi.IntPtrOutput)
}

// The accessible schema in the database
func (o GetPolicyIamPolicyBindingConditionOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBindingCondition) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The accessible table list
func (o GetPolicyIamPolicyBindingConditionOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyIamPolicyBindingCondition) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type GetPolicyIamPolicyBindingConditionArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyIamPolicyBindingConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyIamPolicyBindingCondition)(nil)).Elem()
}

func (o GetPolicyIamPolicyBindingConditionArrayOutput) ToGetPolicyIamPolicyBindingConditionArrayOutput() GetPolicyIamPolicyBindingConditionArrayOutput {
	return o
}

func (o GetPolicyIamPolicyBindingConditionArrayOutput) ToGetPolicyIamPolicyBindingConditionArrayOutputWithContext(ctx context.Context) GetPolicyIamPolicyBindingConditionArrayOutput {
	return o
}

func (o GetPolicyIamPolicyBindingConditionArrayOutput) Index(i pulumi.IntInput) GetPolicyIamPolicyBindingConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyIamPolicyBindingCondition {
		return vs[0].([]GetPolicyIamPolicyBindingCondition)[vs[1].(int)]
	}).(GetPolicyIamPolicyBindingConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyIamPolicyInput)(nil)).Elem(), PolicyIamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyIamPolicyPtrInput)(nil)).Elem(), PolicyIamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyIamPolicyBindingInput)(nil)).Elem(), PolicyIamPolicyBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyIamPolicyBindingArrayInput)(nil)).Elem(), PolicyIamPolicyBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyIamPolicyBindingConditionInput)(nil)).Elem(), PolicyIamPolicyBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyIamPolicyBindingConditionArrayInput)(nil)).Elem(), PolicyIamPolicyBindingConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyIamPolicyInput)(nil)).Elem(), GetPolicyIamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyIamPolicyPtrInput)(nil)).Elem(), GetPolicyIamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyIamPolicyBindingInput)(nil)).Elem(), GetPolicyIamPolicyBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyIamPolicyBindingArrayInput)(nil)).Elem(), GetPolicyIamPolicyBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyIamPolicyBindingConditionInput)(nil)).Elem(), GetPolicyIamPolicyBindingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyIamPolicyBindingConditionArrayInput)(nil)).Elem(), GetPolicyIamPolicyBindingConditionArray{})
	pulumi.RegisterOutputType(PolicyIamPolicyOutput{})
	pulumi.RegisterOutputType(PolicyIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(PolicyIamPolicyBindingOutput{})
	pulumi.RegisterOutputType(PolicyIamPolicyBindingArrayOutput{})
	pulumi.RegisterOutputType(PolicyIamPolicyBindingConditionOutput{})
	pulumi.RegisterOutputType(PolicyIamPolicyBindingConditionArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyIamPolicyOutput{})
	pulumi.RegisterOutputType(GetPolicyIamPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetPolicyIamPolicyBindingOutput{})
	pulumi.RegisterOutputType(GetPolicyIamPolicyBindingArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyIamPolicyBindingConditionOutput{})
	pulumi.RegisterOutputType(GetPolicyIamPolicyBindingConditionArrayOutput{})
}
