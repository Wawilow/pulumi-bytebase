// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package review

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The review config data source.
func LookupConfig(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*LookupConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConfigResult
	err := ctx.Invoke("bytebase:Review/getConfig:getConfig", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getConfig.
type LookupConfigResult struct {
	// Enable the SQL review config
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The unique resource id for the review config.
	ResourceId string `pulumi:"resourceId"`
	// Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
	Resources []string `pulumi:"resources"`
	// The SQL review rules.
	Rules []GetConfigRule `pulumi:"rules"`
	// The title for the review config.
	Title string `pulumi:"title"`
}

func LookupConfigOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) LookupConfigResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (LookupConfigResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("bytebase:Review/getConfig:getConfig", nil, LookupConfigResultOutput{}, options).(LookupConfigResultOutput), nil
	}).(LookupConfigResultOutput)
}

// A collection of values returned by getConfig.
type LookupConfigResultOutput struct{ *pulumi.OutputState }

func (LookupConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigResult)(nil)).Elem()
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutput() LookupConfigResultOutput {
	return o
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutputWithContext(ctx context.Context) LookupConfigResultOutput {
	return o
}

// Enable the SQL review config
func (o LookupConfigResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConfigResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique resource id for the review config.
func (o LookupConfigResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
func (o LookupConfigResultOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConfigResult) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// The SQL review rules.
func (o LookupConfigResultOutput) Rules() GetConfigRuleArrayOutput {
	return o.ApplyT(func(v LookupConfigResult) []GetConfigRule { return v.Rules }).(GetConfigRuleArrayOutput)
}

// The title for the review config.
func (o LookupConfigResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConfigResultOutput{})
}
