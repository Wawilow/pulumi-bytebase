// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package project

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

var _ = internal.GetEnvOrDefault

type GetListProject struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement bool `pulumi:"allowModifyStatement"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval bool `pulumi:"allowSelfApproval"`
	// Whether to automatically enable backup.
	AutoEnableBackup bool `pulumi:"autoEnableBackup"`
	// Enable auto resolve issue.
	AutoResolveIssue bool `pulumi:"autoResolveIssue"`
	// The databases full name in the resource.
	Databases []string `pulumi:"databases"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle bool `pulumi:"enforceIssueTitle"`
	// The project full name in projects/{resource id} format.
	Name string `pulumi:"name"`
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role <db_owner>" statement.
	PostgresDatabaseTenantMode bool `pulumi:"postgresDatabaseTenantMode"`
	// The project unique resource id.
	ResourceId string `pulumi:"resourceId"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors bool `pulumi:"skipBackupErrors"`
	// The project title.
	Title string `pulumi:"title"`
	// The webhooks in the project.
	Webhooks []GetListProjectWebhook `pulumi:"webhooks"`
}

// GetListProjectInput is an input type that accepts GetListProjectArgs and GetListProjectOutput values.
// You can construct a concrete instance of `GetListProjectInput` via:
//
//	GetListProjectArgs{...}
type GetListProjectInput interface {
	pulumi.Input

	ToGetListProjectOutput() GetListProjectOutput
	ToGetListProjectOutputWithContext(context.Context) GetListProjectOutput
}

type GetListProjectArgs struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement pulumi.BoolInput `pulumi:"allowModifyStatement"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval pulumi.BoolInput `pulumi:"allowSelfApproval"`
	// Whether to automatically enable backup.
	AutoEnableBackup pulumi.BoolInput `pulumi:"autoEnableBackup"`
	// Enable auto resolve issue.
	AutoResolveIssue pulumi.BoolInput `pulumi:"autoResolveIssue"`
	// The databases full name in the resource.
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle pulumi.BoolInput `pulumi:"enforceIssueTitle"`
	// The project full name in projects/{resource id} format.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role <db_owner>" statement.
	PostgresDatabaseTenantMode pulumi.BoolInput `pulumi:"postgresDatabaseTenantMode"`
	// The project unique resource id.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors pulumi.BoolInput `pulumi:"skipBackupErrors"`
	// The project title.
	Title pulumi.StringInput `pulumi:"title"`
	// The webhooks in the project.
	Webhooks GetListProjectWebhookArrayInput `pulumi:"webhooks"`
}

func (GetListProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListProject)(nil)).Elem()
}

func (i GetListProjectArgs) ToGetListProjectOutput() GetListProjectOutput {
	return i.ToGetListProjectOutputWithContext(context.Background())
}

func (i GetListProjectArgs) ToGetListProjectOutputWithContext(ctx context.Context) GetListProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListProjectOutput)
}

// GetListProjectArrayInput is an input type that accepts GetListProjectArray and GetListProjectArrayOutput values.
// You can construct a concrete instance of `GetListProjectArrayInput` via:
//
//	GetListProjectArray{ GetListProjectArgs{...} }
type GetListProjectArrayInput interface {
	pulumi.Input

	ToGetListProjectArrayOutput() GetListProjectArrayOutput
	ToGetListProjectArrayOutputWithContext(context.Context) GetListProjectArrayOutput
}

type GetListProjectArray []GetListProjectInput

func (GetListProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListProject)(nil)).Elem()
}

func (i GetListProjectArray) ToGetListProjectArrayOutput() GetListProjectArrayOutput {
	return i.ToGetListProjectArrayOutputWithContext(context.Background())
}

func (i GetListProjectArray) ToGetListProjectArrayOutputWithContext(ctx context.Context) GetListProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListProjectArrayOutput)
}

type GetListProjectOutput struct{ *pulumi.OutputState }

func (GetListProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListProject)(nil)).Elem()
}

func (o GetListProjectOutput) ToGetListProjectOutput() GetListProjectOutput {
	return o
}

func (o GetListProjectOutput) ToGetListProjectOutputWithContext(ctx context.Context) GetListProjectOutput {
	return o
}

// Allow modifying statement after issue is created.
func (o GetListProjectOutput) AllowModifyStatement() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.AllowModifyStatement }).(pulumi.BoolOutput)
}

// Whether to allow the issue creator to self-approve the issue.
func (o GetListProjectOutput) AllowSelfApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.AllowSelfApproval }).(pulumi.BoolOutput)
}

// Whether to automatically enable backup.
func (o GetListProjectOutput) AutoEnableBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.AutoEnableBackup }).(pulumi.BoolOutput)
}

// Enable auto resolve issue.
func (o GetListProjectOutput) AutoResolveIssue() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.AutoResolveIssue }).(pulumi.BoolOutput)
}

// The databases full name in the resource.
func (o GetListProjectOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListProject) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Enforce issue title created by user instead of generated by Bytebase.
func (o GetListProjectOutput) EnforceIssueTitle() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.EnforceIssueTitle }).(pulumi.BoolOutput)
}

// The project full name in projects/{resource id} format.
func (o GetListProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProject) string { return v.Name }).(pulumi.StringOutput)
}

// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role <db_owner>" statement.
func (o GetListProjectOutput) PostgresDatabaseTenantMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.PostgresDatabaseTenantMode }).(pulumi.BoolOutput)
}

// The project unique resource id.
func (o GetListProjectOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProject) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Whether to skip backup errors and continue the data migration.
func (o GetListProjectOutput) SkipBackupErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListProject) bool { return v.SkipBackupErrors }).(pulumi.BoolOutput)
}

// The project title.
func (o GetListProjectOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProject) string { return v.Title }).(pulumi.StringOutput)
}

// The webhooks in the project.
func (o GetListProjectOutput) Webhooks() GetListProjectWebhookArrayOutput {
	return o.ApplyT(func(v GetListProject) []GetListProjectWebhook { return v.Webhooks }).(GetListProjectWebhookArrayOutput)
}

type GetListProjectArrayOutput struct{ *pulumi.OutputState }

func (GetListProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListProject)(nil)).Elem()
}

func (o GetListProjectArrayOutput) ToGetListProjectArrayOutput() GetListProjectArrayOutput {
	return o
}

func (o GetListProjectArrayOutput) ToGetListProjectArrayOutputWithContext(ctx context.Context) GetListProjectArrayOutput {
	return o
}

func (o GetListProjectArrayOutput) Index(i pulumi.IntInput) GetListProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListProject {
		return vs[0].([]GetListProject)[vs[1].(int)]
	}).(GetListProjectOutput)
}

type GetListProjectWebhook struct {
	// If directMessage is set, the notification is sent directly to the persons and url will be ignored. Require IM integration for this function to work.
	DirectMessage *bool `pulumi:"directMessage"`
	// The webhook full name in projects/{resource id}/webhooks/{id} format.
	Name string `pulumi:"name"`
	// notification_types is the list of activities types that the webhook is interested in. Bytebase will only send notifications to the webhook if the activity type is in the list.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// The webhook title
	Title string `pulumi:"title"`
	// The webhook type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/project_service.proto#L449 for support types.
	Type string `pulumi:"type"`
	// The webhook URL
	Url string `pulumi:"url"`
}

// GetListProjectWebhookInput is an input type that accepts GetListProjectWebhookArgs and GetListProjectWebhookOutput values.
// You can construct a concrete instance of `GetListProjectWebhookInput` via:
//
//	GetListProjectWebhookArgs{...}
type GetListProjectWebhookInput interface {
	pulumi.Input

	ToGetListProjectWebhookOutput() GetListProjectWebhookOutput
	ToGetListProjectWebhookOutputWithContext(context.Context) GetListProjectWebhookOutput
}

type GetListProjectWebhookArgs struct {
	// If directMessage is set, the notification is sent directly to the persons and url will be ignored. Require IM integration for this function to work.
	DirectMessage pulumi.BoolPtrInput `pulumi:"directMessage"`
	// The webhook full name in projects/{resource id}/webhooks/{id} format.
	Name pulumi.StringInput `pulumi:"name"`
	// notification_types is the list of activities types that the webhook is interested in. Bytebase will only send notifications to the webhook if the activity type is in the list.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// The webhook title
	Title pulumi.StringInput `pulumi:"title"`
	// The webhook type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/project_service.proto#L449 for support types.
	Type pulumi.StringInput `pulumi:"type"`
	// The webhook URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetListProjectWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListProjectWebhook)(nil)).Elem()
}

func (i GetListProjectWebhookArgs) ToGetListProjectWebhookOutput() GetListProjectWebhookOutput {
	return i.ToGetListProjectWebhookOutputWithContext(context.Background())
}

func (i GetListProjectWebhookArgs) ToGetListProjectWebhookOutputWithContext(ctx context.Context) GetListProjectWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListProjectWebhookOutput)
}

// GetListProjectWebhookArrayInput is an input type that accepts GetListProjectWebhookArray and GetListProjectWebhookArrayOutput values.
// You can construct a concrete instance of `GetListProjectWebhookArrayInput` via:
//
//	GetListProjectWebhookArray{ GetListProjectWebhookArgs{...} }
type GetListProjectWebhookArrayInput interface {
	pulumi.Input

	ToGetListProjectWebhookArrayOutput() GetListProjectWebhookArrayOutput
	ToGetListProjectWebhookArrayOutputWithContext(context.Context) GetListProjectWebhookArrayOutput
}

type GetListProjectWebhookArray []GetListProjectWebhookInput

func (GetListProjectWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListProjectWebhook)(nil)).Elem()
}

func (i GetListProjectWebhookArray) ToGetListProjectWebhookArrayOutput() GetListProjectWebhookArrayOutput {
	return i.ToGetListProjectWebhookArrayOutputWithContext(context.Background())
}

func (i GetListProjectWebhookArray) ToGetListProjectWebhookArrayOutputWithContext(ctx context.Context) GetListProjectWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListProjectWebhookArrayOutput)
}

type GetListProjectWebhookOutput struct{ *pulumi.OutputState }

func (GetListProjectWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListProjectWebhook)(nil)).Elem()
}

func (o GetListProjectWebhookOutput) ToGetListProjectWebhookOutput() GetListProjectWebhookOutput {
	return o
}

func (o GetListProjectWebhookOutput) ToGetListProjectWebhookOutputWithContext(ctx context.Context) GetListProjectWebhookOutput {
	return o
}

// If directMessage is set, the notification is sent directly to the persons and url will be ignored. Require IM integration for this function to work.
func (o GetListProjectWebhookOutput) DirectMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetListProjectWebhook) *bool { return v.DirectMessage }).(pulumi.BoolPtrOutput)
}

// The webhook full name in projects/{resource id}/webhooks/{id} format.
func (o GetListProjectWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProjectWebhook) string { return v.Name }).(pulumi.StringOutput)
}

// notification_types is the list of activities types that the webhook is interested in. Bytebase will only send notifications to the webhook if the activity type is in the list.
func (o GetListProjectWebhookOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListProjectWebhook) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// The webhook title
func (o GetListProjectWebhookOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProjectWebhook) string { return v.Title }).(pulumi.StringOutput)
}

// The webhook type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/project_service.proto#L449 for support types.
func (o GetListProjectWebhookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProjectWebhook) string { return v.Type }).(pulumi.StringOutput)
}

// The webhook URL
func (o GetListProjectWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetListProjectWebhook) string { return v.Url }).(pulumi.StringOutput)
}

type GetListProjectWebhookArrayOutput struct{ *pulumi.OutputState }

func (GetListProjectWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListProjectWebhook)(nil)).Elem()
}

func (o GetListProjectWebhookArrayOutput) ToGetListProjectWebhookArrayOutput() GetListProjectWebhookArrayOutput {
	return o
}

func (o GetListProjectWebhookArrayOutput) ToGetListProjectWebhookArrayOutputWithContext(ctx context.Context) GetListProjectWebhookArrayOutput {
	return o
}

func (o GetListProjectWebhookArrayOutput) Index(i pulumi.IntInput) GetListProjectWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListProjectWebhook {
		return vs[0].([]GetListProjectWebhook)[vs[1].(int)]
	}).(GetListProjectWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetListProjectInput)(nil)).Elem(), GetListProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListProjectArrayInput)(nil)).Elem(), GetListProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListProjectWebhookInput)(nil)).Elem(), GetListProjectWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListProjectWebhookArrayInput)(nil)).Elem(), GetListProjectWebhookArray{})
	pulumi.RegisterOutputType(GetListProjectOutput{})
	pulumi.RegisterOutputType(GetListProjectArrayOutput{})
	pulumi.RegisterOutputType(GetListProjectWebhookOutput{})
	pulumi.RegisterOutputType(GetListProjectWebhookArrayOutput{})
}
