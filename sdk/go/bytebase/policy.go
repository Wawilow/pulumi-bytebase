// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The policy resource.
type Policy struct {
	pulumi.CustomResourceState

	// Restrict querying admin data sources
	DataSourceQueryPolicy PolicyDataSourceQueryPolicyPtrOutput `pulumi:"dataSourceQueryPolicy"`
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy PolicyDisableCopyDataPolicyPtrOutput `pulumi:"disableCopyDataPolicy"`
	// Decide if the policy is enforced.
	Enforce             pulumi.BoolPtrOutput               `pulumi:"enforce"`
	GlobalMaskingPolicy PolicyGlobalMaskingPolicyPtrOutput `pulumi:"globalMaskingPolicy"`
	// Decide if the policy should inherit from the parent.
	InheritFromParent      pulumi.BoolPtrOutput                  `pulumi:"inheritFromParent"`
	MaskingExceptionPolicy PolicyMaskingExceptionPolicyPtrOutput `pulumi:"maskingExceptionPolicy"`
	// The policy full name
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent pulumi.StringOutput `pulumi:"parent"`
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy PolicyRolloutPolicyPtrOutput `pulumi:"rolloutPolicy"`
	// The policy type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("bytebase:index/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("bytebase:index/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy *PolicyDataSourceQueryPolicy `pulumi:"dataSourceQueryPolicy"`
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy *PolicyDisableCopyDataPolicy `pulumi:"disableCopyDataPolicy"`
	// Decide if the policy is enforced.
	Enforce             *bool                      `pulumi:"enforce"`
	GlobalMaskingPolicy *PolicyGlobalMaskingPolicy `pulumi:"globalMaskingPolicy"`
	// Decide if the policy should inherit from the parent.
	InheritFromParent      *bool                         `pulumi:"inheritFromParent"`
	MaskingExceptionPolicy *PolicyMaskingExceptionPolicy `pulumi:"maskingExceptionPolicy"`
	// The policy full name
	Name *string `pulumi:"name"`
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent *string `pulumi:"parent"`
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy *PolicyRolloutPolicy `pulumi:"rolloutPolicy"`
	// The policy type.
	Type *string `pulumi:"type"`
}

type PolicyState struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy PolicyDataSourceQueryPolicyPtrInput
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy PolicyDisableCopyDataPolicyPtrInput
	// Decide if the policy is enforced.
	Enforce             pulumi.BoolPtrInput
	GlobalMaskingPolicy PolicyGlobalMaskingPolicyPtrInput
	// Decide if the policy should inherit from the parent.
	InheritFromParent      pulumi.BoolPtrInput
	MaskingExceptionPolicy PolicyMaskingExceptionPolicyPtrInput
	// The policy full name
	Name pulumi.StringPtrInput
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent pulumi.StringPtrInput
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy PolicyRolloutPolicyPtrInput
	// The policy type.
	Type pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy *PolicyDataSourceQueryPolicy `pulumi:"dataSourceQueryPolicy"`
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy *PolicyDisableCopyDataPolicy `pulumi:"disableCopyDataPolicy"`
	// Decide if the policy is enforced.
	Enforce             *bool                      `pulumi:"enforce"`
	GlobalMaskingPolicy *PolicyGlobalMaskingPolicy `pulumi:"globalMaskingPolicy"`
	// Decide if the policy should inherit from the parent.
	InheritFromParent      *bool                         `pulumi:"inheritFromParent"`
	MaskingExceptionPolicy *PolicyMaskingExceptionPolicy `pulumi:"maskingExceptionPolicy"`
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent string `pulumi:"parent"`
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy *PolicyRolloutPolicy `pulumi:"rolloutPolicy"`
	// The policy type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy PolicyDataSourceQueryPolicyPtrInput
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy PolicyDisableCopyDataPolicyPtrInput
	// Decide if the policy is enforced.
	Enforce             pulumi.BoolPtrInput
	GlobalMaskingPolicy PolicyGlobalMaskingPolicyPtrInput
	// Decide if the policy should inherit from the parent.
	InheritFromParent      pulumi.BoolPtrInput
	MaskingExceptionPolicy PolicyMaskingExceptionPolicyPtrInput
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent pulumi.StringInput
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy PolicyRolloutPolicyPtrInput
	// The policy type.
	Type pulumi.StringInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// Restrict querying admin data sources
func (o PolicyOutput) DataSourceQueryPolicy() PolicyDataSourceQueryPolicyPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyDataSourceQueryPolicyPtrOutput { return v.DataSourceQueryPolicy }).(PolicyDataSourceQueryPolicyPtrOutput)
}

// Restrict data copying in SQL Editor (Admins/DBAs allowed)
func (o PolicyOutput) DisableCopyDataPolicy() PolicyDisableCopyDataPolicyPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyDisableCopyDataPolicyPtrOutput { return v.DisableCopyDataPolicy }).(PolicyDisableCopyDataPolicyPtrOutput)
}

// Decide if the policy is enforced.
func (o PolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

func (o PolicyOutput) GlobalMaskingPolicy() PolicyGlobalMaskingPolicyPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyGlobalMaskingPolicyPtrOutput { return v.GlobalMaskingPolicy }).(PolicyGlobalMaskingPolicyPtrOutput)
}

// Decide if the policy should inherit from the parent.
func (o PolicyOutput) InheritFromParent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.InheritFromParent }).(pulumi.BoolPtrOutput)
}

func (o PolicyOutput) MaskingExceptionPolicy() PolicyMaskingExceptionPolicyPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyMaskingExceptionPolicyPtrOutput { return v.MaskingExceptionPolicy }).(PolicyMaskingExceptionPolicyPtrOutput)
}

// The policy full name
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
func (o PolicyOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Parent }).(pulumi.StringOutput)
}

// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
func (o PolicyOutput) RolloutPolicy() PolicyRolloutPolicyPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyRolloutPolicyPtrOutput { return v.RolloutPolicy }).(PolicyRolloutPolicyPtrOutput)
}

// The policy type.
func (o PolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
