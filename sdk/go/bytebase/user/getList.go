// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The user data source list.
func GetList(ctx *pulumi.Context, args *GetListArgs, opts ...pulumi.InvokeOption) (*GetListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetListResult
	err := ctx.Invoke("bytebase:User/getList:getList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getList.
type GetListArgs struct {
	// Filter users by email with wildcard
	Email *string `pulumi:"email"`
	// Filter users by name with wildcard
	Name *string `pulumi:"name"`
	// The project full name. Filter users by project.
	Project *string `pulumi:"project"`
	// Filter users by state. Default ACTIVE.
	State *string `pulumi:"state"`
	// Filter users by types.
	UserTypes []string `pulumi:"userTypes"`
}

// A collection of values returned by getList.
type GetListResult struct {
	// Filter users by email with wildcard
	Email *string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Filter users by name with wildcard
	Name *string `pulumi:"name"`
	// The project full name. Filter users by project.
	Project *string `pulumi:"project"`
	// Filter users by state. Default ACTIVE.
	State *string `pulumi:"state"`
	// Filter users by types.
	UserTypes []string      `pulumi:"userTypes"`
	Users     []GetListUser `pulumi:"users"`
}

func GetListOutput(ctx *pulumi.Context, args GetListOutputArgs, opts ...pulumi.InvokeOption) GetListResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetListResultOutput, error) {
			args := v.(GetListArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:User/getList:getList", args, GetListResultOutput{}, options).(GetListResultOutput), nil
		}).(GetListResultOutput)
}

// A collection of arguments for invoking getList.
type GetListOutputArgs struct {
	// Filter users by email with wildcard
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Filter users by name with wildcard
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The project full name. Filter users by project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Filter users by state. Default ACTIVE.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Filter users by types.
	UserTypes pulumi.StringArrayInput `pulumi:"userTypes"`
}

func (GetListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListArgs)(nil)).Elem()
}

// A collection of values returned by getList.
type GetListResultOutput struct{ *pulumi.OutputState }

func (GetListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListResult)(nil)).Elem()
}

func (o GetListResultOutput) ToGetListResultOutput() GetListResultOutput {
	return o
}

func (o GetListResultOutput) ToGetListResultOutputWithContext(ctx context.Context) GetListResultOutput {
	return o
}

// Filter users by email with wildcard
func (o GetListResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListResult) string { return v.Id }).(pulumi.StringOutput)
}

// Filter users by name with wildcard
func (o GetListResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The project full name. Filter users by project.
func (o GetListResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Filter users by state. Default ACTIVE.
func (o GetListResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Filter users by types.
func (o GetListResultOutput) UserTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListResult) []string { return v.UserTypes }).(pulumi.StringArrayOutput)
}

func (o GetListResultOutput) Users() GetListUserArrayOutput {
	return o.ApplyT(func(v GetListResult) []GetListUser { return v.Users }).(GetListUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetListResultOutput{})
}
