// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The user resource.
type User struct {
	pulumi.CustomResourceState

	// The user email.
	Email pulumi.StringOutput `pulumi:"email"`
	// The user last change password time.
	LastChangePasswordTime pulumi.StringOutput `pulumi:"lastChangePasswordTime"`
	// The user last login time.
	LastLoginTime pulumi.StringOutput `pulumi:"lastLoginTime"`
	// The mfaEnabled flag means if the user has enabled MFA.
	MfaEnabled pulumi.BoolOutput `pulumi:"mfaEnabled"`
	// The user name in users/{user id or email} format.
	Name pulumi.StringOutput `pulumi:"name"`
	// The user login password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The user phone.
	Phone pulumi.StringOutput `pulumi:"phone"`
	// The service key for service account.
	ServiceKey pulumi.StringOutput `pulumi:"serviceKey"`
	// Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
	Source pulumi.StringOutput `pulumi:"source"`
	// The user is deleted or not.
	State pulumi.StringOutput `pulumi:"state"`
	// The user title.
	Title pulumi.StringOutput `pulumi:"title"`
	// The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("bytebase:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("bytebase:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The user email.
	Email *string `pulumi:"email"`
	// The user last change password time.
	LastChangePasswordTime *string `pulumi:"lastChangePasswordTime"`
	// The user last login time.
	LastLoginTime *string `pulumi:"lastLoginTime"`
	// The mfaEnabled flag means if the user has enabled MFA.
	MfaEnabled *bool `pulumi:"mfaEnabled"`
	// The user name in users/{user id or email} format.
	Name *string `pulumi:"name"`
	// The user login password.
	Password *string `pulumi:"password"`
	// The user phone.
	Phone *string `pulumi:"phone"`
	// The service key for service account.
	ServiceKey *string `pulumi:"serviceKey"`
	// Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
	Source *string `pulumi:"source"`
	// The user is deleted or not.
	State *string `pulumi:"state"`
	// The user title.
	Title *string `pulumi:"title"`
	// The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
	Type *string `pulumi:"type"`
}

type UserState struct {
	// The user email.
	Email pulumi.StringPtrInput
	// The user last change password time.
	LastChangePasswordTime pulumi.StringPtrInput
	// The user last login time.
	LastLoginTime pulumi.StringPtrInput
	// The mfaEnabled flag means if the user has enabled MFA.
	MfaEnabled pulumi.BoolPtrInput
	// The user name in users/{user id or email} format.
	Name pulumi.StringPtrInput
	// The user login password.
	Password pulumi.StringPtrInput
	// The user phone.
	Phone pulumi.StringPtrInput
	// The service key for service account.
	ServiceKey pulumi.StringPtrInput
	// Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
	Source pulumi.StringPtrInput
	// The user is deleted or not.
	State pulumi.StringPtrInput
	// The user title.
	Title pulumi.StringPtrInput
	// The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
	Type pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The user email.
	Email string `pulumi:"email"`
	// The user login password.
	Password *string `pulumi:"password"`
	// The user phone.
	Phone *string `pulumi:"phone"`
	// The user title.
	Title string `pulumi:"title"`
	// The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The user email.
	Email pulumi.StringInput
	// The user login password.
	Password pulumi.StringPtrInput
	// The user phone.
	Phone pulumi.StringPtrInput
	// The user title.
	Title pulumi.StringInput
	// The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
	Type pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// The user email.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The user last change password time.
func (o UserOutput) LastChangePasswordTime() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastChangePasswordTime }).(pulumi.StringOutput)
}

// The user last login time.
func (o UserOutput) LastLoginTime() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastLoginTime }).(pulumi.StringOutput)
}

// The mfaEnabled flag means if the user has enabled MFA.
func (o UserOutput) MfaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.MfaEnabled }).(pulumi.BoolOutput)
}

// The user name in users/{user id or email} format.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The user login password.
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The user phone.
func (o UserOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Phone }).(pulumi.StringOutput)
}

// The service key for service account.
func (o UserOutput) ServiceKey() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.ServiceKey }).(pulumi.StringOutput)
}

// Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
func (o UserOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The user is deleted or not.
func (o UserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The user title.
func (o UserOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
func (o UserOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
