// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

type Risk struct {
	pulumi.CustomResourceState

	// If the risk is active.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
	Condition pulumi.StringOutput `pulumi:"condition"`
	// The risk level, should be 300, 200 or 100. Higher number means higher level.
	Level pulumi.IntOutput `pulumi:"level"`
	// The risk full name in risks/{uid} format.
	Name pulumi.StringOutput `pulumi:"name"`
	// The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
	Source pulumi.StringOutput `pulumi:"source"`
	// The risk title.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewRisk registers a new resource with the given unique name, arguments, and options.
func NewRisk(ctx *pulumi.Context,
	name string, args *RiskArgs, opts ...pulumi.ResourceOption) (*Risk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.Level == nil {
		return nil, errors.New("invalid value for required argument 'Level'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Risk
	err := ctx.RegisterResource("bytebase:index/risk:Risk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRisk gets an existing Risk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RiskState, opts ...pulumi.ResourceOption) (*Risk, error) {
	var resource Risk
	err := ctx.ReadResource("bytebase:index/risk:Risk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Risk resources.
type riskState struct {
	// If the risk is active.
	Active *bool `pulumi:"active"`
	// The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
	Condition *string `pulumi:"condition"`
	// The risk level, should be 300, 200 or 100. Higher number means higher level.
	Level *int `pulumi:"level"`
	// The risk full name in risks/{uid} format.
	Name *string `pulumi:"name"`
	// The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
	Source *string `pulumi:"source"`
	// The risk title.
	Title *string `pulumi:"title"`
}

type RiskState struct {
	// If the risk is active.
	Active pulumi.BoolPtrInput
	// The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
	Condition pulumi.StringPtrInput
	// The risk level, should be 300, 200 or 100. Higher number means higher level.
	Level pulumi.IntPtrInput
	// The risk full name in risks/{uid} format.
	Name pulumi.StringPtrInput
	// The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
	Source pulumi.StringPtrInput
	// The risk title.
	Title pulumi.StringPtrInput
}

func (RiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*riskState)(nil)).Elem()
}

type riskArgs struct {
	// If the risk is active.
	Active *bool `pulumi:"active"`
	// The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
	Condition string `pulumi:"condition"`
	// The risk level, should be 300, 200 or 100. Higher number means higher level.
	Level int `pulumi:"level"`
	// The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
	Source string `pulumi:"source"`
	// The risk title.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a Risk resource.
type RiskArgs struct {
	// If the risk is active.
	Active pulumi.BoolPtrInput
	// The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
	Condition pulumi.StringInput
	// The risk level, should be 300, 200 or 100. Higher number means higher level.
	Level pulumi.IntInput
	// The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
	Source pulumi.StringInput
	// The risk title.
	Title pulumi.StringInput
}

func (RiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*riskArgs)(nil)).Elem()
}

type RiskInput interface {
	pulumi.Input

	ToRiskOutput() RiskOutput
	ToRiskOutputWithContext(ctx context.Context) RiskOutput
}

func (*Risk) ElementType() reflect.Type {
	return reflect.TypeOf((**Risk)(nil)).Elem()
}

func (i *Risk) ToRiskOutput() RiskOutput {
	return i.ToRiskOutputWithContext(context.Background())
}

func (i *Risk) ToRiskOutputWithContext(ctx context.Context) RiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskOutput)
}

// RiskArrayInput is an input type that accepts RiskArray and RiskArrayOutput values.
// You can construct a concrete instance of `RiskArrayInput` via:
//
//	RiskArray{ RiskArgs{...} }
type RiskArrayInput interface {
	pulumi.Input

	ToRiskArrayOutput() RiskArrayOutput
	ToRiskArrayOutputWithContext(context.Context) RiskArrayOutput
}

type RiskArray []RiskInput

func (RiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Risk)(nil)).Elem()
}

func (i RiskArray) ToRiskArrayOutput() RiskArrayOutput {
	return i.ToRiskArrayOutputWithContext(context.Background())
}

func (i RiskArray) ToRiskArrayOutputWithContext(ctx context.Context) RiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskArrayOutput)
}

// RiskMapInput is an input type that accepts RiskMap and RiskMapOutput values.
// You can construct a concrete instance of `RiskMapInput` via:
//
//	RiskMap{ "key": RiskArgs{...} }
type RiskMapInput interface {
	pulumi.Input

	ToRiskMapOutput() RiskMapOutput
	ToRiskMapOutputWithContext(context.Context) RiskMapOutput
}

type RiskMap map[string]RiskInput

func (RiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Risk)(nil)).Elem()
}

func (i RiskMap) ToRiskMapOutput() RiskMapOutput {
	return i.ToRiskMapOutputWithContext(context.Background())
}

func (i RiskMap) ToRiskMapOutputWithContext(ctx context.Context) RiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskMapOutput)
}

type RiskOutput struct{ *pulumi.OutputState }

func (RiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Risk)(nil)).Elem()
}

func (o RiskOutput) ToRiskOutput() RiskOutput {
	return o
}

func (o RiskOutput) ToRiskOutputWithContext(ctx context.Context) RiskOutput {
	return o
}

// If the risk is active.
func (o RiskOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Risk) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
func (o RiskOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v *Risk) pulumi.StringOutput { return v.Condition }).(pulumi.StringOutput)
}

// The risk level, should be 300, 200 or 100. Higher number means higher level.
func (o RiskOutput) Level() pulumi.IntOutput {
	return o.ApplyT(func(v *Risk) pulumi.IntOutput { return v.Level }).(pulumi.IntOutput)
}

// The risk full name in risks/{uid} format.
func (o RiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Risk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
func (o RiskOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Risk) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The risk title.
func (o RiskOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Risk) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type RiskArrayOutput struct{ *pulumi.OutputState }

func (RiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Risk)(nil)).Elem()
}

func (o RiskArrayOutput) ToRiskArrayOutput() RiskArrayOutput {
	return o
}

func (o RiskArrayOutput) ToRiskArrayOutputWithContext(ctx context.Context) RiskArrayOutput {
	return o
}

func (o RiskArrayOutput) Index(i pulumi.IntInput) RiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Risk {
		return vs[0].([]*Risk)[vs[1].(int)]
	}).(RiskOutput)
}

type RiskMapOutput struct{ *pulumi.OutputState }

func (RiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Risk)(nil)).Elem()
}

func (o RiskMapOutput) ToRiskMapOutput() RiskMapOutput {
	return o
}

func (o RiskMapOutput) ToRiskMapOutputWithContext(ctx context.Context) RiskMapOutput {
	return o
}

func (o RiskMapOutput) MapIndex(k pulumi.StringInput) RiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Risk {
		return vs[0].(map[string]*Risk)[vs[1].(string)]
	}).(RiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RiskInput)(nil)).Elem(), &Risk{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskArrayInput)(nil)).Elem(), RiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskMapInput)(nil)).Elem(), RiskMap{})
	pulumi.RegisterOutputType(RiskOutput{})
	pulumi.RegisterOutputType(RiskArrayOutput{})
	pulumi.RegisterOutputType(RiskMapOutput{})
}
