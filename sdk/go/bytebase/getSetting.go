// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The setting data source.
func LookupSetting(ctx *pulumi.Context, args *LookupSettingArgs, opts ...pulumi.InvokeOption) (*LookupSettingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSettingResult
	err := ctx.Invoke("bytebase:index/getSetting:getSetting", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSetting.
type LookupSettingArgs struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows []GetSettingApprovalFlow `pulumi:"approvalFlows"`
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification *GetSettingClassification `pulumi:"classification"`
	// The environment
	EnvironmentSettings []GetSettingEnvironmentSetting `pulumi:"environmentSettings"`
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name string `pulumi:"name"`
	// Restrict for login password
	PasswordRestriction *GetSettingPasswordRestriction `pulumi:"passwordRestriction"`
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes []GetSettingSemanticType `pulumi:"semanticTypes"`
	// Restrict for SQL query result
	SqlQueryRestriction *GetSettingSqlQueryRestriction `pulumi:"sqlQueryRestriction"`
	WorkspaceProfile    *GetSettingWorkspaceProfile    `pulumi:"workspaceProfile"`
}

// A collection of values returned by getSetting.
type LookupSettingResult struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows []GetSettingApprovalFlow `pulumi:"approvalFlows"`
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification GetSettingClassification `pulumi:"classification"`
	// The environment
	EnvironmentSettings []GetSettingEnvironmentSetting `pulumi:"environmentSettings"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name string `pulumi:"name"`
	// Restrict for login password
	PasswordRestriction GetSettingPasswordRestriction `pulumi:"passwordRestriction"`
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes []GetSettingSemanticType `pulumi:"semanticTypes"`
	// Restrict for SQL query result
	SqlQueryRestriction GetSettingSqlQueryRestriction `pulumi:"sqlQueryRestriction"`
	WorkspaceProfile    GetSettingWorkspaceProfile    `pulumi:"workspaceProfile"`
}

func LookupSettingOutput(ctx *pulumi.Context, args LookupSettingOutputArgs, opts ...pulumi.InvokeOption) LookupSettingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSettingResultOutput, error) {
			args := v.(LookupSettingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:index/getSetting:getSetting", args, LookupSettingResultOutput{}, options).(LookupSettingResultOutput), nil
		}).(LookupSettingResultOutput)
}

// A collection of arguments for invoking getSetting.
type LookupSettingOutputArgs struct {
	// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
	ApprovalFlows GetSettingApprovalFlowArrayInput `pulumi:"approvalFlows"`
	// Classification for data masking. Require ENTERPRISE subscription.
	Classification GetSettingClassificationPtrInput `pulumi:"classification"`
	// The environment
	EnvironmentSettings GetSettingEnvironmentSettingArrayInput `pulumi:"environmentSettings"`
	// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
	Name pulumi.StringInput `pulumi:"name"`
	// Restrict for login password
	PasswordRestriction GetSettingPasswordRestrictionPtrInput `pulumi:"passwordRestriction"`
	// Semantic types for data masking. Require ENTERPRISE subscription.
	SemanticTypes GetSettingSemanticTypeArrayInput `pulumi:"semanticTypes"`
	// Restrict for SQL query result
	SqlQueryRestriction GetSettingSqlQueryRestrictionPtrInput `pulumi:"sqlQueryRestriction"`
	WorkspaceProfile    GetSettingWorkspaceProfilePtrInput    `pulumi:"workspaceProfile"`
}

func (LookupSettingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSettingArgs)(nil)).Elem()
}

// A collection of values returned by getSetting.
type LookupSettingResultOutput struct{ *pulumi.OutputState }

func (LookupSettingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSettingResult)(nil)).Elem()
}

func (o LookupSettingResultOutput) ToLookupSettingResultOutput() LookupSettingResultOutput {
	return o
}

func (o LookupSettingResultOutput) ToLookupSettingResultOutputWithContext(ctx context.Context) LookupSettingResultOutput {
	return o
}

// Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
func (o LookupSettingResultOutput) ApprovalFlows() GetSettingApprovalFlowArrayOutput {
	return o.ApplyT(func(v LookupSettingResult) []GetSettingApprovalFlow { return v.ApprovalFlows }).(GetSettingApprovalFlowArrayOutput)
}

// Classification for data masking. Require ENTERPRISE subscription.
func (o LookupSettingResultOutput) Classification() GetSettingClassificationOutput {
	return o.ApplyT(func(v LookupSettingResult) GetSettingClassification { return v.Classification }).(GetSettingClassificationOutput)
}

// The environment
func (o LookupSettingResultOutput) EnvironmentSettings() GetSettingEnvironmentSettingArrayOutput {
	return o.ApplyT(func(v LookupSettingResult) []GetSettingEnvironmentSetting { return v.EnvironmentSettings }).(GetSettingEnvironmentSettingArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSettingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingResult) string { return v.Id }).(pulumi.StringOutput)
}

// The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
func (o LookupSettingResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingResult) string { return v.Name }).(pulumi.StringOutput)
}

// Restrict for login password
func (o LookupSettingResultOutput) PasswordRestriction() GetSettingPasswordRestrictionOutput {
	return o.ApplyT(func(v LookupSettingResult) GetSettingPasswordRestriction { return v.PasswordRestriction }).(GetSettingPasswordRestrictionOutput)
}

// Semantic types for data masking. Require ENTERPRISE subscription.
func (o LookupSettingResultOutput) SemanticTypes() GetSettingSemanticTypeArrayOutput {
	return o.ApplyT(func(v LookupSettingResult) []GetSettingSemanticType { return v.SemanticTypes }).(GetSettingSemanticTypeArrayOutput)
}

// Restrict for SQL query result
func (o LookupSettingResultOutput) SqlQueryRestriction() GetSettingSqlQueryRestrictionOutput {
	return o.ApplyT(func(v LookupSettingResult) GetSettingSqlQueryRestriction { return v.SqlQueryRestriction }).(GetSettingSqlQueryRestrictionOutput)
}

func (o LookupSettingResultOutput) WorkspaceProfile() GetSettingWorkspaceProfileOutput {
	return o.ApplyT(func(v LookupSettingResult) GetSettingWorkspaceProfile { return v.WorkspaceProfile }).(GetSettingWorkspaceProfileOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSettingResultOutput{})
}
