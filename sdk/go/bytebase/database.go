// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The database resource.
type Database struct {
	pulumi.CustomResourceState

	// The databases catalog.
	Catalog DatabaseCatalogOutput `pulumi:"catalog"`
	// The database environment, will follow the instance environment by default
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The deployment and policy control labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The database full name in instances/{instance}/databases/{database} format
	Name pulumi.StringOutput `pulumi:"name"`
	// The project full name for the database in projects/{project} format.
	Project pulumi.StringOutput `pulumi:"project"`
	// The version of database schema.
	SchemaVersion pulumi.StringOutput `pulumi:"schemaVersion"`
	// The existence of a database.
	State pulumi.StringOutput `pulumi:"state"`
	// The latest synchronization time.
	SuccessfulSyncTime pulumi.StringOutput `pulumi:"successfulSyncTime"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("bytebase:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("bytebase:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// The databases catalog.
	Catalog *DatabaseCatalog `pulumi:"catalog"`
	// The database environment, will follow the instance environment by default
	Environment *string `pulumi:"environment"`
	// The deployment and policy control labels.
	Labels map[string]string `pulumi:"labels"`
	// The database full name in instances/{instance}/databases/{database} format
	Name *string `pulumi:"name"`
	// The project full name for the database in projects/{project} format.
	Project *string `pulumi:"project"`
	// The version of database schema.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The existence of a database.
	State *string `pulumi:"state"`
	// The latest synchronization time.
	SuccessfulSyncTime *string `pulumi:"successfulSyncTime"`
}

type DatabaseState struct {
	// The databases catalog.
	Catalog DatabaseCatalogPtrInput
	// The database environment, will follow the instance environment by default
	Environment pulumi.StringPtrInput
	// The deployment and policy control labels.
	Labels pulumi.StringMapInput
	// The database full name in instances/{instance}/databases/{database} format
	Name pulumi.StringPtrInput
	// The project full name for the database in projects/{project} format.
	Project pulumi.StringPtrInput
	// The version of database schema.
	SchemaVersion pulumi.StringPtrInput
	// The existence of a database.
	State pulumi.StringPtrInput
	// The latest synchronization time.
	SuccessfulSyncTime pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// The databases catalog.
	Catalog *DatabaseCatalog `pulumi:"catalog"`
	// The database environment, will follow the instance environment by default
	Environment *string `pulumi:"environment"`
	// The deployment and policy control labels.
	Labels map[string]string `pulumi:"labels"`
	// The database full name in instances/{instance}/databases/{database} format
	Name *string `pulumi:"name"`
	// The project full name for the database in projects/{project} format.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// The databases catalog.
	Catalog DatabaseCatalogPtrInput
	// The database environment, will follow the instance environment by default
	Environment pulumi.StringPtrInput
	// The deployment and policy control labels.
	Labels pulumi.StringMapInput
	// The database full name in instances/{instance}/databases/{database} format
	Name pulumi.StringPtrInput
	// The project full name for the database in projects/{project} format.
	Project pulumi.StringInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// The databases catalog.
func (o DatabaseOutput) Catalog() DatabaseCatalogOutput {
	return o.ApplyT(func(v *Database) DatabaseCatalogOutput { return v.Catalog }).(DatabaseCatalogOutput)
}

// The database environment, will follow the instance environment by default
func (o DatabaseOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The deployment and policy control labels.
func (o DatabaseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Database) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The database full name in instances/{instance}/databases/{database} format
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project full name for the database in projects/{project} format.
func (o DatabaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The version of database schema.
func (o DatabaseOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The existence of a database.
func (o DatabaseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The latest synchronization time.
func (o DatabaseOutput) SuccessfulSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.SuccessfulSyncTime }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
