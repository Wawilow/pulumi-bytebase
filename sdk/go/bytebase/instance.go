// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The instance resource.
type Instance struct {
	pulumi.CustomResourceState

	// Whether assign license for this instance or not.
	Activation pulumi.BoolOutput `pulumi:"activation"`
	// The connection for the instance. You can configure read-only or admin connection account here.
	DataSources InstanceDataSourceArrayOutput `pulumi:"dataSources"`
	// The databases full name in the resource.
	Databases pulumi.StringArrayOutput `pulumi:"databases"`
	// The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The engine version.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The environment full name for the instance in environments/{environment id} format.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
	ExternalLink pulumi.StringOutput `pulumi:"externalLink"`
	// List all databases in this instance. If false, will only list 500 databases.
	ListAllDatabases pulumi.BoolPtrOutput `pulumi:"listAllDatabases"`
	// The maximum number of connections.
	MaximumConnections pulumi.IntOutput `pulumi:"maximumConnections"`
	// The instance full name in instances/{resource id} format.
	Name pulumi.StringOutput `pulumi:"name"`
	// The instance unique resource id.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// How often the instance is synced in seconds. Default 0, means never sync.
	SyncInterval pulumi.IntOutput `pulumi:"syncInterval"`
	// The instance title.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSources == nil {
		return nil, errors.New("invalid value for required argument 'DataSources'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("bytebase:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("bytebase:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Whether assign license for this instance or not.
	Activation *bool `pulumi:"activation"`
	// The connection for the instance. You can configure read-only or admin connection account here.
	DataSources []InstanceDataSource `pulumi:"dataSources"`
	// The databases full name in the resource.
	Databases []string `pulumi:"databases"`
	// The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
	Engine *string `pulumi:"engine"`
	// The engine version.
	EngineVersion *string `pulumi:"engineVersion"`
	// The environment full name for the instance in environments/{environment id} format.
	Environment *string `pulumi:"environment"`
	// The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
	ExternalLink *string `pulumi:"externalLink"`
	// List all databases in this instance. If false, will only list 500 databases.
	ListAllDatabases *bool `pulumi:"listAllDatabases"`
	// The maximum number of connections.
	MaximumConnections *int `pulumi:"maximumConnections"`
	// The instance full name in instances/{resource id} format.
	Name *string `pulumi:"name"`
	// The instance unique resource id.
	ResourceId *string `pulumi:"resourceId"`
	// How often the instance is synced in seconds. Default 0, means never sync.
	SyncInterval *int `pulumi:"syncInterval"`
	// The instance title.
	Title *string `pulumi:"title"`
}

type InstanceState struct {
	// Whether assign license for this instance or not.
	Activation pulumi.BoolPtrInput
	// The connection for the instance. You can configure read-only or admin connection account here.
	DataSources InstanceDataSourceArrayInput
	// The databases full name in the resource.
	Databases pulumi.StringArrayInput
	// The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
	Engine pulumi.StringPtrInput
	// The engine version.
	EngineVersion pulumi.StringPtrInput
	// The environment full name for the instance in environments/{environment id} format.
	Environment pulumi.StringPtrInput
	// The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
	ExternalLink pulumi.StringPtrInput
	// List all databases in this instance. If false, will only list 500 databases.
	ListAllDatabases pulumi.BoolPtrInput
	// The maximum number of connections.
	MaximumConnections pulumi.IntPtrInput
	// The instance full name in instances/{resource id} format.
	Name pulumi.StringPtrInput
	// The instance unique resource id.
	ResourceId pulumi.StringPtrInput
	// How often the instance is synced in seconds. Default 0, means never sync.
	SyncInterval pulumi.IntPtrInput
	// The instance title.
	Title pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Whether assign license for this instance or not.
	Activation *bool `pulumi:"activation"`
	// The connection for the instance. You can configure read-only or admin connection account here.
	DataSources []InstanceDataSource `pulumi:"dataSources"`
	// The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
	Engine string `pulumi:"engine"`
	// The environment full name for the instance in environments/{environment id} format.
	Environment string `pulumi:"environment"`
	// The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
	ExternalLink *string `pulumi:"externalLink"`
	// List all databases in this instance. If false, will only list 500 databases.
	ListAllDatabases *bool `pulumi:"listAllDatabases"`
	// The maximum number of connections.
	MaximumConnections *int `pulumi:"maximumConnections"`
	// The instance unique resource id.
	ResourceId string `pulumi:"resourceId"`
	// How often the instance is synced in seconds. Default 0, means never sync.
	SyncInterval *int `pulumi:"syncInterval"`
	// The instance title.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Whether assign license for this instance or not.
	Activation pulumi.BoolPtrInput
	// The connection for the instance. You can configure read-only or admin connection account here.
	DataSources InstanceDataSourceArrayInput
	// The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
	Engine pulumi.StringInput
	// The environment full name for the instance in environments/{environment id} format.
	Environment pulumi.StringInput
	// The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
	ExternalLink pulumi.StringPtrInput
	// List all databases in this instance. If false, will only list 500 databases.
	ListAllDatabases pulumi.BoolPtrInput
	// The maximum number of connections.
	MaximumConnections pulumi.IntPtrInput
	// The instance unique resource id.
	ResourceId pulumi.StringInput
	// How often the instance is synced in seconds. Default 0, means never sync.
	SyncInterval pulumi.IntPtrInput
	// The instance title.
	Title pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Whether assign license for this instance or not.
func (o InstanceOutput) Activation() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.Activation }).(pulumi.BoolOutput)
}

// The connection for the instance. You can configure read-only or admin connection account here.
func (o InstanceOutput) DataSources() InstanceDataSourceArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceDataSourceArrayOutput { return v.DataSources }).(InstanceDataSourceArrayOutput)
}

// The databases full name in the resource.
func (o InstanceOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.Databases }).(pulumi.StringArrayOutput)
}

// The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
func (o InstanceOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The engine version.
func (o InstanceOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// The environment full name for the instance in environments/{environment id} format.
func (o InstanceOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
func (o InstanceOutput) ExternalLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ExternalLink }).(pulumi.StringOutput)
}

// List all databases in this instance. If false, will only list 500 databases.
func (o InstanceOutput) ListAllDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.ListAllDatabases }).(pulumi.BoolPtrOutput)
}

// The maximum number of connections.
func (o InstanceOutput) MaximumConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.MaximumConnections }).(pulumi.IntOutput)
}

// The instance full name in instances/{resource id} format.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The instance unique resource id.
func (o InstanceOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// How often the instance is synced in seconds. Default 0, means never sync.
func (o InstanceOutput) SyncInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.SyncInterval }).(pulumi.IntOutput)
}

// The instance title.
func (o InstanceOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
