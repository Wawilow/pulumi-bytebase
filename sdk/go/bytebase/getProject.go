// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The project data source.
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("bytebase:index/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// The project unique resource id.
	ResourceId string `pulumi:"resourceId"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement bool `pulumi:"allowModifyStatement"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval bool `pulumi:"allowSelfApproval"`
	// Whether to automatically enable backup.
	AutoEnableBackup bool `pulumi:"autoEnableBackup"`
	// Enable auto resolve issue.
	AutoResolveIssue bool `pulumi:"autoResolveIssue"`
	// The databases full name in the resource.
	Databases []string `pulumi:"databases"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle bool `pulumi:"enforceIssueTitle"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The project full name in projects/{resource id} format.
	Name string `pulumi:"name"`
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
	PostgresDatabaseTenantMode bool `pulumi:"postgresDatabaseTenantMode"`
	// The project unique resource id.
	ResourceId string `pulumi:"resourceId"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors bool `pulumi:"skipBackupErrors"`
	// The project title.
	Title string `pulumi:"title"`
	// The webhooks in the project.
	Webhooks []GetProjectWebhook `pulumi:"webhooks"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectResultOutput, error) {
			args := v.(LookupProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:index/getProject:getProject", args, LookupProjectResultOutput{}, options).(LookupProjectResultOutput), nil
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// The project unique resource id.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// Allow modifying statement after issue is created.
func (o LookupProjectResultOutput) AllowModifyStatement() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.AllowModifyStatement }).(pulumi.BoolOutput)
}

// Whether to allow the issue creator to self-approve the issue.
func (o LookupProjectResultOutput) AllowSelfApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.AllowSelfApproval }).(pulumi.BoolOutput)
}

// Whether to automatically enable backup.
func (o LookupProjectResultOutput) AutoEnableBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.AutoEnableBackup }).(pulumi.BoolOutput)
}

// Enable auto resolve issue.
func (o LookupProjectResultOutput) AutoResolveIssue() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.AutoResolveIssue }).(pulumi.BoolOutput)
}

// The databases full name in the resource.
func (o LookupProjectResultOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Enforce issue title created by user instead of generated by Bytebase.
func (o LookupProjectResultOutput) EnforceIssueTitle() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.EnforceIssueTitle }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// The project full name in projects/{resource id} format.
func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
func (o LookupProjectResultOutput) PostgresDatabaseTenantMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.PostgresDatabaseTenantMode }).(pulumi.BoolOutput)
}

// The project unique resource id.
func (o LookupProjectResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Whether to skip backup errors and continue the data migration.
func (o LookupProjectResultOutput) SkipBackupErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.SkipBackupErrors }).(pulumi.BoolOutput)
}

// The project title.
func (o LookupProjectResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Title }).(pulumi.StringOutput)
}

// The webhooks in the project.
func (o LookupProjectResultOutput) Webhooks() GetProjectWebhookArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectWebhook { return v.Webhooks }).(GetProjectWebhookArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
