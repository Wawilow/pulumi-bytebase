// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The policy data source.
func LookupPolicy(ctx *pulumi.Context, args *LookupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyResult
	err := ctx.Invoke("bytebase:index/getPolicy:getPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyArgs struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy *GetPolicyDataSourceQueryPolicy `pulumi:"dataSourceQueryPolicy"`
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy  *GetPolicyDisableCopyDataPolicy  `pulumi:"disableCopyDataPolicy"`
	GlobalMaskingPolicy    *GetPolicyGlobalMaskingPolicy    `pulumi:"globalMaskingPolicy"`
	MaskingExceptionPolicy *GetPolicyMaskingExceptionPolicy `pulumi:"maskingExceptionPolicy"`
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent string `pulumi:"parent"`
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy *GetPolicyRolloutPolicy `pulumi:"rolloutPolicy"`
	// The policy type.
	Type string `pulumi:"type"`
}

// A collection of values returned by getPolicy.
type LookupPolicyResult struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy GetPolicyDataSourceQueryPolicy `pulumi:"dataSourceQueryPolicy"`
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy GetPolicyDisableCopyDataPolicy `pulumi:"disableCopyDataPolicy"`
	// Decide if the policy is enforced.
	Enforce             bool                         `pulumi:"enforce"`
	GlobalMaskingPolicy GetPolicyGlobalMaskingPolicy `pulumi:"globalMaskingPolicy"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Decide if the policy should inherit from the parent.
	InheritFromParent      bool                            `pulumi:"inheritFromParent"`
	MaskingExceptionPolicy GetPolicyMaskingExceptionPolicy `pulumi:"maskingExceptionPolicy"`
	// The policy full name
	Name string `pulumi:"name"`
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent string `pulumi:"parent"`
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy GetPolicyRolloutPolicy `pulumi:"rolloutPolicy"`
	// The policy type.
	Type string `pulumi:"type"`
}

func LookupPolicyOutput(ctx *pulumi.Context, args LookupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPolicyResultOutput, error) {
			args := v.(LookupPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:index/getPolicy:getPolicy", args, LookupPolicyResultOutput{}, options).(LookupPolicyResultOutput), nil
		}).(LookupPolicyResultOutput)
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyOutputArgs struct {
	// Restrict querying admin data sources
	DataSourceQueryPolicy GetPolicyDataSourceQueryPolicyPtrInput `pulumi:"dataSourceQueryPolicy"`
	// Restrict data copying in SQL Editor (Admins/DBAs allowed)
	DisableCopyDataPolicy  GetPolicyDisableCopyDataPolicyPtrInput  `pulumi:"disableCopyDataPolicy"`
	GlobalMaskingPolicy    GetPolicyGlobalMaskingPolicyPtrInput    `pulumi:"globalMaskingPolicy"`
	MaskingExceptionPolicy GetPolicyMaskingExceptionPolicyPtrInput `pulumi:"maskingExceptionPolicy"`
	// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
	Parent pulumi.StringInput `pulumi:"parent"`
	// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
	RolloutPolicy GetPolicyRolloutPolicyPtrInput `pulumi:"rolloutPolicy"`
	// The policy type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getPolicy.
type LookupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyResult)(nil)).Elem()
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutput() LookupPolicyResultOutput {
	return o
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutputWithContext(ctx context.Context) LookupPolicyResultOutput {
	return o
}

// Restrict querying admin data sources
func (o LookupPolicyResultOutput) DataSourceQueryPolicy() GetPolicyDataSourceQueryPolicyOutput {
	return o.ApplyT(func(v LookupPolicyResult) GetPolicyDataSourceQueryPolicy { return v.DataSourceQueryPolicy }).(GetPolicyDataSourceQueryPolicyOutput)
}

// Restrict data copying in SQL Editor (Admins/DBAs allowed)
func (o LookupPolicyResultOutput) DisableCopyDataPolicy() GetPolicyDisableCopyDataPolicyOutput {
	return o.ApplyT(func(v LookupPolicyResult) GetPolicyDisableCopyDataPolicy { return v.DisableCopyDataPolicy }).(GetPolicyDisableCopyDataPolicyOutput)
}

// Decide if the policy is enforced.
func (o LookupPolicyResultOutput) Enforce() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPolicyResult) bool { return v.Enforce }).(pulumi.BoolOutput)
}

func (o LookupPolicyResultOutput) GlobalMaskingPolicy() GetPolicyGlobalMaskingPolicyOutput {
	return o.ApplyT(func(v LookupPolicyResult) GetPolicyGlobalMaskingPolicy { return v.GlobalMaskingPolicy }).(GetPolicyGlobalMaskingPolicyOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Decide if the policy should inherit from the parent.
func (o LookupPolicyResultOutput) InheritFromParent() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPolicyResult) bool { return v.InheritFromParent }).(pulumi.BoolOutput)
}

func (o LookupPolicyResultOutput) MaskingExceptionPolicy() GetPolicyMaskingExceptionPolicyOutput {
	return o.ApplyT(func(v LookupPolicyResult) GetPolicyMaskingExceptionPolicy { return v.MaskingExceptionPolicy }).(GetPolicyMaskingExceptionPolicyOutput)
}

// The policy full name
func (o LookupPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
func (o LookupPolicyResultOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Parent }).(pulumi.StringOutput)
}

// Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
func (o LookupPolicyResultOutput) RolloutPolicy() GetPolicyRolloutPolicyOutput {
	return o.ApplyT(func(v LookupPolicyResult) GetPolicyRolloutPolicy { return v.RolloutPolicy }).(GetPolicyRolloutPolicyOutput)
}

// The policy type.
func (o LookupPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyResultOutput{})
}
