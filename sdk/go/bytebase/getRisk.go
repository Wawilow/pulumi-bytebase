// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The risk data source.
func LookupRisk(ctx *pulumi.Context, args *LookupRiskArgs, opts ...pulumi.InvokeOption) (*LookupRiskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRiskResult
	err := ctx.Invoke("bytebase:index/getRisk:getRisk", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRisk.
type LookupRiskArgs struct {
	// The risk full name in risks/{uid} format.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRisk.
type LookupRiskResult struct {
	// The risk active.
	Active bool `pulumi:"active"`
	// The risk condition.
	Condition string `pulumi:"condition"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The risk level.
	Level int `pulumi:"level"`
	// The risk full name in risks/{uid} format.
	Name string `pulumi:"name"`
	// The risk source.
	Source string `pulumi:"source"`
	// The risk title.
	Title string `pulumi:"title"`
}

func LookupRiskOutput(ctx *pulumi.Context, args LookupRiskOutputArgs, opts ...pulumi.InvokeOption) LookupRiskResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRiskResultOutput, error) {
			args := v.(LookupRiskArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:index/getRisk:getRisk", args, LookupRiskResultOutput{}, options).(LookupRiskResultOutput), nil
		}).(LookupRiskResultOutput)
}

// A collection of arguments for invoking getRisk.
type LookupRiskOutputArgs struct {
	// The risk full name in risks/{uid} format.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRiskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRiskArgs)(nil)).Elem()
}

// A collection of values returned by getRisk.
type LookupRiskResultOutput struct{ *pulumi.OutputState }

func (LookupRiskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRiskResult)(nil)).Elem()
}

func (o LookupRiskResultOutput) ToLookupRiskResultOutput() LookupRiskResultOutput {
	return o
}

func (o LookupRiskResultOutput) ToLookupRiskResultOutputWithContext(ctx context.Context) LookupRiskResultOutput {
	return o
}

// The risk active.
func (o LookupRiskResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRiskResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// The risk condition.
func (o LookupRiskResultOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRiskResult) string { return v.Condition }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRiskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRiskResult) string { return v.Id }).(pulumi.StringOutput)
}

// The risk level.
func (o LookupRiskResultOutput) Level() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRiskResult) int { return v.Level }).(pulumi.IntOutput)
}

// The risk full name in risks/{uid} format.
func (o LookupRiskResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRiskResult) string { return v.Name }).(pulumi.StringOutput)
}

// The risk source.
func (o LookupRiskResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRiskResult) string { return v.Source }).(pulumi.StringOutput)
}

// The risk title.
func (o LookupRiskResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRiskResult) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRiskResultOutput{})
}
