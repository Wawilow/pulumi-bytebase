// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The database group data source.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("bytebase:Database/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// The project fullname in projects/{id} format.
	Project string `pulumi:"project"`
	// The database group unique resource id.
	ResourceId string `pulumi:"resourceId"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	// The database group condition.
	Condition string `pulumi:"condition"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The matched databases in the group.
	MatchedDatabases []string `pulumi:"matchedDatabases"`
	// The project fullname in projects/{id} format.
	Project string `pulumi:"project"`
	// The database group unique resource id.
	ResourceId string `pulumi:"resourceId"`
	// The database group title.
	Title string `pulumi:"title"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGroupResultOutput, error) {
			args := v.(LookupGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("bytebase:Database/getGroup:getGroup", args, LookupGroupResultOutput{}, options).(LookupGroupResultOutput), nil
		}).(LookupGroupResultOutput)
}

// A collection of arguments for invoking getGroup.
type LookupGroupOutputArgs struct {
	// The project fullname in projects/{id} format.
	Project pulumi.StringInput `pulumi:"project"`
	// The database group unique resource id.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LookupGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

// A collection of values returned by getGroup.
type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutput() LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutputWithContext(ctx context.Context) LookupGroupResultOutput {
	return o
}

// The database group condition.
func (o LookupGroupResultOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Condition }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The matched databases in the group.
func (o LookupGroupResultOutput) MatchedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGroupResult) []string { return v.MatchedDatabases }).(pulumi.StringArrayOutput)
}

// The project fullname in projects/{id} format.
func (o LookupGroupResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Project }).(pulumi.StringOutput)
}

// The database group unique resource id.
func (o LookupGroupResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The database group title.
func (o LookupGroupResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupResultOutput{})
}
