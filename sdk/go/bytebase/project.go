// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/wawilow/pulumi-bytebase/sdk/go/bytebase/internal"
)

// The project resource.
type Project struct {
	pulumi.CustomResourceState

	// Allow modifying statement after issue is created.
	AllowModifyStatement pulumi.BoolOutput `pulumi:"allowModifyStatement"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval pulumi.BoolOutput `pulumi:"allowSelfApproval"`
	// Whether to automatically enable backup.
	AutoEnableBackup pulumi.BoolOutput `pulumi:"autoEnableBackup"`
	// Enable auto resolve issue.
	AutoResolveIssue pulumi.BoolOutput `pulumi:"autoResolveIssue"`
	// The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
	CiSamplingSize pulumi.IntOutput `pulumi:"ciSamplingSize"`
	// The databases full name in the resource.
	Databases pulumi.StringArrayOutput `pulumi:"databases"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle pulumi.BoolOutput `pulumi:"enforceIssueTitle"`
	// The maximum number of retries for the lock timeout issue.
	ExecutionRetryPolicy pulumi.IntOutput `pulumi:"executionRetryPolicy"`
	// The project full name in projects/{resource id} format.
	Name pulumi.StringOutput `pulumi:"name"`
	// The maximum number of parallel tasks to run during the rollout.
	ParallelTasksPerRollout pulumi.IntOutput `pulumi:"parallelTasksPerRollout"`
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
	PostgresDatabaseTenantMode pulumi.BoolOutput `pulumi:"postgresDatabaseTenantMode"`
	// The project unique resource id. Cannot change this after created.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors pulumi.BoolOutput `pulumi:"skipBackupErrors"`
	// The project title.
	Title pulumi.StringOutput `pulumi:"title"`
	// The webhooks in the project.
	Webhooks ProjectWebhookArrayOutput `pulumi:"webhooks"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("bytebase:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("bytebase:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement *bool `pulumi:"allowModifyStatement"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval *bool `pulumi:"allowSelfApproval"`
	// Whether to automatically enable backup.
	AutoEnableBackup *bool `pulumi:"autoEnableBackup"`
	// Enable auto resolve issue.
	AutoResolveIssue *bool `pulumi:"autoResolveIssue"`
	// The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
	CiSamplingSize *int `pulumi:"ciSamplingSize"`
	// The databases full name in the resource.
	Databases []string `pulumi:"databases"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle *bool `pulumi:"enforceIssueTitle"`
	// The maximum number of retries for the lock timeout issue.
	ExecutionRetryPolicy *int `pulumi:"executionRetryPolicy"`
	// The project full name in projects/{resource id} format.
	Name *string `pulumi:"name"`
	// The maximum number of parallel tasks to run during the rollout.
	ParallelTasksPerRollout *int `pulumi:"parallelTasksPerRollout"`
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
	PostgresDatabaseTenantMode *bool `pulumi:"postgresDatabaseTenantMode"`
	// The project unique resource id. Cannot change this after created.
	ResourceId *string `pulumi:"resourceId"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors *bool `pulumi:"skipBackupErrors"`
	// The project title.
	Title *string `pulumi:"title"`
	// The webhooks in the project.
	Webhooks []ProjectWebhook `pulumi:"webhooks"`
}

type ProjectState struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement pulumi.BoolPtrInput
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval pulumi.BoolPtrInput
	// Whether to automatically enable backup.
	AutoEnableBackup pulumi.BoolPtrInput
	// Enable auto resolve issue.
	AutoResolveIssue pulumi.BoolPtrInput
	// The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
	CiSamplingSize pulumi.IntPtrInput
	// The databases full name in the resource.
	Databases pulumi.StringArrayInput
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle pulumi.BoolPtrInput
	// The maximum number of retries for the lock timeout issue.
	ExecutionRetryPolicy pulumi.IntPtrInput
	// The project full name in projects/{resource id} format.
	Name pulumi.StringPtrInput
	// The maximum number of parallel tasks to run during the rollout.
	ParallelTasksPerRollout pulumi.IntPtrInput
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
	PostgresDatabaseTenantMode pulumi.BoolPtrInput
	// The project unique resource id. Cannot change this after created.
	ResourceId pulumi.StringPtrInput
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors pulumi.BoolPtrInput
	// The project title.
	Title pulumi.StringPtrInput
	// The webhooks in the project.
	Webhooks ProjectWebhookArrayInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement *bool `pulumi:"allowModifyStatement"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval *bool `pulumi:"allowSelfApproval"`
	// Whether to automatically enable backup.
	AutoEnableBackup *bool `pulumi:"autoEnableBackup"`
	// Enable auto resolve issue.
	AutoResolveIssue *bool `pulumi:"autoResolveIssue"`
	// The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
	CiSamplingSize *int `pulumi:"ciSamplingSize"`
	// The databases full name in the resource.
	Databases []string `pulumi:"databases"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle *bool `pulumi:"enforceIssueTitle"`
	// The maximum number of retries for the lock timeout issue.
	ExecutionRetryPolicy *int `pulumi:"executionRetryPolicy"`
	// The maximum number of parallel tasks to run during the rollout.
	ParallelTasksPerRollout *int `pulumi:"parallelTasksPerRollout"`
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
	PostgresDatabaseTenantMode *bool `pulumi:"postgresDatabaseTenantMode"`
	// The project unique resource id. Cannot change this after created.
	ResourceId string `pulumi:"resourceId"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors *bool `pulumi:"skipBackupErrors"`
	// The project title.
	Title string `pulumi:"title"`
	// The webhooks in the project.
	Webhooks []ProjectWebhook `pulumi:"webhooks"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Allow modifying statement after issue is created.
	AllowModifyStatement pulumi.BoolPtrInput
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval pulumi.BoolPtrInput
	// Whether to automatically enable backup.
	AutoEnableBackup pulumi.BoolPtrInput
	// Enable auto resolve issue.
	AutoResolveIssue pulumi.BoolPtrInput
	// The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
	CiSamplingSize pulumi.IntPtrInput
	// The databases full name in the resource.
	Databases pulumi.StringArrayInput
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle pulumi.BoolPtrInput
	// The maximum number of retries for the lock timeout issue.
	ExecutionRetryPolicy pulumi.IntPtrInput
	// The maximum number of parallel tasks to run during the rollout.
	ParallelTasksPerRollout pulumi.IntPtrInput
	// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
	PostgresDatabaseTenantMode pulumi.BoolPtrInput
	// The project unique resource id. Cannot change this after created.
	ResourceId pulumi.StringInput
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors pulumi.BoolPtrInput
	// The project title.
	Title pulumi.StringInput
	// The webhooks in the project.
	Webhooks ProjectWebhookArrayInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Allow modifying statement after issue is created.
func (o ProjectOutput) AllowModifyStatement() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AllowModifyStatement }).(pulumi.BoolOutput)
}

// Whether to allow the issue creator to self-approve the issue.
func (o ProjectOutput) AllowSelfApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AllowSelfApproval }).(pulumi.BoolOutput)
}

// Whether to automatically enable backup.
func (o ProjectOutput) AutoEnableBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutoEnableBackup }).(pulumi.BoolOutput)
}

// Enable auto resolve issue.
func (o ProjectOutput) AutoResolveIssue() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutoResolveIssue }).(pulumi.BoolOutput)
}

// The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
func (o ProjectOutput) CiSamplingSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.CiSamplingSize }).(pulumi.IntOutput)
}

// The databases full name in the resource.
func (o ProjectOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.Databases }).(pulumi.StringArrayOutput)
}

// Enforce issue title created by user instead of generated by Bytebase.
func (o ProjectOutput) EnforceIssueTitle() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.EnforceIssueTitle }).(pulumi.BoolOutput)
}

// The maximum number of retries for the lock timeout issue.
func (o ProjectOutput) ExecutionRetryPolicy() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.ExecutionRetryPolicy }).(pulumi.IntOutput)
}

// The project full name in projects/{resource id} format.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The maximum number of parallel tasks to run during the rollout.
func (o ProjectOutput) ParallelTasksPerRollout() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.ParallelTasksPerRollout }).(pulumi.IntOutput)
}

// Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \n\n" statement.
func (o ProjectOutput) PostgresDatabaseTenantMode() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.PostgresDatabaseTenantMode }).(pulumi.BoolOutput)
}

// The project unique resource id. Cannot change this after created.
func (o ProjectOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Whether to skip backup errors and continue the data migration.
func (o ProjectOutput) SkipBackupErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.SkipBackupErrors }).(pulumi.BoolOutput)
}

// The project title.
func (o ProjectOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The webhooks in the project.
func (o ProjectOutput) Webhooks() ProjectWebhookArrayOutput {
	return o.ApplyT(func(v *Project) ProjectWebhookArrayOutput { return v.Webhooks }).(ProjectWebhookArrayOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
